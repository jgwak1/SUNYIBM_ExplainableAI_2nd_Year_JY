# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  http {
    port => 5444
  }
}
filter {
  ruby {
    init => "
      system_process_pids = []
      command = 'tasklist /V'
      ps_output = `#{command}`
      ps_output.split(/[\r\n]+/).each do |line|
        if /System |AUTHORITY\\SYSTEM|AUTHORITY\\LOCAL|AUTHORITY\\NETWORK/.match?(line)
          fields = line.split(/\s+/)
          pid = fields[1]
          if pid == 'Idle'
            #logger.info('Idle')
            system_process_pids << fields[3].to_i
          else
            if pid == 'Compression'
              #logger.info('Compression')
              system_process_pids << fields[2].to_i
            else            
              system_process_pids << pid.to_i
              #logger.info(system_process_pids)
            end
          end
        end
      end
      ENV['SYSTEM_PROCESS_PIDS'] = system_process_pids.to_json
      # JY @ 2024-2-26: Instantiate here 
      EventNames_To_Drop = ['OperationEnd', 'NameDelete']
      ProcessNames_To_Drop = ['java', 'SilkService']
      # JY @ 2024-2-29
      # global variables , or try ENV[splunkd_and_all_descendent_pids'] = [] ?
      $splunkd_and_all_descendent_pids = []
      $found_first_splunkd = false
    "
    code => "
      if event.get('ProcessName') == 'splunkd' && $found_first_splunkd == false
         $splunkd_and_all_descendent_pids << event.get('ProcessID').to_i
         $found_first_splunkd = true
      end
      if $splunkd_and_all_descendent_pids.include?(event.get('ProcessID').to_i) && event.get('EventName') == 'ProcessStart/Start'
         #logger.info('JY: IDENTIFIED DESCENDNET PID')
         #logger.info('JY: XmlEventData:')
         #puts event.get('XmlEventData')
         xml_event_data = event.get('XmlEventData')
         #logger.info('JY: XmlEventData -- ProcessID:')
         #puts xml_event_data['ProcessID']
         child_ProcessID_str = xml_event_data['ProcessID']
         if child_ProcessID_str.include?(',')
            child_ProcessID_comma_drop_str = child_ProcessID_str.tr(',', '')
            child_ProcessID_int = child_ProcessID_comma_drop_str.to_i
         else
            child_ProcessID_int = child_ProcessID_str.to_i
         end
         #logger.info('JY:  child_ProcessID_int:')
         #puts child_ProcessID_int
         $splunkd_and_all_descendent_pids << child_ProcessID_int
         #logger.info('JY:  splunkd_and_all_descendent_pids:')
         #puts $splunkd_and_all_descendent_pids
      end
      if $splunkd_and_all_descendent_pids.empty?
          # Filters-out System Process-Ids that were identified in the beginning (Meng's filter)
          system_process_pids = JSON.parse(ENV['SYSTEM_PROCESS_PIDS'])
          if system_process_pids.include?(event.get('ProcessID').to_i)
            # logger.info('event.cancel')
            event.cancel
            event.set('[@metadata][drop]', true)
          end
          # Filter-out 'OperationEnd' or 'NameDelete'
          if EventNames_To_Drop.include?(event.get('EventName'))
            logger.info('JY: Filter out Unwanted EventName events')
            event.cancel
            event.set('[@metadata][drop]', true)
          end
          # Filter-out 'java' or 'SilkService'
          if ProcessNames_To_Drop.include?(event.get('ProcessName'))
            logger.info('JY: Filter out Unwanted ProcessName events')
            event.cancel
            event.set('[@metadata][drop]', true)
          end
      else
         if $splunkd_and_all_descendent_pids.include?(event.get('ProcessID').to_i)
           logger.info('JY: Filter-IN splunkd and descendent pids')
           #logger.info('JY:   Filtered-In  ProcessID:')
           #processID = event.get('ProcessID').to_i
           #puts processID
           #logger.info('JY:  splunkd_and_all_descendent_pids:')
           #puts $splunkd_and_all_descendent_pids
         else
           logger.info('JY: Filter-OUT Non-splunkd Non-descendent pids')
           event.cancel
           event.set('[@metadata][drop]', true)
         end
      end
    "
  }
  if [@metadata][drop] {
    drop { }
  }
}
output {
  elasticsearch {
    hosts => ["128.226.117.212:9200"]
    #index => "%{[@metadata][beat]}-%{[@metadata][version]}"
    index => "${LOGSTASH_INDEX}"
    data_stream => false
    }
    stdout { codec => json }
    #user => "elastic"
    #password => "changeme"
  }