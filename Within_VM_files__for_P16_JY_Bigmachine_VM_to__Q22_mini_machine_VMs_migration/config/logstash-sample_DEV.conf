# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  http {
    port => 5444
  }
}
filter {
  ruby {
    init => "
      system_process_pids = []
      command = 'tasklist /V'
      ps_output = `#{command}`
      ps_output.split(/[\r\n]+/).each do |line|
        if /System |AUTHORITY\\SYSTEM|AUTHORITY\\LOCAL|AUTHORITY\\NETWORK/.match?(line)
          fields = line.split(/\s+/)
          pid = fields[1]
          if pid == 'Idle'
            #logger.info('Idle')
            system_process_pids << fields[3].to_i
          else
            if pid == 'Compression'
              #logger.info('Compression')
              system_process_pids << fields[2].to_i
            else            
              system_process_pids << pid.to_i
              #logger.info(system_process_pids)
            end
          end
        end
      end
      ENV['SYSTEM_PROCESS_PIDS'] = system_process_pids.to_json

      # JY @ 2024-2-26: Instantiate here 
      EventNames_To_Drop = ['OperationEnd', 'NameDelete']
      ProcessNames_To_Drop = ['java', 'SilkService']

      # JY @ 2024-2-29
      splunkd_and_all_descendent_pids = []
      found_first_splunkd = false

    "
    code => "
    
      # Try to identify first splunkd (this may not be correct, as this is what splunkd starts)
      # Instead, find a way to identify the very first splunkd event
      if event.get('ProcessName') == 'splunkd' && found_first_splunkd == false
        splunkd_and_all_descendent_pids << event.get('ProcessID').to_i
        found_first_splunkd = true
      end

      # Try to populate descendant pids
      if splunkd_and_all_descendent_pids.include?(event.get('ProcessID')) && event.get('EventName') == 'ProcessStart/Start'
        # might need to get rid of ',' if there is such, e.g., 2,144
        splunkd_and_all_descendent_pids << event.get('XmlData')['ProcessID'].gsub(",", "").to_i
      end

      # Before identifying splunkd 
      if splunkd_and_all_descendent_pids.empty?
          # Filters-out System Process-Ids that were identified in the beginning (Meng's filter)
          system_process_pids = JSON.parse(ENV['SYSTEM_PROCESS_PIDS'])
          if system_process_pids.include?(event.get('ProcessID').to_i)
            # logger.info('event.cancel')
            event.cancel
            event.set('[@metadata][drop]', true)
          end

          # Filter-out 'OperationEnd' or 'NameDelete'
          if EventNames_To_Drop.include?(event.get('EventName'))
            logger.info('JY: Filter Unwanted EventName events')
            event.cancel
            event.set('[@metadata][drop]', true)
          end

          # Filter-out 'java' or 'SilkService'
          if ProcessNames_To_Drop.include?(event.get('ProcessName'))
            logger.info('JY: Filter Unwanted ProcessName events')
            event.cancel
            event.set('[@metadata][drop]', true)
          end

      # Identified splunkd, (+ descendent)
      else
          # JY @ 2024-2-29: Filter-in splunkd and all its descendant processes
          unless splunkd_and_all_descendent_pids.include?(event.get('ProcessID'))
            logger.info('JY: Filter out Non-splunkd or descendent pids')
            event.cancel
            event.set('[@metadata][drop]', true)
          end
      end
    "
  }
  if [@metadata][drop] {
    drop { }
  }
}
output {
  elasticsearch {
    hosts => ["128.226.117.212:9200"]
    #index => "%{[@metadata][beat]}-%{[@metadata][version]}"
    index => "${LOGSTASH_INDEX}"
    data_stream => false
    }
    stdout { codec => json }
    #user => "elastic"
    #password => "changeme"
  }